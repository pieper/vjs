{"version":3,"sources":["widget_pixelProbe/node_modules/browserify/node_modules/browser-pack/_prelude.js","widget_pixelProbe/examples/widget_pixelProbe/widget_pixelProbe.js","widget_pixelProbe/widget_pixelProbe.js","widget_pixelProbe/node_modules/dicom-parser/dist/dicomParser.js","widget_pixelProbe/src/controls/OrbitControls2D.js","widget_pixelProbe/src/core/core.intersections.js","widget_pixelProbe/src/geometries/geometries.slice.js","widget_pixelProbe/src/helpers/helpers.slice.js","widget_pixelProbe/src/loaders/loaders.dicom.js","widget_pixelProbe/src/models/models.frame.js","widget_pixelProbe/src/models/models.series.js","widget_pixelProbe/src/models/models.stack.js","widget_pixelProbe/src/parsers/jpx.js","widget_pixelProbe/src/parsers/parsers.dicom.js","widget_pixelProbe/src/shaders/shaders.data.js","widget_pixelProbe/src/widgets/widgets.pixelProbe.js"],"names":[],"mappings":"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EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACA,CAAA,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","file":"widget_pixelProbe/widget_pixelProbe.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* globals Stats*/\n'use strict';\n\nvar vjsOrbitControl2D = require('../../src/controls/OrbitControls2D');\nvar vjsProbePixelWidget = require('../../src/widgets/widgets.pixelProbe');\nvar vjsLoaderDicom = require('../../src/loaders/loaders.dicom');\n\nvar VJS = VJS || {};\n\n// standard global variables\nvar controls, renderer, stats, scene, camera, probe, raycaster, mouse, drag;\n\n// FUNCTIONS\nfunction onProgressCallback(evt, filename) {\n  var percentComplete = Math.round((evt.loaded / evt.total) * 100);\n\n  window.console.log(filename);\n\n  var fileContainer = document.getElementById(filename);\n  if (!fileContainer) {\n    var progressContainer = document.getElementById('my-progress-container');\n    var div = document.createElement('div');\n    div.setAttribute('id', filename);\n    div.innerHTML = 'Downloading ' + filename + ': ' + percentComplete + '%';\n\n    progressContainer.appendChild(div);\n  } else {\n    fileContainer.innerHTML = 'Downloading ' + filename + ': ' + percentComplete + '%';\n  }\n}\n\nfunction init() {\n  function onDocumentMouseMove(event) {\n    event.preventDefault();\n\n    drag = 1;\n\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    mouse.x = (event.clientX / threeD.offsetWidth) * 2 - 1;\n    mouse.y = -(event.clientY / threeD.offsetHeight) * 2 + 1;\n    mouse.clientX = event.clientX;\n    mouse.clientY = event.clientY;\n  }\n\n  function onDocumentMouseDown(event) {\n    event.preventDefault();\n\n    drag = 0;\n\n  }\n\n  function onDocumentMouseUp(event) {\n    event.preventDefault();\n\n    if (drag === 0) {\n      // create/select handle\n      raycaster.setFromCamera(mouse, camera);\n      // name???\n      var domElement = probe.mark(raycaster, mouse);\n      if (domElement) {\n        var threeD = document.getElementById('r3d');\n        threeD.appendChild(domElement);\n      }\n    }\n  }\n\n  // this function is executed on each animation frame\n  function animate() {\n\n    // image probe widget\n    if (mouse && raycaster && probe) {\n      raycaster.setFromCamera(mouse, camera);\n      probe.update(raycaster, mouse, camera, threeD);\n    }\n\n    // render\n    controls.update();\n    renderer.render(scene, camera);\n    stats.update();\n\n    // request new frame\n    requestAnimationFrame(function() {\n      animate();\n    });\n  }\n\n  // renderer\n  var threeD = document.getElementById('r3d');\n  renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setSize(threeD.offsetWidth, threeD.offsetHeight);\n  renderer.setClearColor(0xFFFFFF, 1);\n\n  var maxTextureSize = renderer.context.getParameter(renderer.context.MAX_TEXTURE_SIZE);\n  window.console.log(maxTextureSize);\n\n  threeD.appendChild(renderer.domElement);\n\n  // stats\n  stats = new Stats();\n  threeD.appendChild(stats.domElement);\n\n  // scene\n  scene = new THREE.Scene();\n  \n  // camera\n  camera = new THREE.PerspectiveCamera(45, threeD.offsetWidth / threeD.offsetHeight, 1, 10000000);\n  camera.position.x = 150;\n  camera.position.y = 150;\n  camera.position.z = 100;\n  camera.lookAt(scene.position);\n  // controls\n  controls = new vjsOrbitControl2D(camera, renderer.domElement);\n\n  //\n  // mouse callbacks\n  raycaster = new THREE.Raycaster();\n  mouse = new THREE.Vector2();\n  renderer.domElement.addEventListener('mousemove', onDocumentMouseMove, false);\n  renderer.domElement.addEventListener('mousedown', onDocumentMouseDown, false);\n  renderer.domElement.addEventListener('mouseup', onDocumentMouseUp, false);\n\n  animate();\n}\n\nwindow.onload = function() {\n  // init threeJS...\n  init();\n\n  // create loader manager (to keep track of progress over N files...)\n  // might not be useful with promises anymore.\n\n  // can not promise do it for us??\n  var manager = new THREE.LoadingManager();\n  manager.onProgress = function(item, loaded, total) {\n    window.console.log(item);\n    var fileContainer = document.getElementById(item);\n    if (fileContainer) {\n      fileContainer.innerHTML = ' ' + item + ' is ready! ' + '(' + loaded + '/' + total + ')';\n      // merge images!\n      // add it to the scene!\n    }\n  };\n\n  var file = '/data/dcm/adi/36749894';\n  //var file = '../../data/dcm/fruit';\n\n  // instantiate the loader\n  var loader = new vjsLoaderDicom(manager);\n  loader.load(\n      file,\n      // on load\n        function(imageHelper) {\n          // should it just return an image model?\n          // add image helper to scene\n          imageHelper.prepare();\n          scene.add(imageHelper);\n\n          probe = new vjsProbePixelWidget(imageHelper._image, imageHelper.children);\n          scene.add(probe);\n\n          var threeD = document.getElementById('r3d');\n          threeD.appendChild(probe.domElement);\n        },\n        // progress\n        function() {\n          onProgressCallback(event, file);\n        },\n        // error\n        function(message) {\n          window.console.log('error: ', message);\n        }\n    );\n\n  // use manager to deal with \"all loaded\"\n  // similar to promise all\n\n};\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/* globals Stats*/\n'use strict';\n\nvar vjsOrbitControl2D = require('../../src/controls/OrbitControls2D');\nvar vjsProbePixelWidget = require('../../src/widgets/widgets.pixelProbe');\nvar vjsLoaderDicom = require('../../src/loaders/loaders.dicom');\n\nvar VJS = VJS || {};\n\n// standard global variables\nvar controls, renderer, stats, scene, camera, probe, raycaster, mouse, drag;\n\n// FUNCTIONS\nfunction onProgressCallback(evt, filename) {\n  var percentComplete = Math.round((evt.loaded / evt.total) * 100);\n\n  window.console.log(filename);\n\n  var fileContainer = document.getElementById(filename);\n  if (!fileContainer) {\n    var progressContainer = document.getElementById('my-progress-container');\n    var div = document.createElement('div');\n    div.setAttribute('id', filename);\n    div.innerHTML = 'Downloading ' + filename + ': ' + percentComplete + '%';\n\n    progressContainer.appendChild(div);\n  } else {\n    fileContainer.innerHTML = 'Downloading ' + filename + ': ' + percentComplete + '%';\n  }\n}\n\nfunction init() {\n  function onDocumentMouseMove(event) {\n    event.preventDefault();\n\n    drag = 1;\n\n    // calculate mouse position in normalized device coordinates\n    // (-1 to +1) for both components\n    mouse.x = (event.clientX / threeD.offsetWidth) * 2 - 1;\n    mouse.y = -(event.clientY / threeD.offsetHeight) * 2 + 1;\n    mouse.clientX = event.clientX;\n    mouse.clientY = event.clientY;\n  }\n\n  function onDocumentMouseDown(event) {\n    event.preventDefault();\n\n    drag = 0;\n\n  }\n\n  function onDocumentMouseUp(event) {\n    event.preventDefault();\n\n    if (drag === 0) {\n      // create/select handle\n      raycaster.setFromCamera(mouse, camera);\n      // name???\n      var domElement = probe.mark(raycaster, mouse);\n      if (domElement) {\n        var threeD = document.getElementById('r3d');\n        threeD.appendChild(domElement);\n      }\n    }\n  }\n\n  // this function is executed on each animation frame\n  function animate() {\n\n    // image probe widget\n    if (mouse && raycaster && probe) {\n      raycaster.setFromCamera(mouse, camera);\n      probe.update(raycaster, mouse, camera, threeD);\n    }\n\n    // render\n    controls.update();\n    renderer.render(scene, camera);\n    stats.update();\n\n    // request new frame\n    requestAnimationFrame(function() {\n      animate();\n    });\n  }\n\n  // renderer\n  var threeD = document.getElementById('r3d');\n  renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setSize(threeD.offsetWidth, threeD.offsetHeight);\n  renderer.setClearColor(0xFFFFFF, 1);\n\n  var maxTextureSize = renderer.context.getParameter(renderer.context.MAX_TEXTURE_SIZE);\n  window.console.log(maxTextureSize);\n\n  threeD.appendChild(renderer.domElement);\n\n  // stats\n  stats = new Stats();\n  threeD.appendChild(stats.domElement);\n\n  // scene\n  scene = new THREE.Scene();\n  \n  // camera\n  camera = new THREE.PerspectiveCamera(45, threeD.offsetWidth / threeD.offsetHeight, 1, 10000000);\n  camera.position.x = 150;\n  camera.position.y = 150;\n  camera.position.z = 100;\n  camera.lookAt(scene.position);\n  // controls\n  controls = new vjsOrbitControl2D(camera, renderer.domElement);\n\n  //\n  // mouse callbacks\n  raycaster = new THREE.Raycaster();\n  mouse = new THREE.Vector2();\n  renderer.domElement.addEventListener('mousemove', onDocumentMouseMove, false);\n  renderer.domElement.addEventListener('mousedown', onDocumentMouseDown, false);\n  renderer.domElement.addEventListener('mouseup', onDocumentMouseUp, false);\n\n  animate();\n}\n\nwindow.onload = function() {\n  // init threeJS...\n  init();\n\n  // create loader manager (to keep track of progress over N files...)\n  // might not be useful with promises anymore.\n\n  // can not promise do it for us??\n  var manager = new THREE.LoadingManager();\n  manager.onProgress = function(item, loaded, total) {\n    window.console.log(item);\n    var fileContainer = document.getElementById(item);\n    if (fileContainer) {\n      fileContainer.innerHTML = ' ' + item + ' is ready! ' + '(' + loaded + '/' + total + ')';\n      // merge images!\n      // add it to the scene!\n    }\n  };\n\n  var file = '/data/dcm/adi/36749894';\n  //var file = '../../data/dcm/fruit';\n\n  // instantiate the loader\n  var loader = new vjsLoaderDicom(manager);\n  loader.load(\n      file,\n      // on load\n        function(imageHelper) {\n          // should it just return an image model?\n          // add image helper to scene\n          imageHelper.prepare();\n          scene.add(imageHelper);\n\n          probe = new vjsProbePixelWidget(imageHelper._image, imageHelper.children);\n          scene.add(probe);\n\n          var threeD = document.getElementById('r3d');\n          threeD.appendChild(probe.domElement);\n        },\n        // progress\n        function() {\n          onProgressCallback(event, file);\n        },\n        // error\n        function(message) {\n          window.console.log('error: ', message);\n        }\n    );\n\n  // use manager to deal with \"all loaded\"\n  // similar to promise all\n\n};\n\n},{\"../../src/controls/OrbitControls2D\":3,\"../../src/loaders/loaders.dicom\":7,\"../../src/widgets/widgets.pixelProbe\":14}],2:[function(require,module,exports){\n/*! dicom-parser - v1.1.0 - 2015-07-20 | (c) 2014 Chris Hafey | https://github.com/chafey/dicomParser */\n(function (root, factory) {\n\n    // node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = factory();\n    }\n    else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else {\n        // Browser globals\n        if(typeof cornerstone === 'undefined'){\n            dicomParser = {};\n\n            // meteor\n            if (typeof Package !== 'undefined') {\n                root.dicomParser = dicomParser;\n            }\n        }\n        dicomParser = factory();\n    }\n}(this, function () {\n\n    /**\n     * Parses a DICOM P10 byte array and returns a DataSet object with the parsed elements.  If the options\n     * argument is supplied and it contains the untilTag property, parsing will stop once that\n     * tag is encoutered.  This can be used to parse partial byte streams.\n     *\n     * @param byteArray the byte array\n     * @param options object to control parsing behavior (optional)\n     * @returns {DataSet}\n     * @throws error if an error occurs while parsing.  The exception object will contain a property dataSet with the\n     *         elements successfully parsed before the error.\n     */\nvar dicomParser = (function(dicomParser) {\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.parseDicom = function(byteArray, options) {\n\n        if(byteArray === undefined)\n        {\n            throw \"dicomParser.parseDicom: missing required parameter 'byteArray'\";\n        }\n\n        var littleEndianByteStream = new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray);\n\n        function readPrefix()\n        {\n            littleEndianByteStream.seek(128);\n            var prefix = littleEndianByteStream.readFixedString(4);\n            if(prefix !== \"DICM\")\n            {\n                throw \"dicomParser.parseDicom: DICM prefix not found at location 132\";\n            }\n        }\n\n        function readPart10Header()\n        {\n            // Per the DICOM standard, the header is always encoded in Explicit VR Little Endian (see PS3.10, section 7.1)\n            // so use littleEndianByteStream throughout this method regardless of the transfer syntax\n            readPrefix();\n\n            var warnings = [];\n            var elements = {};\n            while(littleEndianByteStream.position < littleEndianByteStream.byteArray.length) {\n                var position = littleEndianByteStream.position;\n                var element = dicomParser.readDicomElementExplicit(littleEndianByteStream, warnings);\n                if(element.tag > 'x0002ffff') {\n                    littleEndianByteStream.position = position;\n                    break;\n                }\n                // Cache the littleEndianByteArrayParser for meta header elements, since the rest of the data set may be big endian\n                // and this parser will be needed later if the meta header values are to be read.\n                element.parser = dicomParser.littleEndianByteArrayParser;\n                elements[element.tag] = element;\n            }\n            var metaHeaderDataSet = new dicomParser.DataSet(littleEndianByteStream.byteArrayParser, littleEndianByteStream.byteArray, elements);\n            metaHeaderDataSet.warnings = littleEndianByteStream.warnings;\n            return metaHeaderDataSet;\n        }\n\n        function readTransferSyntax(metaHeaderDataSet) {\n            if(metaHeaderDataSet.elements.x00020010 === undefined) {\n                throw 'dicomParser.parseDicom: missing required meta header attribute 0002,0010';\n            }\n            var transferSyntaxElement = metaHeaderDataSet.elements.x00020010;\n            return dicomParser.readFixedString(littleEndianByteStream.byteArray, transferSyntaxElement.dataOffset, transferSyntaxElement.length);\n        }\n\n        function isExplicit(transferSyntax) {\n            if(transferSyntax === '1.2.840.10008.1.2') // implicit little endian\n            {\n                return false;\n            }\n            // all other transfer syntaxes should be explicit\n            return true;\n        }\n\n        function getDataSetByteStream(transferSyntax) {\n            if(transferSyntax === '1.2.840.10008.1.2.2') // explicit big endian\n            {\n                return new dicomParser.ByteStream(dicomParser.bigEndianByteArrayParser, byteArray, littleEndianByteStream.position);\n            }\n            else\n            {\n                // all other transfer syntaxes are little endian; only the pixel encoding differs\n                // make a new stream so the metaheader warnings don't come along for the ride\n                return new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray, littleEndianByteStream.position);\n            }\n        }\n\n        function mergeDataSets(metaHeaderDataSet, instanceDataSet)\n        {\n            for (var propertyName in metaHeaderDataSet.elements)\n            {\n                if(metaHeaderDataSet.elements.hasOwnProperty(propertyName))\n                {\n                    instanceDataSet.elements[propertyName] = metaHeaderDataSet.elements[propertyName];\n                }\n            }\n            if (metaHeaderDataSet.warnings !== undefined) {\n                instanceDataSet.warnings = metaHeaderDataSet.warnings.concat(instanceDataSet.warnings);\n            }\n            return instanceDataSet;\n        }\n\n        function readDataSet(metaHeaderDataSet)\n        {\n            var transferSyntax = readTransferSyntax(metaHeaderDataSet);\n            var explicit = isExplicit(transferSyntax);\n            var dataSetByteStream = getDataSetByteStream(transferSyntax);\n\n            var elements = {};\n            var dataSet = new dicomParser.DataSet(dataSetByteStream.byteArrayParser, dataSetByteStream.byteArray, elements);\n            dataSet.warnings = dataSetByteStream.warnings;\n\n            try{\n                if(explicit) {\n                    dicomParser.parseDicomDataSetExplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n                }\n                else\n                {\n                    dicomParser.parseDicomDataSetImplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n                }\n            }\n            catch(e) {\n                var ex = {\n                    exception: e,\n                    dataSet: dataSet\n                };\n                throw ex;\n            }\n            return dataSet;\n        }\n\n        // main function here\n        function parseTheByteStream() {\n            var metaHeaderDataSet = readPart10Header();\n\n            var dataSet = readDataSet(metaHeaderDataSet);\n\n            return mergeDataSets(metaHeaderDataSet, dataSet);\n        }\n\n        // This is where we actually start parsing\n        return parseTheByteStream();\n    };\n\n    return dicomParser;\n})(dicomParser);\n\nvar dicomParser = (function (dicomParser) {\n    \"use strict\";\n\n    if (dicomParser === undefined) {\n        dicomParser = {};\n    }\n\n    /**\n     * converts an explicit dataSet to a javascript object\n     * @param dataSet\n     * @param options\n     */\n    dicomParser.explicitDataSetToJS = function (dataSet, options) {\n\n        if(dataSet === undefined) {\n            throw 'dicomParser.explicitDataSetToJS: missing required parameter dataSet';\n        }\n\n        options = options || {\n            omitPrivateAttibutes: true, // true if private elements should be omitted\n            maxElementLength : 128      // maximum element length to try and convert to string format\n        };\n\n        var result = {\n\n        };\n\n        for(var tag in dataSet.elements) {\n            var element = dataSet.elements[tag];\n\n            // skip this element if it a private element and our options specify that we should\n            if(options.omitPrivateAttibutes === true && dicomParser.isPrivateTag(tag))\n            {\n                continue;\n            }\n\n            if(element.items) {\n                // handle sequences\n                var sequenceItems = [];\n                for(var i=0; i < element.items.length; i++) {\n                    sequenceItems.push(dicomParser.explicitDataSetToJS(element.items[i].dataSet, options));\n                }\n                result[tag] = sequenceItems;\n            } else {\n                var asString;\n                asString = undefined;\n                if(element.length < options.maxElementLength) {\n                    asString = dicomParser.explicitElementToString(dataSet, element);\n                }\n\n                if(asString !== undefined) {\n                    result[tag] = asString;\n                }  else {\n                    result[tag] = {\n                        dataOffset: element.dataOffset,\n                        length : element.length\n                    };\n                }\n            }\n        }\n\n        return result;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\nvar dicomParser = (function (dicomParser) {\n    \"use strict\";\n\n    if (dicomParser === undefined) {\n        dicomParser = {};\n    }\n\n    /**\n     * Converts an explicit VR element to a string or undefined if it is not possible to convert.\n     * Throws an error if an implicit element is supplied\n     * @param dataSet\n     * @param element\n     * @returns {*}\n     */\n    dicomParser.explicitElementToString = function(dataSet, element)\n    {\n        if(dataSet === undefined || element === undefined) {\n            throw 'dicomParser.explicitElementToString: missing required parameters';\n        }\n        if(element.vr === undefined) {\n            throw 'dicomParser.explicitElementToString: cannot convert implicit element to string';\n        }\n        var vr = element.vr;\n        var tag = element.tag;\n\n        var textResult;\n\n        function multiElementToString(numItems, func) {\n            var result = \"\";\n            for(var i=0; i < numItems; i++) {\n                if(i !== 0) {\n                    result += '/';\n                }\n                result += func.call(dataSet, tag).toString();\n            }\n            return result;\n        }\n\n        if(dicomParser.isStringVr(vr) === true)\n        {\n            textResult = dataSet.string(tag);\n        }\n        else if (vr == 'AT') {\n            var num = dataSet.uint32(tag);\n            if(num === undefined) {\n                return undefined;\n            }\n            if (num < 0)\n            {\n                num = 0xFFFFFFFF + num + 1;\n            }\n\n            return 'x' + num.toString(16).toUpperCase();\n        }\n        else if (vr == 'US')\n        {\n            textResult = multiElementToString(element.length / 2, dataSet.uint16);\n        }\n        else if(vr === 'SS')\n        {\n            textResult = multiElementToString(element.length / 2, dataSet.int16);\n        }\n        else if (vr == 'UL')\n        {\n            textResult = multiElementToString(element.length / 4, dataSet.uint32);\n        }\n        else if(vr === 'SL')\n        {\n            textResult = multiElementToString(element.length / 4, dataSet.int32);\n        }\n        else if(vr == 'FD')\n        {\n            textResult = multiElementToString(element.length / 8, dataSet.int32);\n        }\n        else if(vr == 'FL')\n        {\n            textResult = multiElementToString(element.length / 4, dataSet.float);\n        }\n\n        return textResult;\n    };\n    return dicomParser;\n}(dicomParser));\n/**\n * Utility functions for dealing with DICOM\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    var stringVrs = {\n        AE: true,\n        AS: true,\n        AT: false,\n        CS: true,\n        DA: true,\n        DS: true,\n        DT: true,\n        FL: false,\n        FD: false,\n        IS: true,\n        LO: true,\n        LT: true,\n        OB: false,\n        OD: false,\n        OF: false,\n        OW: false,\n        PN: true,\n        SH: true,\n        SL: false,\n        SQ: false,\n        SS: false,\n        ST: true,\n        TM: true,\n        UI: true,\n        UL: false,\n        UN: undefined, // dunno\n        UR: true,\n        US: false,\n        UT: true\n    };\n\n    /**\n     * Tests to see if vr is a string or not.\n     * @param vr\n     * @returns true if string, false it not string, undefined if unknown vr or UN type\n     */\n    dicomParser.isStringVr = function(vr)\n    {\n        return stringVrs[vr];\n    };\n\n    /**\n     * Tests to see if a given tag in the format xggggeeee is a private tag or not\n     * @param tag\n     * @returns {boolean}\n     */\n    dicomParser.isPrivateTag = function(tag)\n    {\n        var lastGroupDigit = parseInt(tag[4]);\n        var groupIsOdd = (lastGroupDigit % 2) === 1;\n        return groupIsOdd;\n    };\n\n    /**\n     * Parses a PN formatted string into a javascript object with properties for givenName, familyName, middleName, prefix and suffix\n     * @param personName a string in the PN VR format\n     * @param index\n     * @returns {*} javascript object with properties for givenName, familyName, middleName, prefix and suffix or undefined if no element or data\n     */\n    dicomParser.parsePN = function(personName) {\n        if(personName === undefined) {\n            return undefined;\n        }\n        var stringValues = personName.split('^');\n        return {\n            familyName: stringValues[0],\n            givenName: stringValues[1],\n            middleName: stringValues[2],\n            prefix: stringValues[3],\n            suffix: stringValues[4]\n        };\n    };\n\n    /**\n     * Parses a DA formatted string into a Javascript object\n     * @param date a string in the DA VR format\n     * @returns {*} Javascript object with properties year, month and day or undefined if not present or not 8 bytes long\n     */\n    dicomParser.parseDA = function(date)\n    {\n        if(date && date.length === 8)\n        {\n            var yyyy = parseInt(date.substring(0, 4), 10);\n            var mm = parseInt(date.substring(4, 6), 10);\n            var dd = parseInt(date.substring(6, 8), 10);\n\n            return {\n                year: yyyy,\n                month: mm,\n                day: dd\n            };\n        }\n        return undefined;\n    };\n\n    /**\n     * Parses a TM formatted string into a javascript object with properties for hours, minutes, seconds and fractionalSeconds\n     * @param time a string in the TM VR format\n     * @returns {*} javascript object with properties for hours, minutes, seconds and fractionalSeconds or undefined if no element or data.  Missing fields are set to undefined\n     */\n    dicomParser.parseTM = function(time) {\n\n        if (time.length >= 2) // must at least have HH\n        {\n            // 0123456789\n            // HHMMSS.FFFFFF\n            var hh = parseInt(time.substring(0, 2), 10);\n            var mm = time.length >= 4 ? parseInt(time.substring(2, 4), 10) : undefined;\n            var ss = time.length >= 6 ? parseInt(time.substring(4, 6), 10) : undefined;\n            var ffffff = time.length >= 8 ? parseInt(time.substring(7, 13), 10) : undefined;\n\n            return {\n                hours: hh,\n                minutes: mm,\n                seconds: ss,\n                fractionalSeconds: ffffff\n            };\n        }\n        return undefined;\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function getPixelDataFromFragments(byteStream, fragments, bufferSize)\n    {\n        // if there is only one fragment, return a view on this array to avoid copying\n        if(fragments.length === 1) {\n            return new Uint8Array(byteStream.byteArray.buffer, fragments[0].dataOffset, fragments[0].length);\n        }\n\n        // more than one fragment, combine all of the fragments into one buffer\n        var pixelData = new Uint8Array(bufferSize);\n        var pixelDataIndex = 0;\n        for(var i=0; i < fragments.length; i++) {\n            var fragmentOffset = fragments[i].dataOffset;\n            for(var j=0; j < fragments[i].length; j++) {\n                pixelData[pixelDataIndex++] = byteStream.byteArray[fragmentOffset++];\n            }\n        }\n\n        return pixelData;\n    }\n\n    function readFragmentsUntil(byteStream, endOfFrame) {\n        // Read fragments until we reach endOfFrame\n        var fragments = [];\n        var bufferSize = 0;\n        while(byteStream.position < endOfFrame && byteStream.position < byteStream.byteArray.length) {\n            var fragment = dicomParser.readSequenceItem(byteStream);\n            // NOTE: we only encounter this for the sequence delimiter tag when extracting the last frame\n            if(fragment.tag === 'xfffee0dd') {\n                break;\n            }\n            fragments.push(fragment);\n            byteStream.seek(fragment.length);\n            bufferSize += fragment.length;\n        }\n\n        // Convert the fragments into a single pixelData buffer\n        var pixelData = getPixelDataFromFragments(byteStream, fragments, bufferSize);\n        return pixelData;\n    }\n\n    function readEncapsulatedPixelDataWithBasicOffsetTable(pixelDataElement, byteStream, frame) {\n        //  validate that we have an offset for this frame\n        var numFrames = pixelDataElement.basicOffsetTable.length;\n        if(frame > numFrames) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter frame exceeds number of frames in basic offset table\";\n        }\n\n        // move to the start of this frame\n        var frameOffset = pixelDataElement.basicOffsetTable[frame];\n        byteStream.seek(frameOffset);\n\n        // Find the end of this frame\n        var endOfFrameOffset = pixelDataElement.basicOffsetTable[frame + 1];\n        if(endOfFrameOffset === undefined) { // special case for last frame\n            endOfFrameOffset = byteStream.position + pixelDataElement.length;\n        }\n\n        // read this frame\n        var pixelData = readFragmentsUntil(byteStream, endOfFrameOffset);\n        return pixelData;\n    }\n\n    function readEncapsulatedDataNoBasicOffsetTable(pixelDataElement, byteStream, frame) {\n        // if the basic offset table is empty, this is a single frame so make sure the requested\n        // frame is 0\n        if(frame !== 0) {\n            throw 'dicomParser.readEncapsulatedPixelData: non zero frame specified for single frame encapsulated pixel data';\n        }\n\n        // read this frame\n        var endOfFrame = byteStream.position + pixelDataElement.length;\n        var pixelData = readFragmentsUntil(byteStream, endOfFrame);\n        return pixelData;\n    }\n\n    /**\n     * Returns the pixel data for the specified frame in an encapsulated pixel data element\n     *\n     * @param dataSet - the dataSet containing the encapsulated pixel data\n     * @param pixelDataElement - the pixel data element (x7fe00010) to extract the frame from\n     * @param frame - the zero based frame index\n     * @returns Uint8Array with the encapsulated pixel data\n     */\n    dicomParser.readEncapsulatedPixelData = function(dataSet, pixelDataElement, frame)\n    {\n        if(dataSet === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: missing required parameter 'dataSet'\";\n        }\n        if(pixelDataElement === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: missing required parameter 'element'\";\n        }\n        if(frame === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: missing required parameter 'frame'\";\n        }\n        if(pixelDataElement.tag !== 'x7fe00010') {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to non pixel data tag (expected tag = x7fe00010'\";\n        }\n        if(pixelDataElement.encapsulatedPixelData !== true) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(pixelDataElement.hadUndefinedLength !== true) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(pixelDataElement.basicOffsetTable === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(pixelDataElement.fragments === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(frame < 0) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'frame' must be >= 0\";\n        }\n\n        // seek past the basic offset table (no need to parse it again since we already have)\n        var byteStream = new dicomParser.ByteStream(dataSet.byteArrayParser, dataSet.byteArray, pixelDataElement.dataOffset);\n        var basicOffsetTable = dicomParser.readSequenceItem(byteStream);\n        if(basicOffsetTable.tag !== 'xfffee000')\n        {\n            throw \"dicomParser.readEncapsulatedPixelData: missing basic offset table xfffee000\";\n        }\n        byteStream.seek(basicOffsetTable.length);\n\n        // If the basic offset table is empty (no entries), it is a single frame.  If it is not empty,\n        // it has at least one frame so use the basic offset table to find the bytes\n        if(pixelDataElement.basicOffsetTable.length !== 0)\n        {\n            return readEncapsulatedPixelDataWithBasicOffsetTable(pixelDataElement, byteStream, frame);\n        }\n        else\n        {\n            return readEncapsulatedDataNoBasicOffsetTable(pixelDataElement, byteStream, frame);\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n\n/**\n * Internal helper functions for parsing different types from a big-endian byte array\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.bigEndianByteArrayParser = {\n        /**\n         *\n         * Parses an unsigned int 16 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readUint16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n            }\n            return (byteArray[position] << 8) + byteArray[position + 1];\n        },\n\n        /**\n         *\n         * Parses a signed int 16 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed signed int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readInt16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n            }\n            var int16 = (byteArray[position] << 8) + byteArray[position + 1];\n            // fix sign\n            if (int16 & 0x8000) {\n                int16 = int16 - 0xFFFF - 1;\n            }\n            return int16;\n        },\n\n        /**\n         * Parses an unsigned int 32 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readUint32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n            }\n\n            var uint32 = (256 * (256 * (256 * byteArray[position] +\n                                              byteArray[position + 1]) +\n                                              byteArray[position + 2]) +\n                                              byteArray[position + 3]);\n\n            return uint32;\n        },\n\n        /**\n         * Parses a signed int 32 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed signed int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readInt32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n            }\n\n            var int32 = ((byteArray[position] << 24) +\n                         (byteArray[position + 1] << 16) +\n                         (byteArray[position + 2] << 8) +\n                          byteArray[position + 3]);\n\n            return int32;\n        },\n\n        /**\n         * Parses 32-bit float from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 32-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readFloat: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readFloat: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(4);\n            byteArrayForParsingFloat[3] = byteArray[position];\n            byteArrayForParsingFloat[2] = byteArray[position + 1];\n            byteArrayForParsingFloat[1] = byteArray[position + 2];\n            byteArrayForParsingFloat[0] = byteArray[position + 3];\n            var floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        },\n\n        /**\n         * Parses 64-bit float from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 64-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readDouble: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readDouble: position cannot be less than 0';\n            }\n\n            if (position + 8 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(8);\n            byteArrayForParsingFloat[7] = byteArray[position];\n            byteArrayForParsingFloat[6] = byteArray[position + 1];\n            byteArrayForParsingFloat[5] = byteArray[position + 2];\n            byteArrayForParsingFloat[4] = byteArray[position + 3];\n            byteArrayForParsingFloat[3] = byteArray[position + 4];\n            byteArrayForParsingFloat[2] = byteArray[position + 5];\n            byteArrayForParsingFloat[1] = byteArray[position + 6];\n            byteArrayForParsingFloat[0] = byteArray[position + 7];\n            var floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions common to parsing byte arrays of any type\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads a string of 8-bit characters from an array of bytes and advances\n     * the position by length bytes.  A null terminator will end the string\n     * but will not effect advancement of the position.  Trailing and leading\n     * spaces are preserved (not trimmed)\n     * @param byteArray the byteArray to read from\n     * @param position the position in the byte array to read from\n     * @param length the maximum number of bytes to parse\n     * @returns {string} the parsed string\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n    dicomParser.readFixedString = function(byteArray, position, length)\n    {\n        if(length < 0)\n        {\n            throw 'readFixedString - length cannot be less than 0';\n        }\n\n        if(position + length > byteArray.length) {\n            throw 'dicomParser.readFixedString: attempt to read past end of buffer';\n        }\n\n        var result = \"\";\n        for(var i=0; i < length; i++)\n        {\n            var byte = byteArray[position + i];\n            if(byte === 0) {\n                position +=  length;\n                return result;\n            }\n            result += String.fromCharCode(byte);\n        }\n\n        return result;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n *\n * Internal helper class to assist with parsing. Supports reading from a byte\n * stream contained in a Uint8Array.  Example usage:\n *\n *  var byteArray = new Uint8Array(32);\n *  var byteStream = new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray);\n *\n * */\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Constructor for ByteStream objects.\n     * @param byteArrayParser a parser for parsing the byte array\n     * @param byteArray a Uint8Array containing the byte stream\n     * @param position (optional) the position to start reading from.  0 if not specified\n     * @constructor\n     * @throws will throw an error if the byteArrayParser parameter is not present\n     * @throws will throw an error if the byteArray parameter is not present or invalid\n     * @throws will throw an error if the position parameter is not inside the byte array\n     */\n    dicomParser.ByteStream = function(byteArrayParser, byteArray, position) {\n        if(byteArrayParser === undefined)\n        {\n            throw \"dicomParser.ByteStream: missing required parameter 'byteArrayParser'\";\n        }\n        if(byteArray === undefined)\n        {\n            throw \"dicomParser.ByteStream: missing required parameter 'byteArray'\";\n        }\n        if((byteArray instanceof Uint8Array) === false) {\n            throw 'dicomParser.ByteStream: parameter byteArray is not of type Uint8Array';\n        }\n        if(position < 0)\n        {\n            throw \"dicomParser.ByteStream: parameter 'position' cannot be less than 0\";\n        }\n        if(position >= byteArray.length)\n        {\n            throw \"dicomParser.ByteStream: parameter 'position' cannot be greater than or equal to 'byteArray' length\";\n\n        }\n        this.byteArrayParser = byteArrayParser;\n        this.byteArray = byteArray;\n        this.position = position ? position : 0;\n        this.warnings = []; // array of string warnings encountered while parsing\n    };\n\n    /**\n     * Safely seeks through the byte stream.  Will throw an exception if an attempt\n     * is made to seek outside of the byte array.\n     * @param offset the number of bytes to add to the position\n     * @throws error if seek would cause position to be outside of the byteArray\n     */\n    dicomParser.ByteStream.prototype.seek = function(offset)\n    {\n        if(this.position + offset < 0)\n        {\n            throw \"cannot seek to position < 0\";\n        }\n        this.position += offset;\n    };\n\n    /**\n     * Returns a new ByteStream object from the current position and of the requested number of bytes\n     * @param numBytes the length of the byte array for the ByteStream to contain\n     * @returns {dicomParser.ByteStream}\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readByteStream = function(numBytes)\n    {\n        if(this.position + numBytes > this.byteArray.length) {\n            throw 'readByteStream - buffer overread';\n        }\n        var byteArrayView = new Uint8Array(this.byteArray.buffer, this.position, numBytes);\n        this.position += numBytes;\n        return new dicomParser.ByteStream(this.byteArrayParser, byteArrayView);\n    };\n\n    /**\n     *\n     * Parses an unsigned int 16 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parsed unsigned int 16\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readUint16 = function()\n    {\n        var result = this.byteArrayParser.readUint16(this.byteArray, this.position);\n        this.position += 2;\n        return result;\n    };\n\n    /**\n     * Parses an unsigned int 32 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parse unsigned int 32\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readUint32 = function()\n    {\n        var result = this.byteArrayParser.readUint32(this.byteArray, this.position);\n        this.position += 4;\n        return result;\n    };\n\n    /**\n     * Reads a string of 8-bit characters from an array of bytes and advances\n     * the position by length bytes.  A null terminator will end the string\n     * but will not effect advancement of the position.\n     * @param length the maximum number of bytes to parse\n     * @returns {string} the parsed string\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readFixedString = function(length)\n    {\n        var result = dicomParser.readFixedString(this.byteArray, this.position, length);\n        this.position += length;\n        return result;\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n *\n * The DataSet class encapsulates a collection of DICOM Elements and provides various functions\n * to access the data in those elements\n *\n * Rules for handling padded spaces:\n * DS = Strip leading and trailing spaces\n * DT = Strip trailing spaces\n * IS = Strip leading and trailing spaces\n * PN = Strip trailing spaces\n * TM = Strip trailing spaces\n * AE = Strip leading and trailing spaces\n * CS = Strip leading and trailing spaces\n * SH = Strip leading and trailing spaces\n * LO = Strip leading and trailing spaces\n * LT = Strip trailing spaces\n * ST = Strip trailing spaces\n * UT = Strip trailing spaces\n *\n */\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function getByteArrayParser(element, defaultParser)\n    {\n        return (element.parser !== undefined ? element.parser : defaultParser);\n    }\n\n    /**\n     * Constructs a new DataSet given byteArray and collection of elements\n     * @param byteArrayParser\n     * @param byteArray\n     * @param elements\n     * @constructor\n     */\n    dicomParser.DataSet = function(byteArrayParser, byteArray, elements)\n    {\n        this.byteArrayParser = byteArrayParser;\n        this.byteArray = byteArray;\n        this.elements = elements;\n    };\n\n    /**\n     * Finds the element for tag and returns an unsigned int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 16 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.uint16 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readUint16(this.byteArray, element.dataOffset + (index *2));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns an signed int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 16 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.int16 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readInt16(this.byteArray, element.dataOffset + (index * 2));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns an unsigned int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 32 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.uint32 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readUint32(this.byteArray, element.dataOffset + (index * 4));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns an signed int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 32 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.int32 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readInt32(this.byteArray, element.dataOffset + (index * 4));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns a 32 bit floating point number (VR=FL) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.float = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readFloat(this.byteArray, element.dataOffset + (index * 4));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns a 64 bit floating point number (VR=FD) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or doesn't has data of length 0\n     */\n    dicomParser.DataSet.prototype.double = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readDouble(this.byteArray, element.dataOffset + (index * 8));\n        }\n        return undefined;\n    };\n\n    /**\n     * Returns the number of string values for the element\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @returns {*} the number of string values or undefined if the attribute is not present or has zero length data\n     */\n    dicomParser.DataSet.prototype.numStringValues = function(tag)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            var fixedString = dicomParser.readFixedString(this.byteArray, element.dataOffset, element.length);\n            var numMatching = fixedString.match(/\\\\/g);\n            if(numMatching === null)\n            {\n                return 1;\n            }\n            return numMatching.length + 1;\n        }\n        return undefined;\n    };\n\n    /**\n     * Returns a string for the element.  If index is provided, the element is assumed to be\n     * multi-valued and will return the component specified by index.  Undefined is returned\n     * if there is no component with the specified index, the element does not exist or is zero length.\n     *\n     * Use this function for VR types of AE, CS, SH and LO\n     *\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the entire string\n     * @returns {*}\n     */\n    dicomParser.DataSet.prototype.string = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            var fixedString = dicomParser.readFixedString(this.byteArray, element.dataOffset, element.length);\n            if(index >= 0)\n            {\n                var values = fixedString.split('\\\\');\n                // trim trailing spaces\n                return values[index].trim();\n            }\n            else\n            {\n                // trim trailing spaces\n                return fixedString.trim();\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Returns a string with the leading spaces preserved and trailing spaces removed.\n     *\n     * Use this function to access data for VRs of type UT, ST and LT\n     *\n     * @param tag\n     * @param index\n     * @returns {*}\n     */\n    dicomParser.DataSet.prototype.text = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            var fixedString = dicomParser.readFixedString(this.byteArray, element.dataOffset, element.length);\n            if(index >= 0)\n            {\n                var values = fixedString.split('\\\\');\n                return values[index].replace(/ +$/, '');\n            }\n            else\n            {\n                return fixedString.replace(/ +$/, '');\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Parses a string to a float for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} a floating point number or undefined if not present or data not long enough\n     */\n    dicomParser.DataSet.prototype.floatString = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            index = (index !== undefined) ? index : 0;\n            var value = this.string(tag, index);\n            if(value !== undefined) {\n                return parseFloat(value);\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Parses a string to an integer for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} an integer or undefined if not present or data not long enough\n     */\n    dicomParser.DataSet.prototype.intString = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0) {\n            index = (index !== undefined) ? index : 0;\n            var value = this.string(tag, index);\n            if(value !== undefined) {\n                return parseInt(value);\n            }\n        }\n        return undefined;\n    };\n\n    //dicomParser.DataSet = DataSet;\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads an encapsulated pixel data element and adds an array of fragments to the element\n     * containing the offset and length of each fragment and any offsets from the basic offset\n     * table\n     * @param byteStream\n     * @param element\n     */\n    dicomParser.findEndOfEncapsulatedElement = function(byteStream, element, warnings)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.findEndOfEncapsulatedElement: missing required parameter 'byteStream'\";\n        }\n        if(element === undefined)\n        {\n            throw \"dicomParser.findEndOfEncapsulatedElement: missing required parameter 'element'\";\n        }\n\n        element.encapsulatedPixelData = true;\n        element.basicOffsetTable = [];\n        element.fragments = [];\n        var basicOffsetTableItemTag = dicomParser.readTag(byteStream);\n        if(basicOffsetTableItemTag !== 'xfffee000') {\n            throw \"dicomParser.findEndOfEncapsulatedElement: basic offset table not found\";\n        }\n        var basicOffsetTableItemlength = byteStream.readUint32();\n        var numFragments = basicOffsetTableItemlength / 4;\n        for(var i =0; i < numFragments; i++) {\n            var offset = byteStream.readUint32();\n            element.basicOffsetTable.push(offset);\n        }\n        var baseOffset = byteStream.position;\n\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var tag = dicomParser.readTag(byteStream);\n            var length = byteStream.readUint32();\n            if(tag === 'xfffee0dd')\n            {\n                byteStream.seek(length);\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n            else if(tag === 'xfffee000')\n            {\n                element.fragments.push({\n                    offset: byteStream.position - baseOffset - 8,\n                    position : byteStream.position,\n                    length : length\n                });\n            }\n            else {\n                if(warnings) {\n                    warnings.push('unexpected tag ' + tag + ' while searching for end of pixel data element with undefined length');\n                }\n                if(length > byteStream.byteArray.length - byteStream.position)\n                {\n                    // fix length\n                    length = byteStream.byteArray.length - byteStream.position;\n                }\n                element.fragments.push({\n                    offset: byteStream.position - baseOffset - 8,\n                    position : byteStream.position,\n                    length : length\n                });\n                byteStream.seek(length);\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n\n            byteStream.seek(length);\n        }\n\n        if(warnings) {\n            warnings.push(\"pixel data element \" + element.tag + \" missing sequence delimiter tag xfffee0dd\");\n        }\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * reads from the byte stream until it finds the magic numbers for the item delimitation item\n     * and then sets the length of the element\n     * @param byteStream\n     * @param element\n     */\n    dicomParser.findItemDelimitationItemAndSetElementLength = function(byteStream, element)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'\";\n        }\n\n        var itemDelimitationItemLength = 8; // group, element, length\n        var maxPosition = byteStream.byteArray.length - itemDelimitationItemLength;\n        while(byteStream.position <= maxPosition)\n        {\n            var groupNumber = byteStream.readUint16();\n            if(groupNumber === 0xfffe)\n            {\n                var elementNumber = byteStream.readUint16();\n                if(elementNumber === 0xe00d)\n                {\n                    // NOTE: It would be better to also check for the length to be 0 as part of the check above\n                    // but we will just log a warning for now\n                    var itemDelimiterLength = byteStream.readUint32(); // the length\n                    if(itemDelimiterLength !== 0) {\n                        byteStream.warnings('encountered non zero length following item delimiter at position' + byteStream.position - 4 + \" while reading element of undefined length with tag ' + element.tag\");\n                    }\n                    element.length = byteStream.position - element.dataOffset;\n                    return;\n\n                }\n            }\n        }\n\n        // No item delimitation item - silently set the length to the end of the buffer and set the position past the end of the buffer\n        element.length = byteStream.byteArray.length - element.dataOffset;\n        byteStream.seek(byteStream.byteArray.length - byteStream.position);\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing different types from a little-endian byte array\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.littleEndianByteArrayParser = {\n        /**\n         *\n         * Parses an unsigned int 16 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readUint16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n            }\n            return byteArray[position] + (byteArray[position + 1] * 256);\n        },\n\n        /**\n         *\n         * Parses a signed int 16 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed signed int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readInt16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n            }\n            var int16 = byteArray[position] + (byteArray[position + 1] << 8);\n            // fix sign\n            if (int16 & 0x8000) {\n                int16 = int16 - 0xFFFF - 1;\n            }\n            return int16;\n        },\n\n\n        /**\n         * Parses an unsigned int 32 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readUint32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n            }\n\n            var uint32 = (byteArray[position] +\n            (byteArray[position + 1] * 256) +\n            (byteArray[position + 2] * 256 * 256) +\n            (byteArray[position + 3] * 256 * 256 * 256 ));\n\n            return uint32;\n        },\n\n        /**\n         * Parses a signed int 32 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readInt32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n            }\n\n            var int32 = (byteArray[position] +\n            (byteArray[position + 1] << 8) +\n            (byteArray[position + 2] << 16) +\n            (byteArray[position + 3] << 24));\n\n            return int32;\n\n        },\n\n        /**\n         * Parses 32-bit float from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 32-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readFloat: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readFloat: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(4);\n            byteArrayForParsingFloat[0] = byteArray[position];\n            byteArrayForParsingFloat[1] = byteArray[position + 1];\n            byteArrayForParsingFloat[2] = byteArray[position + 2];\n            byteArrayForParsingFloat[3] = byteArray[position + 3];\n            var floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        },\n\n        /**\n         * Parses 64-bit float from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 64-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readDouble: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readDouble: position cannot be less than 0';\n            }\n\n            if (position + 8 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(8);\n            byteArrayForParsingFloat[0] = byteArray[position];\n            byteArrayForParsingFloat[1] = byteArray[position + 1];\n            byteArrayForParsingFloat[2] = byteArray[position + 2];\n            byteArrayForParsingFloat[3] = byteArray[position + 3];\n            byteArrayForParsingFloat[4] = byteArray[position + 4];\n            byteArrayForParsingFloat[5] = byteArray[position + 5];\n            byteArrayForParsingFloat[6] = byteArray[position + 6];\n            byteArrayForParsingFloat[7] = byteArray[position + 7];\n            var floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing implicit and explicit DICOM data sets\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * reads an explicit data set\n     * @param byteStream the byte stream to read from\n     * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n     */\n    dicomParser.parseDicomDataSetExplicit = function (dataSet, byteStream, maxPosition, options) {\n\n        maxPosition = (maxPosition === undefined) ? byteStream.byteArray.length : maxPosition ;\n        options = options || {};\n\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.parseDicomDataSetExplicit: missing required parameter 'byteStream'\";\n        }\n        if(maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length)\n        {\n            throw \"dicomParser.parseDicomDataSetExplicit: invalid value for parameter 'maxPosition'\";\n        }\n        var elements = dataSet.elements;\n\n        while(byteStream.position < maxPosition)\n        {\n            var element = dicomParser.readDicomElementExplicit(byteStream, dataSet.warnings, options.untilTag);\n            elements[element.tag] = element;\n            if(element.tag === options.untilTag) {\n                return;\n            }\n        }\n        if(byteStream.position > maxPosition) {\n            throw \"dicomParser:parseDicomDataSetExplicit: buffer overrun\";\n        }\n    };\n\n    /**\n     * reads an implicit data set\n     * @param byteStream the byte stream to read from\n     * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n     */\n    dicomParser.parseDicomDataSetImplicit = function(dataSet, byteStream, maxPosition, options)\n    {\n        maxPosition = (maxPosition === undefined) ? dataSet.byteArray.length : maxPosition ;\n        options = options || {};\n\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.parseDicomDataSetImplicit: missing required parameter 'byteStream'\";\n        }\n        if(maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length)\n        {\n            throw \"dicomParser.parseDicomDataSetImplicit: invalid value for parameter 'maxPosition'\";\n        }\n\n        var elements = dataSet.elements;\n\n        while(byteStream.position < maxPosition)\n        {\n            var element = dicomParser.readDicomElementImplicit(byteStream, options.untilTag);\n            elements[element.tag] = element;\n            if(element.tag === options.untilTag) {\n                return;\n            }\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function getDataLengthSizeInBytesForVR(vr)\n    {\n        if( vr === 'OB' ||\n            vr === 'OW' ||\n            vr === 'SQ' ||\n            vr === 'OF' ||\n            vr === 'UT' ||\n            vr === 'UN')\n        {\n            return 4;\n        }\n        else\n        {\n            return 2;\n        }\n    }\n\n    dicomParser.readDicomElementExplicit = function(byteStream, warnings, untilTag)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readDicomElementExplicit: missing required parameter 'byteStream'\";\n        }\n\n        var element = {\n            tag : dicomParser.readTag(byteStream),\n            vr : byteStream.readFixedString(2)\n            // length set below based on VR\n            // dataOffset set below based on VR and size of length\n        };\n\n        var dataLengthSizeBytes = getDataLengthSizeInBytesForVR(element.vr);\n        if(dataLengthSizeBytes === 2)\n        {\n            element.length = byteStream.readUint16();\n            element.dataOffset = byteStream.position;\n        }\n        else\n        {\n            byteStream.seek(2);\n            element.length = byteStream.readUint32();\n            element.dataOffset = byteStream.position;\n        }\n\n        if(element.length === 4294967295)\n        {\n            element.hadUndefinedLength = true;\n        }\n\n        if(element.tag === untilTag) {\n            return element;\n        }\n\n        // if VR is SQ, parse the sequence items\n        if(element.vr === 'SQ')\n        {\n            dicomParser.readSequenceItemsExplicit(byteStream, element, warnings);\n            return element;\n        }\n        if(element.length === 4294967295)\n        {\n            if(element.tag === 'x7fe00010') {\n                dicomParser.findEndOfEncapsulatedElement(byteStream, element, warnings);\n                return element;\n            } else {\n                dicomParser.findItemDelimitationItemAndSetElementLength(byteStream, element);\n                return element;\n            }\n        }\n\n        byteStream.seek(element.length);\n        return element;\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.readDicomElementImplicit = function(byteStream, untilTag)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'\";\n        }\n\n        var element = {\n            tag : dicomParser.readTag(byteStream),\n            length: byteStream.readUint32(),\n            dataOffset :  byteStream.position\n        };\n\n        if(element.length === 4294967295)\n        {\n            element.hadUndefinedLength = true;\n        }\n\n        if(element.tag === untilTag) {\n            return element;\n        }\n\n        // peek ahead at the next tag to see if it looks like a sequence.  This is not 100%\n        // safe because a non sequence item could have data that has these bytes, but this\n        // is how to do it without a data dictionary.\n        if ((byteStream.position + 4) <= byteStream.byteArray.length) {\n            var nextTag = dicomParser.readTag(byteStream);\n            byteStream.seek(-4);\n\n            if (nextTag === 'xfffee000') {\n                // parse the sequence\n                dicomParser.readSequenceItemsImplicit(byteStream, element);\n                //element.length = byteStream.byteArray.length - element.dataOffset;\n                return element;\n            }\n        }\n\n        // if element is not a sequence and has undefined length, we have to\n        // scan the data for a magic number to figure out when it ends.\n        if(element.length === 4294967295)\n        {\n            dicomParser.findItemDelimitationItemAndSetElementLength(byteStream, element);\n            return element;\n        }\n\n        // non sequence element with known length, skip over the data part\n        byteStream.seek(element.length);\n        return element;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function readDicomDataSetExplicitUndefinedLength(byteStream, warnings)\n    {\n        var elements = {};\n\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var element = dicomParser.readDicomElementExplicit(byteStream, warnings);\n            elements[element.tag] = element;\n\n            // we hit an item delimiter tag, return the current offset to mark\n            // the end of this sequence item\n            if(element.tag === 'xfffee00d')\n            {\n                return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n            }\n\n        }\n\n        // eof encountered - log a warning and return what we have for the element\n        byteStream.warnings.push('eof encountered before finding sequence delimitation item while reading sequence item of undefined length');\n        return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n\n    function readSequenceItemExplicit(byteStream, warnings)\n    {\n        var item = dicomParser.readSequenceItem(byteStream);\n\n        if(item.length === 4294967295)\n        {\n            item.hadUndefinedLength = true;\n            item.dataSet = readDicomDataSetExplicitUndefinedLength(byteStream, warnings);\n            item.length = byteStream.position - item.dataOffset;\n        }\n        else\n        {\n            item.dataSet = new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n            dicomParser.parseDicomDataSetExplicit(item.dataSet, byteStream, byteStream.position + item.length);\n        }\n        return item;\n    }\n\n    function readSQElementUndefinedLengthExplicit(byteStream, element, warnings)\n    {\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var item = readSequenceItemExplicit(byteStream, warnings);\n            element.items.push(item);\n\n            // If this is the sequence delimitation item, return the offset of the next element\n            if(item.tag === 'xfffee0dd')\n            {\n                // sequence delimitation item, update attr data length and return\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n        }\n\n        // eof encountered - log a warning and set the length of the element based on the buffer size\n        byteStream.warnings.push('eof encountered before finding sequence delimitation item in sequence element of undefined length with tag ' + element.tag);\n        element.length = byteStream.byteArray.length - element.dataOffset;\n    }\n\n    function readSQElementKnownLengthExplicit(byteStream, element, warnings)\n    {\n        var maxPosition = element.dataOffset + element.length;\n        while(byteStream.position < maxPosition)\n        {\n            var item = readSequenceItemExplicit(byteStream, warnings);\n            element.items.push(item);\n        }\n    }\n\n    dicomParser.readSequenceItemsExplicit = function(byteStream, element, warnings)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsExplicit: missing required parameter 'byteStream'\";\n        }\n        if(element === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsExplicit: missing required parameter 'element'\";\n        }\n\n        element.items = [];\n\n        if(element.length === 4294967295)\n        {\n            readSQElementUndefinedLengthExplicit(byteStream, element);\n        }\n        else\n        {\n            readSQElementKnownLengthExplicit(byteStream, element, warnings);\n        }\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function readDicomDataSetImplicitUndefinedLength(byteStream)\n    {\n        var elements = {};\n\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var element = dicomParser.readDicomElementImplicit(byteStream);\n            elements[element.tag] = element;\n\n            // we hit an item delimiter tag, return the current offset to mark\n            // the end of this sequence item\n            if(element.tag === 'xfffee00d')\n            {\n                return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n            }\n        }\n        // eof encountered - log a warning and return what we have for the element\n        byteStream.warnings.push('eof encountered before finding sequence item delimiter in sequence item of undefined length');\n        return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n\n    function readSequenceItemImplicit(byteStream)\n    {\n        var item = dicomParser.readSequenceItem(byteStream);\n\n        if(item.length === 4294967295)\n        {\n            item.hadUndefinedLength = true;\n            item.dataSet = readDicomDataSetImplicitUndefinedLength(byteStream);\n            item.length = byteStream.position - item.dataOffset;\n        }\n        else\n        {\n            item.dataSet = new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n            dicomParser.parseDicomDataSetImplicit(item.dataSet, byteStream, byteStream.position + item.length);\n        }\n        return item;\n    }\n\n    function readSQElementUndefinedLengthImplicit(byteStream, element)\n    {\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var item = readSequenceItemImplicit(byteStream);\n            element.items.push(item);\n\n            // If this is the sequence delimitation item, return the offset of the next element\n            if(item.tag === 'xfffee0dd')\n            {\n                // sequence delimitation item, update attr data length and return\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n        }\n\n        // eof encountered - log a warning and set the length of the element based on the buffer size\n        byteStream.warnings.push('eof encountered before finding sequence delimitation item in sequence of undefined length');\n        element.length = byteStream.byteArray.length - element.dataOffset;\n    }\n\n    function readSQElementKnownLengthImplicit(byteStream, element)\n    {\n        var maxPosition = element.dataOffset + element.length;\n        while(byteStream.position < maxPosition)\n        {\n            var item = readSequenceItemImplicit(byteStream);\n            element.items.push(item);\n        }\n    }\n\n    /**\n     * Reads sequence items for an element in an implicit little endian byte stream\n     * @param byteStream the implicit little endian byte stream\n     * @param element the element to read the sequence items for\n     */\n    dicomParser.readSequenceItemsImplicit = function(byteStream, element)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsImplicit: missing required parameter 'byteStream'\";\n        }\n        if(element === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsImplicit: missing required parameter 'element'\";\n        }\n\n        element.items = [];\n\n        if(element.length === 4294967295)\n        {\n            readSQElementUndefinedLengthImplicit(byteStream, element);\n        }\n        else\n        {\n            readSQElementKnownLengthImplicit(byteStream, element);\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads the tag and length of a sequence item and returns them as an object with the following properties\n     *  tag : string for the tag of this element in the format xggggeeee\n     *  length: the number of bytes in this item or 4294967295 if undefined\n     *  dataOffset: the offset into the byteStream of the data for this item\n     * @param byteStream the byte\n     * @returns {{tag: string, length: integer, dataOffset: integer}}\n     */\n    dicomParser.readSequenceItem = function(byteStream)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readSequenceItem: missing required parameter 'byteStream'\";\n        }\n\n        var element = {\n            tag : dicomParser.readTag(byteStream),\n            length : byteStream.readUint32(),\n            dataOffset :  byteStream.position\n        };\n\n        return element;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads a tag (group number and element number) from a byteStream\n     * @param byteStream the byte stream to read from\n     * @returns {string} the tag in format xggggeeee where gggg is the lowercase hex value of the group number\n     * and eeee is the lower case hex value of the element number\n     */\n    dicomParser.readTag = function(byteStream)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readTag: missing required parameter 'byteStream'\";\n        }\n\n        var groupNumber =  byteStream.readUint16() * 256 * 256;\n        var elementNumber = byteStream.readUint16();\n        var tag = \"x\" + ('00000000' + (groupNumber + elementNumber).toString(16)).substr(-8);\n        return tag;\n    };\n\n    return dicomParser;\n}(dicomParser));\n    return dicomParser;\n}));\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\n/**\n * traversc: modified mouse wheel zoom to work with orthographic camera\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n/*global THREE, console */\n\n// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\n// the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\n// supported.\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\nTHREE.OrbitControls2D = function(object, domElement) {\n\n    this.object = object;\n    this.domElement = (domElement !== undefined) ? domElement : document;\n\n    // API\n\n    // Set to false to disable this control\n    this.enabled = true;\n\n    // \"target\" sets the location of focus, where the control orbits around\n    // and where it pans with respect to.\n    this.target = new THREE.Vector3();\n\n    // center is old, deprecated; use \"target\" instead\n    this.center = this.target;\n\n    // This option actually enables dollying in and out; left as \"zoom\" for\n    // backwards compatibility\n    this.noZoom = false;\n    this.zoomSpeed = 1.0;\n\n    // Limits to how far you can dolly in and out\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n\n    // Set to true to disable this control\n    this.noRotate = false;\n    this.rotateSpeed = 1.0;\n\n    // Set to true to disable this control\n    this.noPan = false;\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n\n    // Set to true to automatically rotate around the target\n    this.autoRotate = false;\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n    // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n    this.minPolarAngle = 0; // radians\n    this.maxPolarAngle = Math.PI; // radians\n\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n    this.minAzimuthAngle = -Infinity; // radians\n    this.maxAzimuthAngle = Infinity; // radians\n\n    // Set to true to disable use of the keys\n    this.noKeys = false;\n\n    // The four arrow keys\n    this.keys = {\n        LEFT: 37,\n        UP: 38,\n        RIGHT: 39,\n        BOTTOM: 40\n    };\n\n    // Mouse buttons\n    this.mouseButtons = {\n        ORBIT: THREE.MOUSE.LEFT,\n        ZOOM: THREE.MOUSE.MIDDLE,\n        PAN: THREE.MOUSE.RIGHT\n    };\n\n    ////////////\n    // internals\n\n    var scope = this;\n\n    var EPS = 0.000001;\n\n    var rotateStart = new THREE.Vector2();\n    var rotateEnd = new THREE.Vector2();\n    var rotateDelta = new THREE.Vector2();\n\n    var panStart = new THREE.Vector2();\n    var panEnd = new THREE.Vector2();\n    var panDelta = new THREE.Vector2();\n    var panOffset = new THREE.Vector3();\n\n    var offset = new THREE.Vector3();\n\n    var dollyStart = new THREE.Vector2();\n    var dollyEnd = new THREE.Vector2();\n    var dollyDelta = new THREE.Vector2();\n\n    var theta;\n    var phi;\n    var phiDelta = 0;\n    var thetaDelta = 0;\n    var scale = 1;\n    var pan = new THREE.Vector3();\n\n    var lastPosition = new THREE.Vector3();\n    var lastQuaternion = new THREE.Quaternion();\n\n    var STATE = {\n        NONE: -1,\n        ROTATE: 0,\n        DOLLY: 1,\n        PAN: 2,\n        TOUCH_ROTATE: 3,\n        TOUCH_DOLLY: 4,\n        TOUCH_PAN: 5\n    };\n\n    var state = STATE.NONE;\n\n    // for reset\n\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n\n    // so camera.up is the orbit axis\n\n    var quat = new THREE.Quaternion().setFromUnitVectors(object.up, new THREE.Vector3(0, 1, 0));\n    var quatInverse = quat.clone().inverse();\n\n    // events\n\n    var changeEvent = {\n        type: 'change'\n    };\n    var startEvent = {\n        type: 'start'\n    };\n    var endEvent = {\n        type: 'end'\n    };\n\n    this.rotateLeft = function(angle) {\n\n        if (angle === undefined) {\n\n            angle = getAutoRotationAngle();\n\n        }\n\n        thetaDelta -= angle;\n\n    };\n\n    this.rotateUp = function(angle) {\n\n        if (angle === undefined) {\n\n            angle = getAutoRotationAngle();\n\n        }\n\n        phiDelta -= angle;\n\n    };\n\n    // pass in distance in world space to move left\n    this.panLeft = function(distance) {\n\n        var te = this.object.matrix.elements;\n\n        // get X column of matrix\n        panOffset.set(te[0], te[1], te[2]);\n        panOffset.multiplyScalar(-distance);\n\n        pan.add(panOffset);\n\n    };\n\n    // pass in distance in world space to move up\n    this.panUp = function(distance) {\n\n        var te = this.object.matrix.elements;\n\n        // get Y column of matrix\n        panOffset.set(te[4], te[5], te[6]);\n        panOffset.multiplyScalar(distance);\n\n        pan.add(panOffset);\n\n    };\n\n    // pass in x,y of change desired in pixel space,\n    // right and down are positive\n    this.pan = function(deltaX, deltaY) {\n\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n        if (scope.object.fov !== undefined) {\n\n            // perspective\n            var position = scope.object.position;\n            var offset = position.clone().sub(scope.target);\n            var targetDistance = offset.length();\n\n            // half of the fov is center to top of screen\n            targetDistance *= Math.tan((scope.object.fov / 2) * Math.PI / 180.0);\n\n            // we actually don't use screenWidth, since perspective camera is fixed to screen height\n            scope.panLeft(2 * deltaX * targetDistance / element.clientHeight);\n            scope.panUp(2 * deltaY * targetDistance / element.clientHeight);\n\n        } else if (scope.object.top !== undefined) {\n\n            // orthographic\n            scope.panLeft(deltaX * (scope.object.right - scope.object.left) / (element.clientWidth * this.object.zoom));\n            scope.panUp(deltaY * (scope.object.top - scope.object.bottom) / (element.clientHeight * this.object.zoom));\n\n        } else {\n\n            // camera neither orthographic or perspective\n            console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n\n        }\n\n    };\n\n    //traversc: fix with orthographic camera zoom\n    this.dollyIn = function(dollyScale) {\n        if (dollyScale === undefined) {\n            dollyScale = getZoomScale();\n        }\n        if (scope.object.top !== undefined) {\n            this.object.zoom *= dollyScale;\n            this.object.updateProjectionMatrix();\n        } else {\n            scale /= dollyScale;\n        }\n    };\n\n    this.dollyOut = function(dollyScale) {\n        if (dollyScale === undefined) {\n            dollyScale = getZoomScale();\n        }\n        if (scope.object.top !== undefined) {\n            this.object.zoom /= dollyScale;\n            this.object.updateProjectionMatrix();\n        } else {\n            scale *= dollyScale;\n        }\n    };\n\n    this.update = function() {\n\n        var position = this.object.position;\n\n        offset.copy(position).sub(this.target);\n\n        // rotate offset to \"y-axis-is-up\" space\n        offset.applyQuaternion(quat);\n\n        // angle from z-axis around y-axis\n\n        theta = Math.atan2(offset.x, offset.z);\n\n        // angle from y-axis\n\n        phi = Math.atan2(Math.sqrt(offset.x * offset.x + offset.z * offset.z), offset.y);\n\n        if (this.autoRotate && state === STATE.NONE) {\n\n            this.rotateLeft(getAutoRotationAngle());\n\n        }\n\n        theta += thetaDelta;\n        phi += phiDelta;\n\n        // restrict theta to be between desired limits\n        theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, theta));\n\n        // restrict phi to be between desired limits\n        phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, phi));\n\n        // restrict phi to be betwee EPS and PI-EPS\n        phi = Math.max(EPS, Math.min(Math.PI - EPS, phi));\n\n        var radius = offset.length() * scale;\n\n        // restrict radius to be between desired limits\n        radius = Math.max(this.minDistance, Math.min(this.maxDistance, radius));\n\n        // move target to panned location\n        this.target.add(pan);\n\n        offset.x = radius * Math.sin(phi) * Math.sin(theta);\n        offset.y = radius * Math.cos(phi);\n        offset.z = radius * Math.sin(phi) * Math.cos(theta);\n\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        offset.applyQuaternion(quatInverse);\n\n        position.copy(this.target).add(offset);\n\n        this.object.lookAt(this.target);\n\n        thetaDelta = 0;\n        phiDelta = 0;\n        scale = 1;\n        pan.set(0, 0, 0);\n\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (lastPosition.distanceToSquared(this.object.position) > EPS || 8 * (1 - lastQuaternion.dot(this.object.quaternion)) > EPS) {\n\n            this.dispatchEvent(changeEvent);\n\n            lastPosition.copy(this.object.position);\n            lastQuaternion.copy(this.object.quaternion);\n\n        }\n\n    };\n\n\n    this.reset = function() {\n\n        state = STATE.NONE;\n\n        this.target.copy(this.target0);\n        this.object.position.copy(this.position0);\n\n        this.update();\n\n    };\n\n    this.getPolarAngle = function() {\n\n        return phi;\n\n    };\n\n    this.getAzimuthalAngle = function() {\n\n        return theta;\n\n    };\n\n    function getAutoRotationAngle() {\n\n        return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n    }\n\n    function getZoomScale() {\n\n        return Math.pow(0.95, scope.zoomSpeed);\n\n    }\n\n    function onMouseDown(event) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n        event.preventDefault();\n\n        if (event.button === scope.mouseButtons.ORBIT) {\n            if (scope.noRotate === true) {\n                return;\n            }\n\n            state = STATE.ROTATE;\n\n            rotateStart.set(event.clientX, event.clientY);\n\n        } else if (event.button === scope.mouseButtons.ZOOM) {\n            if (scope.noZoom === true) {\n                return;\n            }\n\n            state = STATE.DOLLY;\n\n            dollyStart.set(event.clientX, event.clientY);\n\n        } else if (event.button === scope.mouseButtons.PAN) {\n            if (scope.noPan === true) {\n                return;\n            }\n\n            state = STATE.PAN;\n\n            panStart.set(event.clientX, event.clientY);\n\n        }\n\n        if (state !== STATE.NONE) {\n            document.addEventListener('mousemove', onMouseMove, false);\n            document.addEventListener('mouseup', onMouseUp, false);\n            scope.dispatchEvent(startEvent);\n        }\n\n    }\n\n    function onMouseMove(event) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n\n        event.preventDefault();\n\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n        if (state === STATE.ROTATE) {\n\n            if (scope.noRotate === true) {\n                return;\n            }\n\n            rotateEnd.set(event.clientX, event.clientY);\n            rotateDelta.subVectors(rotateEnd, rotateStart);\n\n            // rotating across whole screen goes 360 degrees around\n            scope.rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\n\n            // rotating up and down along whole screen attempts to go 360, but limited to 180\n            scope.rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n\n            rotateStart.copy(rotateEnd);\n\n        } else if (state === STATE.DOLLY) {\n\n            if (scope.noZoom === true) {\n                return;\n            }\n\n            dollyEnd.set(event.clientX, event.clientY);\n            dollyDelta.subVectors(dollyEnd, dollyStart);\n\n            if (dollyDelta.y > 0) {\n\n                scope.dollyIn();\n\n            } else {\n\n                scope.dollyOut();\n\n            }\n\n            dollyStart.copy(dollyEnd);\n\n        } else if (state === STATE.PAN) {\n\n            if (scope.noPan === true) {\n                return;\n            }\n\n            panEnd.set(event.clientX, event.clientY);\n            panDelta.subVectors(panEnd, panStart);\n\n            scope.pan(panDelta.x, panDelta.y);\n\n            panStart.copy(panEnd);\n\n        }\n\n        if (state !== STATE.NONE) {\n            scope.update();\n        }\n\n    }\n\n    function onMouseUp( /* event */ ) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n\n        document.removeEventListener('mousemove', onMouseMove, false);\n        document.removeEventListener('mouseup', onMouseUp, false);\n        scope.dispatchEvent(endEvent);\n        state = STATE.NONE;\n\n    }\n\n    function onMouseWheel(event) {\n\n        if (scope.enabled === false || scope.noZoom === true || state !== STATE.NONE) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        var delta = 0;\n\n        if (event.wheelDelta !== undefined) { // WebKit / Opera / Explorer 9\n\n            delta = event.wheelDelta;\n\n        } else if (event.detail !== undefined) { // Firefox\n\n            delta = -event.detail;\n\n        }\n\n        if (delta > 0) {\n\n            scope.dollyOut();\n\n        } else {\n\n            scope.dollyIn();\n\n        }\n\n        scope.update();\n        scope.dispatchEvent(startEvent);\n        scope.dispatchEvent(endEvent);\n\n    }\n\n    function onKeyDown(event) {\n\n        if (scope.enabled === false || scope.noKeys === true || scope.noPan === true) {\n            return;\n        }\n\n        switch (event.keyCode) {\n\n            case scope.keys.UP:\n                scope.pan(0, scope.keyPanSpeed);\n                scope.update();\n                break;\n\n            case scope.keys.BOTTOM:\n                scope.pan(0, -scope.keyPanSpeed);\n                scope.update();\n                break;\n\n            case scope.keys.LEFT:\n                scope.pan(scope.keyPanSpeed, 0);\n                scope.update();\n                break;\n\n            case scope.keys.RIGHT:\n                scope.pan(-scope.keyPanSpeed, 0);\n                scope.update();\n                break;\n\n        }\n\n    }\n\n    function touchstart(event) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n\n        switch (event.touches.length) {\n\n            case 1: // one-fingered touch: rotate\n\n                if (scope.noRotate === true) {\n                    return;\n                }\n\n                state = STATE.TOUCH_ROTATE;\n\n                rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n                break;\n\n            case 2: // two-fingered touch: dolly\n\n                if (scope.noZoom === true) {\n                    return;\n                }\n\n                state = STATE.TOUCH_DOLLY;\n\n                var dx = event.touches[0].pageX - event.touches[1].pageX;\n                var dy = event.touches[0].pageY - event.touches[1].pageY;\n                var distance = Math.sqrt(dx * dx + dy * dy);\n                dollyStart.set(0, distance);\n                break;\n\n            case 3: // three-fingered touch: pan\n\n                if (scope.noPan === true) {\n                    return;\n                }\n\n                state = STATE.TOUCH_PAN;\n\n                panStart.set(event.touches[0].pageX, event.touches[0].pageY);\n                break;\n\n            default:\n\n                state = STATE.NONE;\n\n        }\n\n        if (state !== STATE.NONE) {\n            scope.dispatchEvent(startEvent);\n        }\n\n    }\n\n    function touchmove(event) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n        switch (event.touches.length) {\n\n            case 1: // one-fingered touch: rotate\n\n                if (scope.noRotate === true) {\n                    return;\n                }\n                if (state !== STATE.TOUCH_ROTATE) {\n                    return;\n                }\n\n                rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n                rotateDelta.subVectors(rotateEnd, rotateStart);\n\n                // rotating across whole screen goes 360 degrees around\n                scope.rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\n                // rotating up and down along whole screen attempts to go 360, but limited to 180\n                scope.rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n\n                rotateStart.copy(rotateEnd);\n\n                scope.update();\n                break;\n\n            case 2: // two-fingered touch: dolly\n\n                if (scope.noZoom === true) {\n                    return;\n                }\n                if (state !== STATE.TOUCH_DOLLY) {\n                    return;\n                }\n\n                var dx = event.touches[0].pageX - event.touches[1].pageX;\n                var dy = event.touches[0].pageY - event.touches[1].pageY;\n                var distance = Math.sqrt(dx * dx + dy * dy);\n\n                dollyEnd.set(0, distance);\n                dollyDelta.subVectors(dollyEnd, dollyStart);\n\n                if (dollyDelta.y > 0) {\n\n                    scope.dollyOut();\n\n                } else {\n\n                    scope.dollyIn();\n\n                }\n\n                dollyStart.copy(dollyEnd);\n\n                scope.update();\n                break;\n\n            case 3: // three-fingered touch: pan\n\n                if (scope.noPan === true) {\n                    return;\n                }\n                if (state !== STATE.TOUCH_PAN) {\n                    return;\n                }\n\n                panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n                panDelta.subVectors(panEnd, panStart);\n\n                scope.pan(panDelta.x, panDelta.y);\n\n                panStart.copy(panEnd);\n\n                scope.update();\n                break;\n\n            default:\n\n                state = STATE.NONE;\n\n        }\n\n    }\n\n    function touchend( /* event */ ) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n\n        scope.dispatchEvent(endEvent);\n        state = STATE.NONE;\n\n    }\n\n    this.domElement.addEventListener('contextmenu', function(event) {\n        event.preventDefault();\n    }, false);\n    this.domElement.addEventListener('mousedown', onMouseDown, false);\n    this.domElement.addEventListener('mousewheel', onMouseWheel, false);\n    this.domElement.addEventListener('DOMMouseScroll', onMouseWheel, false); // firefox\n\n    this.domElement.addEventListener('touchstart', touchstart, false);\n    this.domElement.addEventListener('touchend', touchend, false);\n    this.domElement.addEventListener('touchmove', touchmove, false);\n\n    window.addEventListener('keydown', onKeyDown, false);\n\n    // force an update at start\n    this.update();\n\n};\n\nTHREE.OrbitControls2D.prototype = Object.create(THREE.EventDispatcher.prototype);\nTHREE.OrbitControls2D.prototype.constructor = THREE.OrbitControls2D;\n\n// export the frame module\nmodule.exports = THREE.OrbitControls2D;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar VJS = VJS || {};\nVJS.core = VJS.core || {};\n\n/**\n * @constructor\n * @class\n * @memberOf VJS.core\n * @public\n*/\nVJS.core.intersections = VJS.core.intersections || {};\n\n/**\n * Compute intersection between oriented bounding box and a plane.\n * Returns intersection in plane's space (toOBBSpaceInvert applied).\n * Should return at least 3 intersections. If not, the plane and the box do not\n * intersect.\n *\n * @memberOf VJS.core.intersections\n * @public\n *\n * @param {Object} obb - Oriented Bounding Box representation.\n * @param {THREE.Vector3} obb.halfDimensions - Half dimensions of the box.\n * @param {THREE.Vector3<THREE.Vector3>} obb.orientation - Orientation of the edges of the box.\n * @param {THREE.Vector3} obb.center - Center of the box.\n * @param {THREE.Matrix4} obb.toOBBSpace - Transform to go from plane space to box space.\n * @param {THREE.Matrix4} obb.toOBBSpaceInvert - Transform to go from box space to plane space.\n * @param {Object} plane - Plane representation\n * @param {THREE.Vector3} plane.position - position of normal which describes the plane.\n * @param {THREE.Vector3} plane.direction - Direction of normal which describes the plane.\n *\n * @returns {Array<THREE.Vector3>} List of all intersections, in plane's space.\n *\n * @todo toOBBSpace and toOBBSpaceInvert might be redundent.\n * @todo find best way to deal with different spaces.\n */\n\nVJS.core.intersections.obbPlane = function(obb, plane) {\n\n  //\n  // obb = { halfDimensions, orientation, center, toOBBSpace }\n  // plane = { position, direction }\n  //\n  //\n  // LOGIC:\n  //\n  // Test intersection of each edge of the Oriented Bounding Box with the Plane\n  // \n  // ALL EDGES \n  //\n  //      .+-------+  \n  //    .' |     .'|  \n  //   +---+---+'  |  \n  //   |   |   |   |  \n  //   |  ,+---+---+  \n  //   |.'     | .'   \n  //   +-------+'     \n  //\n  // SPACE ORIENTATION\n  //\n  //       +\n  //     j |\n  //       |\n  //       |   i \n  //   k  ,+-------+  \n  //    .'\n  //   +\n  //\n  //\n  // 1- Move Plane position and orientation in IJK space\n  // 2- Test Edges/ IJK Plane intersections\n  // 3- Return intersection Edge/ IJK Plane if it touches the Oriented BBox\n\n  var intersections = [];\n\n  var t1 = plane.direction.clone().applyMatrix4(obb.toOBBSpace);\n  var t0 = new THREE.Vector3(0, 0, 0).applyMatrix4(obb.toOBBSpace);\n\n  var planeOBB = {\n    position: plane.position.clone().applyMatrix4(obb.toOBBSpace),\n    direction: new THREE.Vector3(t1.x - t0.x, t1.y - t0.y, t1.z - t0.z).normalize()\n  };\n\n  var bboxMin = new THREE.Vector3(\n      obb.center.x - obb.halfDimensions.x,\n      obb.center.y - obb.halfDimensions.y,\n      obb.center.z - obb.halfDimensions.z);\n  var bboxMax = new THREE.Vector3(\n      obb.center.x + obb.halfDimensions.x,\n      obb.center.y + obb.halfDimensions.y,\n      obb.center.z + obb.halfDimensions.z);\n\n  // 12 edges (i.e. ray)/plane intersection tests\n\n  // RAYS STARTING FROM THE FIRST CORNER (0, 0, 0)\n  //\n  //       +\n  //       |\n  //       |\n  //       | \n  //      ,+---+---+\n  //    .'   \n  //   +   \n\n  var ray = {\n    'position': new THREE.Vector3(obb.center.x - obb.halfDimensions.x, obb.center.y - obb.halfDimensions.y, obb.center.z - obb.halfDimensions.z),\n    'direction': obb.orientation.x\n  };\n\n  var intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.y;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.z;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  // RAYS STARTING FROM THE LAST CORNER\n  //\n  //               +\n  //             .'\n  //   +-------+'\n  //           |\n  //           |\n  //           |\n  //           +\n  //\n\n  ray = {\n    'position': new THREE.Vector3(obb.center.x + obb.halfDimensions.x, obb.center.y + obb.halfDimensions.y, obb.center.z + obb.halfDimensions.z),\n    'direction': obb.orientation.x\n  };\n\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.y;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.z;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  // RAYS STARTING FROM THE SECOND CORNER\n  //\n  //               +\n  //               |\n  //               |\n  //               |\n  //               +\n  //             .'\n  //           +'\n\n  ray = {\n    'position': new THREE.Vector3(obb.center.x + obb.halfDimensions.x, obb.center.y - obb.halfDimensions.y, obb.center.z - obb.halfDimensions.z),\n    'direction': obb.orientation.y\n  };\n\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.z;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  // RAYS STARTING FROM THE THIRD CORNER\n  //\n  //      .+-------+  \n  //    .'\n  //   +\n  //   \n  //   \n  //   \n  //   \n\n  ray = {\n    'position': new THREE.Vector3(obb.center.x - obb.halfDimensions.x, obb.center.y + obb.halfDimensions.y, obb.center.z - obb.halfDimensions.z),\n    'direction': obb.orientation.x\n  };\n\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.z;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  // RAYS STARTING FROM THE FOURTH CORNER\n  //\n  //   \n  //   \n  //   +\n  //   |\n  //   |  \n  //   |\n  //   +-------+\n\n  ray = {\n    'position': new THREE.Vector3(obb.center.x - obb.halfDimensions.x, obb.center.y - obb.halfDimensions.y, obb.center.z + obb.halfDimensions.z),\n    'direction': obb.orientation.x\n  };\n\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.y;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  return intersections;\n};\n\n/**\n * Compute intersection between a ray and a plane.\n *\n * @memberOf VJS.core.intersections\n * @public\n *\n * @param {Object} ray - Ray representation.\n * @param {THREE.Vector3} ray.position - position of normal which describes the ray.\n * @param {THREE.Vector3} ray.direction - Direction of normal which describes the ray.\n * @param {Object} plane - Plane representation\n * @param {THREE.Vector3} plane.position - position of normal which describes the plane.\n * @param {THREE.Vector3} plane.direction - Direction of normal which describes the plane.\n *\n * @returns {THREE.Vector3|null} Intersection between ray and plane or null.\n */\nVJS.core.intersections.rayPlane = function(ray, plane) {\n  // ray: {position, direction}\n  // plane: {position, direction}\n\n  if (ray.direction.dot(plane.direction) !== 0) {\n    //\n    // not parallel, move forward\n    //\n    // LOGIC:\n    //\n    // Ray equation: P = P0 + tV\n    // P = <Px, Py, Pz>\n    // P0 = <ray.position.x, ray.position.y, ray.position.z>\n    // V = <ray.direction.x, ray.direction.y, ray.direction.z>\n    //\n    // Therefore:\n    // Px = ray.position.x + t*ray.direction.x\n    // Py = ray.position.y + t*ray.direction.y\n    // Pz = ray.position.z + t*ray.direction.z\n    //\n    //\n    //\n    // Plane equation: ax + by + cz + d = 0\n    // a = plane.direction.x\n    // b = plane.direction.y\n    // c = plane.direction.z\n    // d = -( plane.direction.x*plane.position.x +\n    //        plane.direction.y*plane.position.y +\n    //        plane.direction.z*plane.position.z )\n    //\n    //\n    // 1- in the plane equation, we replace x, y and z by Px, Py and Pz\n    // 2- find t\n    // 3- replace t in Px, Py and Pz to get the coordinate of the intersection\n    //\n    var t = (plane.direction.x * (plane.position.x - ray.position.x) + plane.direction.y * (plane.position.y - ray.position.y) + plane.direction.z * (plane.position.z - ray.position.z)) /\n        (plane.direction.x * ray.direction.x + plane.direction.y * ray.direction.y + plane.direction.z * ray.direction.z);\n\n    var intersection = new THREE.Vector3(\n        ray.position.x + t * ray.direction.x,\n        ray.position.y + t * ray.direction.y,\n        ray.position.z + t * ray.direction.z);\n\n    return intersection;\n\n  }\n\n  return null;\n\n};\n\nVJS.core.intersections.rayBox = function(ray, box) {\n  // ray: {position, direction}\n  // box: {halfDimensions, center}\n\n  var intersections = [];\n  var plane = {\n    position: null,\n    direction: null\n  };\n\n  var bboxMin = new THREE.Vector3(\n    box.center.x - box.halfDimensions.x,\n    box.center.y - box.halfDimensions.y,\n    box.center.z - box.halfDimensions.z);\n  var bboxMax = new THREE.Vector3(\n      box.center.x + box.halfDimensions.x,\n      box.center.y + box.halfDimensions.y,\n      box.center.z + box.halfDimensions.z);\n\n  // X min\n  plane.direction = new THREE.Vector3(-1, 0, 0);\n  plane.position = new THREE.Vector3(\n    bboxMin.x,\n    box.center.y,\n    box.center.z);\n  var intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n\n  // X max\n  plane.direction = new THREE.Vector3(1, 0, 0);\n  plane.position = new THREE.Vector3(\n    bboxMax.x,\n    box.center.y,\n    box.center.z);\n  intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n\n  // Y min\n  plane.direction = new THREE.Vector3(0, -1, 0);\n  plane.position = new THREE.Vector3(\n    box.center.x,\n    bboxMin.y,\n    box.center.z);\n  intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n\n  // Y max\n  plane.direction = new THREE.Vector3(0, 1, 0);\n  plane.position = new THREE.Vector3(\n    box.center.x,\n    bboxMax.y,\n    box.center.z);\n  intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n\n  // Z min\n  plane.direction = new THREE.Vector3(0, 0, -1);\n  plane.position = new THREE.Vector3(\n    box.center.x,\n    box.center.y,\n    bboxMin.z);\n  intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n\n  // Z max\n  plane.direction = new THREE.Vector3(0, 0, 1);\n  plane.position = new THREE.Vector3(\n    box.center.x,\n    box.center.y,\n    bboxMax.z);\n  intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n  \n  return intersections;\n};\n\nVJS.core.intersections.inBBox = function(point, bboxMin, bboxMax) {\n  if (point &&\n  point.x >= bboxMin.x && point.y >= bboxMin.y && point.z >= bboxMin.z &&\n  point.x <= bboxMax.x && point.y <= bboxMax.y && point.z <= bboxMax.z) {\n    return true;\n  }\n  return false;\n};\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n  module.exports = VJS.core.intersections;\n}\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nvar VJS = VJS || {};\nVJS.geometries = VJS.geometries || {};\n\n/*** Imports ***/\n\nVJS.core = VJS.core || {};\nVJS.core.intersections = VJS.core.intersections || require('../core/core.intersections');\n\n\n/**\n *\n * It is typically used for creating an irregular 3D planar shape given a box and the cut-plane.\n *\n * Demo: {@link https://fnndsc.github.io/vjs#geometry_slice}\n *\n * @constructor\n * @class\n * @memberOf VJS.geometries\n * @public\n *\n * @param {THREE.Vector3} halfDimensions - Half-dimensions of the box to be sliced.\n * @param {THREE.Vector3} center - Center of the box to be sliced.\n * @param {THREE.Vector3<THREE.Vector3>} orientation - Orientation of the box to be sliced. (might not be necessary..?)\n * @param {THREE.Vector3} position - Position of the cutting plane.\n * @param {THREE.Vector3} direction - Cross direction of the cutting plane.\n *\n * @example\n * // Define box to be sliced\n * var halfDimensions = new THREE.Vector(123, 45, 67);\n * var center = new THREE.Vector3(0, 0, 0);\n * var orientation = new THREE.Vector3(\n *   new THREE.Vector3(1, 0, 0),\n *   new THREE.Vector3(0, 1, 0),\n *   new THREE.Vector3(0, 0, 1)\n * );\n *\n * // Define slice plane\n * var position = center.clone();\n * var direction = new THREE.Vector3(-0.2, 0.5, 0.3);\n *\n * // Create the slice geometry & materials\n * var sliceGeometry = new VJS.geometries.slice(halfDimensions, center, orientation, position, direction);\n * var sliceMaterial = new THREE.MeshBasicMaterial({\n *   'side': THREE.DoubleSide,\n *   'color': 0xFF5722\n * });\n *\n *  // Create mesh and add it to the scene\n *  var slice = new THREE.Mesh(sliceGeometry, sliceMaterial);\n *  scene.add(slice);\n */\nVJS.geometries.slice = function(halfDimensions, center, orientation, position, direction) {\n\n    //\n    // prepare data for the shape!\n    //\n    var obb = {\n        'halfDimensions': halfDimensions,\n        'center': center,\n        'orientation': orientation,\n        'toOBBSpace': new THREE.Matrix4(), // not necessary\n        'toOBBSpaceInvert': new THREE.Matrix4() // not necessary\n    };\n\n    var plane = {\n        'position': position,\n        'direction': direction\n    };\n\n    // BOOM!\n    var intersections = VJS.core.intersections.obbPlane(obb, plane);\n\n    if (intersections.length < 3) {\n        window.console.log('WARNING: Less than 3 intersections between OBB and Plane.');\n        window.console.log('OBB');\n        window.console.log(obb);\n        window.console.log('Plane');\n        window.console.log(plane);\n        window.console.log('exiting...');\n    }\n\n    var centerOfMass = this.centerOfMass(intersections);\n    var orderedIntersections = this.orderIntersections(intersections, centerOfMass, direction);\n\n    // split for convenience\n    var formatIntersections = [];\n    var formatIntersectionsXY = [];\n    for (var k = 0; k < orderedIntersections.length; k++) {\n        formatIntersections.push(orderedIntersections[k].point);\n        formatIntersectionsXY.push(orderedIntersections[k].xy);\n    }\n\n    //\n    // Create Shape\n    //\n    var sliceShape = new THREE.Shape();\n    // move to first point!\n    sliceShape.moveTo(formatIntersectionsXY[0].x, formatIntersectionsXY[0].y);\n\n    // loop through all points!\n    for (var l = 1; l < formatIntersectionsXY.length; l++) {\n        // project each on plane!\n        sliceShape.lineTo(formatIntersectionsXY[l].x, formatIntersectionsXY[l].y);\n    }\n\n    // close the shape!\n    sliceShape.lineTo(formatIntersectionsXY[0].x, formatIntersectionsXY[0].y);\n\n    //\n    // Generate Geometry from shape\n    // It does triangulation for us!\n    //\n    THREE.ShapeGeometry.call(this, sliceShape);\n    this.type = 'SliceGeometry';\n\n    // update real position of each vertex! (not in 2d)\n    this.vertices = formatIntersections;\n    this.verticesNeedUpdate = true;\n};\n\nVJS.geometries.slice.prototype = Object.create(THREE.ShapeGeometry.prototype);\nVJS.geometries.slice.prototype.constructor = VJS.geometries.slice;\n\n/**\n *\n * Convenience function to extract center of mass from list of points.\n *\n * @private\n *\n * @param {Array<THREE.Vector3>} points - Set of points from which we want to extract the center of mass.\n *\n * @returns {THREE.Vector3} Center of mass from given points.\n */\nVJS.geometries.slice.prototype.centerOfMass = function(points) {\n    var centerOfMass = new THREE.Vector3(0, 0, 0);\n    for (var i = 0; i < points.length; i++) {\n        centerOfMass.x += points[i].x;\n        centerOfMass.y += points[i].y;\n        centerOfMass.z += points[i].z;\n    }\n    centerOfMass.divideScalar(points.length);\n\n    return centerOfMass;\n};\n\n/**\n *\n * Order 3D planar points around a refence point.\n *\n * @private\n *\n * @param {Array<THREE.Vector3>} points - Set of planar 3D points to be ordered.\n * @param {THREE.Vector3} reference - Reference point for ordering.\n * @param {THREE.Vector3} direction - Direction of the plane in which points and reference are sitting.\n *\n * @returns {Array<Object>} Set of object representing the ordered points.\n */\nVJS.geometries.slice.prototype.orderIntersections = function(points, reference, direction) {\n\n    var a0 = points[0].x;\n    var b0 = points[0].y;\n    var c0 = points[0].z;\n    var x0 = points[0].x - reference.x;\n    var y0 = points[0].y - reference.y;\n    var z0 = points[0].z - reference.z;\n    var l0 = {\n        origin: new THREE.Vector3(a0, b0, c0),\n        direction: new THREE.Vector3(x0, y0, z0).normalize()\n    };\n\n    var base = new THREE.Vector3(0, 0, 0)\n        .crossVectors(l0.direction, direction)\n        .normalize();\n\n    var orderedpoints = [];\n\n    // other lines // if inter, return location + angle\n    for (var j = 0; j < points.length; j++) {\n\n        var a1 = points[j].x;\n        var b1 = points[j].y;\n        var c1 = points[j].z;\n        var x1 = points[j].x - reference.x;\n        var y1 = points[j].y - reference.y;\n        var z1 = points[j].z - reference.z;\n\n        var l1 = {\n            origin: new THREE.Vector3(a1, b1, c1),\n            direction: new THREE.Vector3(x1, y1, z1).normalize()\n        };\n\n        var x = l0.direction.dot(l1.direction);\n        var y = base.dot(l1.direction);\n\n        var thetaAngle = Math.atan2(y, x);\n        var theta = thetaAngle * (180 / Math.PI);\n        orderedpoints.push({\n            'angle': theta,\n            'point': l1.origin,\n            'xy': {\n                'x': x,\n                'y': y\n            }\n        });\n    }\n\n    orderedpoints.sort(function(a, b) {\n        return a.angle - b.angle;\n    });\n\n    return orderedpoints;\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.geometries.slice;\n}\n\n},{\"../core/core.intersections\":4}],6:[function(require,module,exports){\n'use strict';\n\nvar VJS = VJS || {};\nVJS.helpers = VJS.helpers || {};\n\n/*** Imports ***/\n\nVJS.geometries = VJS.geometries || {};\nVJS.geometries.slice = VJS.geometries.slice || require('../geometries/geometries.slice');\n\nVJS.shaders = VJS.shaders || {};\nVJS.shaders.data = VJS.shaders.data || require('../shaders/shaders.data');\n\n\n\n\n\n//\n// https://en.wikipedia.org/wiki/Immediately-invoked_function_expression\nVJS.helpers.slice = function() {\n\n  THREE.Object3D.call(this);\n\n  // ...\n  this._series = null;\n  this._uniforms = null;\n  this._frameIndex = null;\n  this._slice = null;\n  this._border = null;\n\n  //\n  this._autoWindowLevel = false;\n\n};\n\nVJS.helpers.slice.prototype = Object.create(THREE.Object3D.prototype);\n\nVJS.helpers.slice.prototype.constructor = VJS.helpers.slice;\n\nVJS.helpers.slice.prototype.merge = function(seriesHelper) {\n  return this._series.merge(seriesHelper._series);\n};\n\nVJS.helpers.slice.prototype.addSeries = function(series) {\n  this._series = series;\n};\n\nVJS.helpers.slice.prototype.getStack = function(stackIndex) {\n  return stackIndex;\n};\n\nVJS.helpers.slice.prototype.prepare = function() {\n\n  window.console.log('helpers Series Prepare!!!');\n  if (this._series) {\n\n    // get first stack!\n    var stack = this._series._stack[0];\n    stack.prepare();\n    window.console.log(stack);\n\n    // Convenience function\n    var dimensions = stack._dimensions;\n    var halfDimensions = stack._halfDimensions;\n\n    // voxel offset\n    var offset = new THREE.Vector3(-0.5, -0.5, -0.5);\n\n    // Bounding Box\n    var geometry = new THREE.BoxGeometry(\n        dimensions.x, dimensions.y, dimensions.z);\n    geometry.applyMatrix(new THREE.Matrix4().makeTranslation(\n        halfDimensions.x + offset.x, halfDimensions.y + offset.y, halfDimensions.z + offset.z));\n    geometry.applyMatrix(stack._ijk2LPS);\n    var material = new THREE.MeshBasicMaterial({\n      wireframe: true,\n      color: 0x61F2F3\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    this.add(cube);\n\n    // Slice\n    // Geometry\n    //\n\n    // Define the bouding box used to generate the slice geometry\n    // center\n    // orientation\n    // and half-dimensions\n    var center = new THREE.Vector3(0, 0, 0);\n    var orientation = new THREE.Vector3(\n        new THREE.Vector3(1, 0, 0),\n        new THREE.Vector3(0, 1, 0),\n        new THREE.Vector3(0, 0, 1));\n\n    var position = new THREE.Vector3(\n      Math.floor(stack._halfDimensions.x),\n      Math.floor(stack._halfDimensions.y),\n      Math.floor(stack._halfDimensions.z) + 0.5 - stack._halfDimensions.z\n    );\n\n    var direction = new THREE.Vector3(0, 0, 1);\n\n    var sliceGeometry = new VJS.geometries.slice(\n        halfDimensions, center, orientation,\n        position, direction);\n    sliceGeometry.applyMatrix(new THREE.Matrix4().makeTranslation(\n        halfDimensions.x + offset.x, halfDimensions.y + offset.y, halfDimensions.z + offset.z));\n    sliceGeometry.applyMatrix(stack._ijk2LPS);\n\n    // update _framIndex\n    this._frameIndex = Math.floor(halfDimensions.z);\n\n    // Slice\n    // Material\n    var textures = [];\n    for (var m = 0; m < stack._nbTextures; m++) {\n      var tex = new THREE.DataTexture(stack._rawData[m], stack._textureSize, stack._textureSize, THREE.RGBAFormat, THREE.UnsignedByteType, THREE.UVMapping, THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping, THREE.NearestFilter, THREE.NearestFilter);\n      tex.needsUpdate = true;\n      textures.push(tex);\n    }\n\n    var sliceMaterial = new THREE.ShaderMaterial({\n      // 'wireframe': true,\n      'side': THREE.DoubleSide,\n      'transparency': true,\n      'uniforms': VJS.shaders.data.parameters.uniforms,\n      'vertexShader': \"#define GLSLIFY 1\\nvarying vec4 vPos;\\n\\n//\\n// main\\n//\\nvoid main() {\\n\\n  vPos = modelMatrix * vec4(position, 1.0 );\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0 );\\n\\n}\",\n      'fragmentShader': \"#define GLSLIFY 1\\nuniform float uTextureSize;\\nuniform float uWindowLevel[2];\\nuniform sampler2D uTextureContainer[7];\\nuniform vec3 uDataDimensions;\\nuniform mat4 uWorldToData;\\nuniform int uNumberOfChannels;\\nuniform int uBitsAllocated;\\nuniform int uInvert;\\n\\n// hack because can not pass arrays if too big\\n// best would be to pass texture but have to deal with 16bits\\nuniform int uLut;\\nuniform float uLutI[16]; // 16 * 4 (intesity - r- g - b)\\nuniform float uLutR[16];\\nuniform float uLutG[16];\\nuniform float uLutB[16];\\n\\nvarying vec4 vPos;\\n\\nvec4 sampleAs3DTexture(in vec3 textureCoordinate) {\\n\\n  float slicePixelSize = 1.0 / uTextureSize;\\n  // Model coordinate (IJK) to data index\\n  float index = textureCoordinate.x * uDataDimensions.x + textureCoordinate.y * uDataDimensions.y * uDataDimensions.x + textureCoordinate.z * uDataDimensions.z * uDataDimensions.y * uDataDimensions.x;\\n\\n  // Map data index to right sampler2D texture\\n  float textureIndex = floor(index / (uTextureSize*uTextureSize));\\n  float inTextureIndex = mod(index, uTextureSize*uTextureSize);\\n\\n  // Get row and column in the texture\\n  float rowIndex = floor(inTextureIndex/uTextureSize);\\n  float colIndex = mod(inTextureIndex, uTextureSize);\\n\\n  // Map row and column to uv\\n  vec2 uv = vec2(0,0);\\n  uv.x = slicePixelSize * 0.5 + colIndex * slicePixelSize;\\n  uv.y = 1.0 - (slicePixelSize * 0.5 + rowIndex * slicePixelSize);\\n\\n  vec4 dataValue = vec4(0, 0, 0, 1);\\n  if(textureIndex == 0.0){\\n    dataValue = texture2D(uTextureContainer[0], uv);\\n  }\\n  else if(textureIndex == 1.0){\\n    dataValue = texture2D(uTextureContainer[1], uv);\\n  }\\n  else if(textureIndex == 2.0){\\n    dataValue = texture2D(uTextureContainer[2], uv);\\n  }\\n  else if(textureIndex == 3.0){\\n    dataValue = texture2D(uTextureContainer[3], uv);\\n  }\\n  else if(textureIndex == 4.0){\\n    dataValue = texture2D(uTextureContainer[4], uv);\\n  }\\n  else if(textureIndex == 5.0){\\n    dataValue = texture2D(uTextureContainer[5], uv);\\n  }\\n  else if(textureIndex == 6.0){\\n    dataValue = texture2D(uTextureContainer[6], uv);\\n  }\\n  // else if(textureIndex == 7.0){\\n  //   dataValue = texture2D(uTextureContainer[7], uv);\\n  // }\\n  // else if(textureIndex == 8.0){\\n  //   dataValue = texture2D(uTextureContainer[8], uv);\\n  // }\\n  // else if(textureIndex == 9.0){\\n  //   dataValue = texture2D(uTextureContainer[9], uv);\\n  // }\\n  // else if(textureIndex == 10.0){\\n  //   dataValue = texture2D(uTextureContainer[10], uv);\\n  // }\\n  // else if(textureIndex == 11.0){\\n  //   dataValue = texture2D(uTextureContainer[11], uv);\\n  // }\\n  // else if(textureIndex == 12.0){\\n  //   dataValue = texture2D(uTextureContainer[12], uv);\\n  // }\\n  // else if(textureIndex == 13.0){\\n  //   dataValue = texture2D(uTextureContainer[13], uv);\\n  // }\\n  // else if(textureIndex == 14.0){\\n  //   dataValue = texture2D(uTextureContainer[14], uv);\\n  // }\\n  // else if(textureIndex == 15.0){\\n  //   dataValue = texture2D(uTextureContainer[15], uv);\\n  // }\\n  // else {\\n  //   discard;\\n  // }\\n\\n  return dataValue;\\n}\\n\\nvoid main(void) {\\n\\n  // get texture coordinates of current pixel\\n  // might not be the right way to do it:\\n  // precision issues ar voxels limits\\n  // need to add machine epsilon?\\n  vec4 dataCoordinateRaw = uWorldToData * vPos;\\n  dataCoordinateRaw += 0.5;\\n  vec3 dataCoordinate = vec3(floor(dataCoordinateRaw.x), floor(dataCoordinateRaw.y), floor(dataCoordinateRaw.z));\\n\\n\\n  // if data in range, look it up in the texture!\\n  if(dataCoordinate.x >= 0.0\\n  && dataCoordinate.y >= 0.0\\n  && dataCoordinate.z >= 0.0\\n  && dataCoordinate.x < uDataDimensions.x\\n  && dataCoordinate.y < uDataDimensions.y\\n  && dataCoordinate.z < uDataDimensions.z\\n  ){\\n    vec3 textureCoordinate = dataCoordinate/uDataDimensions;\\n    vec4 dataValue = sampleAs3DTexture(textureCoordinate);\\n    //vec4(1.0, 0.5, 0.5, 1.0);//\\n    \\n\\n    // Threshold? to copr intensities out?\\n\\n    if(uNumberOfChannels == 1){\\n      // reconstruct 16bits data if any\\n      float rawValue = dataValue.r * 255.0 * 256.0 + dataValue.g * 255.0;\\n      float windowMin = uWindowLevel[0] - uWindowLevel[1]/2.0;\\n      float windowMax = uWindowLevel[0] + uWindowLevel[1]/2.0;\\n      float combined = ( rawValue - windowMin ) / uWindowLevel[1];\\n\\n      dataValue.r = dataValue.g = dataValue.b = combined;\\n    }\\n\\n    // Apply LUT table...\\n    // will pass it through a texture...\\n\\n    if(uLut == 1){\\n    // if uApplyLUT\\n    // if LUT Gradation? Interpolation\\n    // get LUT from texture\\n    for(int i=0; i<16; i++){\\n      if(dataValue.r < uLutI[i]){\\n        // i and i-1\\n        float dataValuePosition = dataValue.r - uLutI[i-1];\\n        float lutRange = uLutI[i] - uLutI[i-1];\\n        float lutWeight = dataValuePosition/lutRange;\\n        // use gradation or not??\\n        // color distance\\n        float colorDistanceR = uLutR[i] - uLutR[i-1];\\n        float colorDistanceG = uLutG[i] - uLutG[i-1];\\n        float colorDistanceB = uLutB[i] - uLutB[i-1];\\n\\n        // by weight\\n        float colorIncrementR = lutWeight * colorDistanceR;\\n        float colorIncrementG = lutWeight * colorDistanceG;\\n        float colorIncrementB = lutWeight * colorDistanceB;\\n\\n        // add it\\n        dataValue.r = uLutR[i-1] + colorIncrementR;\\n        dataValue.g = uLutG[i-1] + colorIncrementG;\\n        dataValue.b = uLutB[i-1] + colorIncrementB;\\n        // dataValue.r += colorIncrementR;\\n        // dataValue.g += colorIncrementG;\\n        // dataValue.b += colorIncrementB;\\n       break;\\n     }\\n    }\\n    }\\n\\n    // Apply label map...?\\n    // target specific intensity\\n\\n    if(uInvert == 1){\\n      dataValue = vec4(1, 1, 1, 1) - dataValue;\\n      dataValue.a = 1.0;\\n    }\\n\\n    gl_FragColor = dataValue;\\n  }\\n  else{\\n    // should be able to choose what we want to do if not in range:\\n    // discard or specific color\\n    //discard;\\n    gl_FragColor = vec4(0.011, 0.662, 0.956, 1.0);\\n  }\\n}\"\n    });\n\n    // important so uniforms are not overwritten!\n    // clone it!\n    var mySliceMaterial = sliceMaterial.clone();\n    this._uniforms = mySliceMaterial.uniforms;\n    this._uniforms.uTextureSize.value = stack._textureSize;\n    this._uniforms.uTextureContainer.value = textures;\n    // texture dimensions\n    this._uniforms.uDataDimensions.value = stack._dimensions;\n    // world to model\n    this._uniforms.uWorldToData.value = stack._lps2IJK;\n    // window level\n    this._uniforms.uWindowLevel.value = stack._windowLevel;\n    this._uniforms.uNumberOfChannels.value = stack._numberOfChannels;\n    this._uniforms.uBitsAllocated.value = stack._bitsAllocated;\n    this._uniforms.uInvert.value = stack._invert;\n\n    this._slice = new THREE.Mesh(sliceGeometry, mySliceMaterial);\n    this.add(this._slice);\n\n    // Border of the slice\n    var borderMaterial = new THREE.LineBasicMaterial({\n      color: 0xff0000,\n      polygonOffset: true,\n      polygonOffsetFactor: -0.1\n    });\n    var borderGeometry = new THREE.Geometry();\n    for (var i = 0; i < sliceGeometry.vertices.length; i++) {\n      borderGeometry.vertices.push(sliceGeometry.vertices[i]);\n    }\n    borderGeometry.vertices.push(sliceGeometry.vertices[0]);\n\n    // borderGeometry.vertices = sliceGeometry.vertices;\n    this._border = new THREE.Line(borderGeometry, borderMaterial);\n    this.add(this._border);\n\n  } else {\n    window.console.log('no series to be prepared...');\n  }\n};\n\nVJS.helpers.slice.prototype.updateSliceGeometry = function() {\n  var stack = this._series._stack[0];\n  var halfDimensions = stack._halfDimensions;\n  // voxel offset\n  var offset = new THREE.Vector3(-0.5, -0.5, -0.5);\n\n  var center = new THREE.Vector3(0, 0, 0);\n  var orientation = new THREE.Vector3(\n      new THREE.Vector3(1, 0, 0),\n      new THREE.Vector3(0, 1, 0),\n      new THREE.Vector3(0, 0, 1));\n\n  var position = new THREE.Vector3(\n    0,\n    0,\n    this._frameIndex + 0.5 - stack._halfDimensions.z\n    );\n\n  var direction = new THREE.Vector3(0, 0, 1);\n\n  var sliceGeometry = new VJS.geometries.slice(\n      halfDimensions, center, orientation,\n      position, direction);\n  sliceGeometry.applyMatrix(new THREE.Matrix4().makeTranslation(\n      halfDimensions.x + offset.x, halfDimensions.y + offset.y, halfDimensions.z + offset.z));\n  sliceGeometry.applyMatrix(stack._ijk2LPS);\n\n  // helper - update Geometry\n  //is memory leaking???\n\n  this._slice.geometry = sliceGeometry;\n  this._slice.geometry.verticesNeedUpdate = true;\n};\n\nVJS.helpers.slice.prototype.updateBorderGeometry = function() {\n\n  var borderGeometry = new THREE.Geometry();\n  for (var i = 0; i < this._slice.geometry.vertices.length; i++) {\n    borderGeometry.vertices.push(this._slice.geometry.vertices[i]);\n  }\n  borderGeometry.vertices.push(this._slice.geometry.vertices[0]);\n\n  this._border.geometry.vertices = borderGeometry.vertices;\n  this._border.geometry.verticesNeedUpdate = true;\n};\n\n// a delete method too!\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.helpers.slice;\n}\n},{\"../geometries/geometries.slice\":5,\"../shaders/shaders.data\":13}],7:[function(require,module,exports){\n'use strict';\n\nvar VJS = VJS || {};\nVJS.loaders = VJS.loaders || {};\n\n/*** Imports ***/\n\nVJS.parsers = VJS.parsers || {};\nVJS.parsers.dicom = VJS.parsers.dicom || require('../parsers/parsers.dicom');\n\nVJS.models = VJS.models || {};\nVJS.models.series = VJS.models.series || require('../models/models.series');\nVJS.models.stack = VJS.models.stack || require('../models/models.stack');\nVJS.models.frame = VJS.models.frame || require('../models/models.frame');\n\nVJS.helpers = VJS.helpers || {};\nVJS.helpers.slice = VJS.helpers.slice || require('../helpers/helpers.slice');\n\n\n/**\n *\n * It is typically used to load a DICOM image. Use loading manager for\n * advanced usage, such as multiple files handling.\n *\n * Demo: {@link https://fnndsc.github.io/vjs#loader_dicom}\n *\n * @constructor\n * @class\n * @memberOf VJS.loaders\n * @public\n *\n * @param {THREE.DefaultLoadingManager=} manager - Manager for advanced users.\n *\n * @example\n * var files = ['/data/dcm/fruit'];\n *\n * // Instantiate a dicom loader\n * var dicomLoader = new VJS.loaders.dicom();\n *\n * // load a resource\n * loader.load(\n *   // resource URL\n *   files[0],\n *   // Function when resource is loaded\n *   function(object) {\n *     //scene.add( object );\n *     window.console.log(object);\n *   }\n * );\n */\nVJS.loaders.dicom = function(manager) {\n\n  this.manager =\n      (manager !== undefined) ? manager : THREE.DefaultLoadingManager;\n  this.crossOrigin = true;\n  this.responseType = 'arraybuffer';\n  this._imageHelper = null;\n  this._image = null;\n\n};\nVJS.loaders.dicom.prototype.constructor = VJS.loaders.dicom;\n\n/**\n *\n * Load target file and attach necessary callbacks.\n *\n * @todo Might want to implement onError extra layer like for \"onLoad\".\n * @public\n *\n * @param {string} url - Url of the file to be pulled.\n * @param {function} onLoad - On load callback, after response has been parsed by VJS.loaders.dicom.parse.\n * @param {function} onProgress - On progress callback.\n * @param {function} onError - On error callback.\n *\n * @returns {Array<Promise>} Loading sequence for each file.\n *\n */\nVJS.loaders.dicom.prototype.load = function(file, onLoad, onProgress, onError) {\n  // no more promises...!\n  //\n\n  var scope = this;\n\n  // scope._imageHelper = new Array(files.length);\n  // scope._image = new Array(files.length);\n\n  var loader = new THREE.XHRLoader(scope.manager);\n  loader.setCrossOrigin(this.crossOrigin);\n  loader.setResponseType(this.responseType);\n  loader.load(file, function(response) {\n\n    onLoad(scope.parse(response));\n\n  }, onProgress, onError);\n\n  // Build the promise sequence for each file\n  // return files.map(function(url, i) {\n\n  //   var loader = new VJS.loader.xhrpromise(scope.manager);\n  //   loader.setCrossOrigin(scope.crossOrigin);\n  //   loader.setResponseType(scope.responseType);\n\n  //   // 1- get the data\n  //   // return an array buffer\n  //   return loader.load(url, onProgress)\n  //     .catch(function(error) {\n  //       window.console.log(error);\n  //       if (onError) {\n  //         onError(error);\n  //       }\n  //     })\n  //   // 2- parse the array buffer\n  //   // return an image model\n  //     .then(function(response) {\n  //       var imageHelper = new VJS.helpers.image();\n  //       scope._imageHelper[i] = imageHelper;\n  //       var dicomParser = new VJS.parsers.dicom(response, imageHelper.id);\n  //       return dicomParser.parse();\n  //     })\n  //   // 3- create helper with image\n  //   // return the image helper\n  //     .then(function(image) {\n  //       scope._imageHelper[i].addImage(image);\n  //       scope._image[i] = image;\n\n  //       // a helper is an object we can directly add to the scene and visualize\n  //       window.console.log('ALL SET');\n\n  //       return scope._imageHelper[i];\n  //     })\n  //   // 4- run onLoad callback\n  //   // input is imageHelper\n  //   // (should it be the image?)\n  //     .then(function(imageHelper) {\n  //       if (onLoad) {\n  //         window.console.log('onLoad callback (i.e. add to scene or play with helper)');\n  //         onLoad(imageHelper);\n  //       }\n\n  //       return imageHelper;\n  //     });\n  // });\n};\n\n/**\n *\n * Parse the response and returned a well formatted VJS Image Helper;\n *\n * @public\n *\n * @param {arraybuffer} response - Data to be parsed.\n *\n * @returns {VJS.Helper.Image}\n *\n */\nVJS.loaders.dicom.prototype.parse = function(response) {\n  window.console.log(response);\n  window.console.log('file downloaded yay!');\n\n  // series helper with lot of goodies\n  var seriesHelper = new VJS.helpers.slice();\n\n  // parse DICOM\n  var dicomParser = null;\n  try {\n    dicomParser = new VJS.parsers.dicom(response, seriesHelper.id);\n  }\n  catch (e) {\n    window.console.log('error cought in dicom loader');\n    window.console.log(e);\n    return null;\n  }\n\n// throw new Error('My message')\n  \n    \n  // create a series\n  var series = new VJS.models.series();\n  series._seriesInstanceUID = dicomParser.seriesInstanceUID();\n  series._numberOfFrames = dicomParser.numberOfFrames();\n  if(!series._numberOfFrames){\n    series._numberOfFrames = 1;\n  }\n  series._numberOfChannels = dicomParser.numberOfChannels();\n\n  // just create 1 dummy stack for now\n  var stack = new VJS.models.stack();\n  stack._numberOfChannels = dicomParser.numberOfChannels();\n\n  series._stack.push(stack);\n\n  // loop through all the frames!\n  for (var i = 0; i < series._numberOfFrames; i++) {\n    // shoud check for target stack\n    // should check if frame was already added in stack\n    // etc.\n    var frame = new VJS.models.frame();\n    frame._rows = dicomParser.rows(i);\n    frame._columns = dicomParser.columns(i);\n    frame._pixelData = dicomParser.extractPixelData(i);\n    frame._pixelSpacing = dicomParser.pixelSpacing(i);\n    frame._sliceThickness = dicomParser.sliceThickness(i);\n    frame._imageOrientation = dicomParser.imageOrientation(i);\n    frame._imagePosition = dicomParser.imagePosition(i);\n    frame._dimensionIndexValues = dicomParser.dimensionIndexValues(i);\n    frame._bitsAllocated = dicomParser.bitsAllocated(i);\n    frame._instanceNumber = dicomParser.instanceNumber(i);\n    frame._windowCenter = dicomParser.windowCenter(i);\n    frame._windowWidth = dicomParser.windowWidth(i);\n    // should pass frame index for consistency...\n    frame._minMax = dicomParser.minMaxPixelData(frame._pixelData);\n\n    stack._frame.push(frame);\n  }\n\n  // var image = dicomParser.parse();\n\n  // add image to image helper\n  // image helper is a 3D object image wherease image is a general JS Object\n  seriesHelper.addSeries(series);\n  return seriesHelper;\n  //var self = this;\n\n  //return new Promise(function(resolve) {\n\n  // console.time('LoaderDicom');\n  // // use response as input to image helper.\n  // // can provide an image or not...\n  // var imageHelper = new VJS.helpers.image();\n  // var dicomParser = new VJS.parsers.dicom(response, imageHelper.id);\n\n  // //var image = dicomParser.parse();\n  // var sequence = Promise.resolve();\n  // sequence\n  //   .then(function() {\n  //     return dicomParser.parse();\n  //   })\n  //   .then(function(image) {\n  //     imageHelper.add(image);\n  //     console.timeEnd('LoaderDicom');\n  //     return (imageHelper);\n  //   });\n\n  // return sequence;\n\n  //imageHelper.add(dicomParser.parse());\n\n  //\n  //  Create A dicom parser to help us fill the Image Helper!\n  //\n\n  // var dicomParser = new VJS.parsers.dicom(name, jQueryDom);\n\n  // var object, objects = [];\n  // var geometry, material;\n\n  // for ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n  //   object = objects[ i ];\n  //   geometry = object.geometry;\n\n  //   var buffergeometry = new THREE.BufferGeometry();\n\n  //   buffergeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( geometry.vertices ), 3 ) );\n\n  //   if ( geometry.normals.length > 0 ) {\n  //     buffergeometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( geometry.normals ), 3 ) );\n  //   }\n\n  //   if ( geometry.uvs.length > 0 ) {\n  //     buffergeometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( geometry.uvs ), 2 ) );\n  //   }\n\n  //   material = new THREE.MeshLambertMaterial();\n  //   material.name = object.material.name;\n\n  //   var mesh = new THREE.Mesh( buffergeometry, material );\n  //   mesh.name = object.name;\n\n  //   container.add( mesh );\n\n  // }\n\n  //resolve(imageHelper);\n  //});\n\n// VJS.parsers.dicom.prototype.parsePromise = function() {\n//   var self = this;\n//   console.time('Parsing Dicom');\n//   var imageNameFS = 'image_' + self._id;\n//   var frameNameFS = imageNameFS + '-raw.8b';\n//   //\n//   // Promises in action!\n//   //\n//   var sequence = Promise.resolve();\n//   return sequence\n//         .then(function() {\n//           // same image to Virtual FS\n//           return self.fileToFS(imageNameFS, self._arrayBuffer);\n//         })\n//         .then(function() {\n//           // extract frames from image and save it on Vistual FS\n//           return self.framesToFS(imageNameFS, frameNameFS);\n//         })\n//         .then(function() {\n//           // extract dicom header from image and convert it to XML\n//           return self.dumpToXML(imageNameFS);\n//         })\n//         .then(function(xml) {\n//           // parse XML Header and build VJS objects\n//           var $dicomDom = $.parseXML(xml);\n//           //window.console.log($dicomDom);\n//           var image = self.domToImage($dicomDom, frameNameFS);\n//           //resolve(self.domToImage($dicomDom, frameNameFS));\n\n//           // Dom to image it!\n//           return image;\n//         });\n// };\n};\n\n\n\n/** Exports **/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.loaders.dicom;\n}\n\n},{\"../helpers/helpers.slice\":6,\"../models/models.frame\":8,\"../models/models.series\":9,\"../models/models.stack\":10,\"../parsers/parsers.dicom\":12}],8:[function(require,module,exports){\n'use strict';\n\nvar VJS = VJS || {};\nVJS.models = VJS.models || {};\n\n/**\n * Base frame object.\n *\n * @constructor\n * @class\n * @memberOf VJS.models\n */\nVJS.models.frame = function() {\n    /**\n     * @member\n     * @type {string}\n     */\n    this._id = '-1';\n    /**\n     * @member\n     * @type {number}\n     */\n    this._stackID = -1;\n    /**\n     * @member\n     * @type {number}\n     */\n    this._rows = 0;\n    /**\n     * @member\n     * @type {number}\n     */\n    this._columns = 0;\n    /**\n     * @member\n     * @type {Array.number}\n     */\n    this._dimensionIndexValues = [];\n    /**\n     * @member\n     * @type {Object}\n     * @property {number} x\n     * @property {number} y\n     * @property {number} z\n     */\n    this._imagePositionPatient = {\n        'x': 0,\n        'y': 0,\n        'z': 0\n    };\n    /**\n     * @member\n     * @type {Object}\n     * @property {Object} row\n     * @property {number} row.x\n     * @property {number} row.y\n     * @property {number} row.z\n     * @property {Object} column\n     * @property {number} column.x\n     * @property {number} column.y\n     * @property {number} column.z\n     */\n    this._imageOrientationPatient = {\n        'row': {\n            'x': 0,\n            'y': 0,\n            'z': 0\n        },\n        'column': {\n            'x': 0,\n            'y': 0,\n            'z': 0\n        }\n    };\n    /**\n     * @member\n     * @type {number}\n     */\n    this._sliceThickness = 1;\n    /**\n     * @member\n     * @type {Object}\n     * @property {number} row\n     * @property {number} column\n     */\n    this._pixelSpacing = {\n        'row': 1,\n        'column': 1\n    };\n    this._spacingBetweenSlices = null;\n    /**\n     * @member\n     * @type {Array}\n     */\n    this._pixelData = null;\n\n    this._instanceNumber = null;\n    this._windowCenter = null;\n    this._windowWidth = null;\n\n    this._minMax = null;\n};\n\nVJS.models.frame.prototype.constructor = VJS.models.frame;\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.models.frame;\n}\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nvar VJS = VJS || {};\nVJS.models = VJS.models || {};\n\n/**\n * Define the series object here\n *\n * @constructor\n * @class\n * @memberOf VJS.models\n * @public\n */\nVJS.models.series = function() {\n    this._id = -1; // Always good to have an ID\n    this._concatenationUID = -1;\n    this._seriesInstanceUID = -1;\n    this._seriesNumber = -1;\n    this._dimensionIndexSequence = [];\n\n    // should probably not be there\n    this._rows = 0;\n    this._columns = 0;\n    this._photometricInterpretation = '';\n\n    this._numberOfFrames = 0;\n    this._numberOfChannels = 1;\n    this._instanceNumber = 0;\n\n    this._stack = [];\n};\n\n// it is a helper!\nVJS.models.series.prototype.merge = function(series) {\n    // try to merge seriesHelper with current series.\n    // same series if same Series UID?\n    // could use concatenation if available, to already know if series is complete!\n    var sameSeriesUID = false;\n    if (this._seriesInstanceUID === series._seriesInstanceUID) {\n        window.console.log('stacks belong to same series!');\n        sameSeriesUID = true;\n\n        // Make sure series information is consisent?\n        // re-compute it?\n        var stack = series._stack;\n        // Merge Stacks (N against N)\n        // try to match all stack to current stacks, if not add it to stacks list!\n        for (var i = 0; i < stack.length; i++) {\n            // test stack against existing stack\n            for (var j = 0; j < this._stack.length; j++) {\n                window.console.log(this._stack[j], stack[i]);\n                if (this._stack[j].merge(stack[i])) {\n                    // merged successfully\n                    window.console.log('stacks merged successfully!');\n                    break;\n                } else if (j === this._stack.length - 1) {\n                    // last merge was not successful\n                    // this is a new stack\n                    window.console.log('stacks added to the list!');\n                    this._stack.push(stack[i]);\n                }\n            }\n\n        }\n    }\n\n    return sameSeriesUID;\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.models.series;\n}\n},{}],10:[function(require,module,exports){\n'use strict';\n\nvar VJS = VJS || {};\nVJS.models = VJS.models || {};\n\n/**\n * Define the stack object here\n *\n * @constructor\n * @class\n * @memberOf VJS.models\n * @public\n */\nVJS.models.stack = function() {\n  /**\n   * @member\n   * @type {string}\n   */\n  this._id = '-1';\n  /**\n   * @member\n   * @type {string}\n   */\n  this._uid = null; // first stack ID -> (0020, 9056)\n  /**\n   * @member\n   * @type {number}\n   */\n  this._stackID = -1;\n  /**\n   * @member\n   * @type {Array.<VJS.frame.model>}\n   */\n  this._frame = [];\n  /**\n   * @member\n   * @type {number}\n   */\n  this._rows = 0;\n  /**\n   * @member\n   * @type {number}\n   */\n  this._columns = 0;\n  /**\n   * @member\n   * @type {number}\n   */\n  this._numberOfFrames = 0;\n  /**\n   * @member\n   * @type {Object}\n   * @property {number} row\n   * @property {number} column\n   */\n  this._pixelSpacing = {\n    'row': 0,\n    'column': 0\n  };\n  this._spacingBetweenSlices = 0;\n  /**\n   * @member\n   * @type {number}\n   */\n  this._sliceThickness = 0;\n\n  // origin of the first slice of the stack!\n  this._origin = null;\n  this._halfDimensions = null;\n  this._orientation = null;\n\n  this._textureSize = 4096;\n  this._nbTextures = 7; // HIGH RES..\n  this._rawData = [];\n  // this._windowCenter = 0;\n  // this._windowWidth = 0;\n  this._windowLevel = [0, 0];\n  this._windowCenter = 0;\n  this._windowWidth = 0;\n  this._minMax = [65535, -32768];\n  this._invert = false;\n\n  this._ijk2LPS = null;\n  this._lps2IJK = null;\n\n  // Slicer values\n  this._dimensions = null;\n  this._spacing = null;\n  this._origin = null;\n  this._direction = null;\n};\n\n/**\n * here me make sure eveything is ready for visualization.\n * might also have a switch to say what we can view and what we can not view with current stack\n *\n * @public\n */\nVJS.models.stack.prototype.prepare = function() {\n\n  // dimensions of the stack\n  this._numberOfFrames = this._frame.length;\n\n  window.console.log(this);\n  this.orderFrames();\n  var zSpacing = this.zSpacing();\n\n  // prepare the frame\n  if (this._frame[0]._pixelSpacing) {\n    this._pixelSpacing.row = this._frame[0]._pixelSpacing[0];\n    this._pixelSpacing.column = this._frame[0]._pixelSpacing[1];\n  } else if (this._frame[0]._pixelAspectRatio) {\n    this._pixelSpacing.row = 1.0;\n    this._pixelSpacing.column = 1.0 * this._frame[0]._pixelAspectRatio[1] / this._frame[0]._pixelAspectRatio[0];\n  } else {\n    this._pixelSpacing.row = 1.0;\n    this._pixelSpacing.column = 1.0;\n  }\n\n  if (!this._frame[0]._imagePosition) {\n    this._frame[0]._imagePosition = [0, 0, 0];\n  }\n\n  if (!this._frame[0]._imageOrientation) {\n    this._frame[0]._imageOrientation = [1, 0, 0, 0, 1, 0];\n  }\n\n  this._rows = this._frame[0]._rows;\n  this._columns = this._frame[0]._columns;\n  this._dimensions = new THREE.Vector3(this._columns, this._rows, this._numberOfFrames);\n\n  this._spacingBetweenSlices = this._frame[0]._spacingBetweenSlices;\n  this._sliceThickness = this._frame[0]._sliceThickness;\n\n  for (var i = 0; i < this._frame.length; i++) {\n\n    // check rows consistency\n    if (this._rows !== this._frame[i]._rows) {\n      // send an error message...\n      window.console.log('Numbers of rows in stack\\'s frames is not consistent.');\n      window.console.log(this);\n      window.console.log('First frame had: ', this._rows, ' rows');\n      window.console.log('Frame index: ', i, ' has: ', this._frame[i]._rows, ' rows.');\n    }\n\n    // check columns consitency\n    if (this._columns !== this._frame[i]._columns) {\n      // send an error message...\n      window.console.log('Numbers of columns in stack\\'s frames is not consistent.');\n      window.console.log(this);\n      window.console.log('First frame had: ', this._columns, ' columns.');\n      window.console.log('Frame index: ', i, ' has: ', this.frame[i]._columns, ' columns.');\n    }\n\n    // // check for spacing consistency\n    // if (this._pixelSpacing.row !== this._frame[i]._pixelSpacing[0] || this._pixelSpacing.column !== this._frame[i]._pixelSpacing[1]) {\n    //   // send an error message...\n    //   window.console.log('Spacing in stack\\'s frames is not consistent.');\n    //   window.console.log(this);\n    //   window.console.log('First frame had : ', this._pixelSpacing.row, ' x ', this._pixelSpacing.column, ' spacing.');\n    //   window.console.log('Frame index : ', i, ' has: ', this._frame[i]._pixelSpacing[0], ' x ', this._frame[i]._pixelSpacing[1], ' spacing.');\n    // }\n\n    // // check slice spacing consitency\n    // if (this._spacingBetweenSlices !== this._frame[i]._spacingBetweenSlices) {\n    //   // send an error message...\n    //   window.console.log('Spacing betwen slices in stack\\'s frames is not consistent.');\n    //   window.console.log(this);\n    //   window.console.log('First frame had: ', this._spacingBetweenSlices, ' spacing betwen slices.');\n    //   window.console.log('Frame index: ', i, ' has: ', this.frame[i]._spacingBetweenSlices, ' spacing betwen slices.');\n    // }\n\n    // // check for slice thickness consistency\n    // if (this._sliceThickness !== this._frame[i]._sliceThickness) {\n    //   window.console.log('Slice thickness in stack\\'s frames is not consistent.');\n    //   window.console.log(this);\n    //   window.console.log('First frame had: ', this._sliceThickness, ' sliceThickness.');\n    //   window.console.log('Frame index: ', i, ' has: ', this._frame[i]._sliceThickness, ' sliceThickness.');\n    // }\n\n    // get min/max\n    this._minMax[0] = Math.min(this._minMax[0], this._frame[i]._minMax[0]);\n    this._minMax[1] = Math.max(this._minMax[1], this._frame[i]._minMax[1]);\n  }\n\n  // Origin\n  this._origin = new THREE.Vector3(\n      this._frame[0]._imagePosition[0],\n      this._frame[0]._imagePosition[1],\n      this._frame[0]._imagePosition[2]\n      );\n\n  // Direction\n  window.console.log('first frame value!');\n  window.console.log(this._frame[0]._imageOrientation[0]);\n  var xCosine = new THREE.Vector3(\n      this._frame[0]._imageOrientation[0],\n      this._frame[0]._imageOrientation[1],\n      this._frame[0]._imageOrientation[2]\n  );\n  window.console.log(xCosine);\n\n  var yCosine = new THREE.Vector3(\n      this._frame[0]._imageOrientation[3],\n      this._frame[0]._imageOrientation[4],\n      this._frame[0]._imageOrientation[5]\n  );\n  var zCosine = new THREE.Vector3(0, 0, 0).crossVectors(xCosine, yCosine).normalize();\n  this._direction = new THREE.Matrix4();\n  this._direction.set(\n      xCosine.x, yCosine.x, zCosine.x, 0,\n      xCosine.y, yCosine.y, zCosine.y, 0,\n      xCosine.z, yCosine.z, zCosine.z, 0,\n      0, 0, 0, 1);\n\n  window.console.log(this._direction);\n\n  this._spacing = new THREE.Vector3(\n      this._pixelSpacing.row,\n      this._pixelSpacing.column,\n      zSpacing);\n\n  window.console.log(this._spacing);\n\n  // half dimensions are useful for faster computations of intersection.\n  this._halfDimensions = new THREE.Vector3(\n      this._dimensions.x / 2, this._dimensions.y / 2, this._dimensions.z / 2);\n\n  // orientation needed to compute stack BBox interection against slice.\n  // always same, might want to remove it.\n  var baseX = new THREE.Vector3(1, 0, 0);\n  var baseY = new THREE.Vector3(0, 1, 0);\n  var baseZ = new THREE.Vector3(0, 0, 1);\n  this._orientation = new THREE.Vector3(baseX, baseY, baseZ);\n\n  // IJK to LPS transform.\n  // and inverse.\n  this._ijk2LPS = new THREE.Matrix4();\n  this._ijk2LPS.set(\n      xCosine.x * this._spacing.x, yCosine.x * this._spacing.y, zCosine.x * this._spacing.z, this._origin.x,\n      xCosine.y * this._spacing.x, yCosine.y * this._spacing.y, zCosine.y * this._spacing.z, this._origin.y,\n      xCosine.z * this._spacing.x, yCosine.z * this._spacing.y, zCosine.z * this._spacing.z, this._origin.z,\n      0, 0, 0, 1);\n\n  this._lps2IJK = new THREE.Matrix4();\n  this._lps2IJK.getInverse(this._ijk2LPS);\n\n  window.console.log(this._lps2IJK, this._ijk2LPS, this._direction);\n\n  // only works with 1 channel for now...\n  var nbVoxels = this._dimensions.x * this._dimensions.y * this._dimensions.z;\n  window.console.log(this._dimensions);\n\n  // create 16 rgba textures\n  for (var ii = 0; ii < this._nbTextures; ii++) {\n    // *3 because always create RGB\n    this._rawData.push(new Uint8Array(this._textureSize * this._textureSize * 4));\n  }\n\n  // http://stackoverflow.com/questions/6413744/looking-to-access-16-bit-image-data-in-javascript-webgl\n\n  // Can not just use subarray because we have to normalize the values (Uint* 0<x<255)\n  //var prevFrame = -1;\n  //var prevTexture = -1;\n\n  // ADD WARNING IF DATA TO BIG TO FIT IN MEMORY...!\n\n  var frameDimension = this._dimensions.x * this._dimensions.y;\n  var textureDimension = this._textureSize * this._textureSize;\n\n  console.time('arrangeDataForWebgl');\n\n  for (var jj = 0; jj < nbVoxels; jj++) {\n\n    var frameIndex = Math.floor(jj / frameDimension);\n    var inFrameIndex = jj % (frameDimension);\n\n    var textureIndex = Math.floor(jj / textureDimension);\n    var inTextureIndex = jj % (textureDimension);\n    if (this._numberOfChannels === 3) {\n\n      this._rawData[textureIndex][4 * inTextureIndex] = this._frame[frameIndex]._pixelData[4 * inFrameIndex];\n      this._rawData[textureIndex][4 * inTextureIndex + 1] = this._frame[frameIndex]._pixelData[4 * inFrameIndex + 1];\n      this._rawData[textureIndex][4 * inTextureIndex + 2] = this._frame[frameIndex]._pixelData[4 * inFrameIndex + 2];\n      this._rawData[textureIndex][4 * inTextureIndex + 3] = this._frame[frameIndex]._pixelData[4 * inFrameIndex + 3];\n\n    } else {\n      //\n\n      var rawValue = this._frame[frameIndex]._pixelData[inFrameIndex];\n\n      // get most significant (msb) and less significant (lsb) bytes\n      // deal with sign?\n      // deal with number of channels\n      // deal with image type (single/multi channel)\n      // >> or >>> ?\n      // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Unsigned_right_shift\n\n      /*jshint bitwise: false*/\n      var lsb = rawValue & 0xFF;\n      var msb = (rawValue >> 8) & 0xFF;\n\n      // add \n      this._rawData[textureIndex][4 * inTextureIndex] = msb;\n      this._rawData[textureIndex][4 * inTextureIndex + 1] = lsb;\n\n      // can we add next msb/lsb to b/a - yes!\n      // or just forbid it?\n\n      this._rawData[textureIndex][4 * inTextureIndex + 2] = frameIndex;\n      this._rawData[textureIndex][4 * inTextureIndex + 3] = frameIndex;\n\n    }\n\n  }\n\n  // default window level based on min/max for now...\n  // could use the frame's windowWidth and center...\n  var width = this._minMax[1] - this._minMax[0];\n  var center = this._minMax[0] + width / 2;\n\n  this._windowWidth = width;\n  this._windowCenter = center;\n  this._windowLevel = [center, width];\n\n  // need to pass min/max\n  this._bitsAllocated = this._frame[0]._bitsAllocated;\n\n  window.console.log('window level: ', this._windowLevel);\n};\n\n/**\n * Order frames based on theirs dimensionIndexValues\n */\nVJS.models.stack.prototype.orderFrameOnDimensionIndices = function(a, b) {\n\n  if ('_dimensionIndexValues' in a && Object.prototype.toString.call(a._dimensionIndexValues) === '[object Array]' && '_dimensionIndexValues' in b && Object.prototype.toString.call(b._dimensionIndexValues) === '[object Array]') {\n    for (var i = 0; i < a._dimensionIndexValues.length; i++) {\n      if (parseInt(a._dimensionIndexValues[i]) > parseInt(b._dimensionIndexValues[i])) {\n        //window.console.log(a._dimensionIndexValues[i] + ' > ' + b._dimensionIndexValues[i]);\n        //window.console.log(typeof a._dimensionIndexValues[i] + ' > ' + typeof b._dimensionIndexValues[i]);\n        return 1;\n      }\n      if (parseInt(a._dimensionIndexValues[i]) < parseInt(b._dimensionIndexValues[i])) {\n        //window.console.log(a._dimensionIndexValues[i] + ' < ' + b._dimensionIndexValues[i]);\n        //window.console.log(typeof a._dimensionIndexValues[i] + ' < ' + typeof b._dimensionIndexValues[i]);\n        return -1;\n      }\n    }\n  } else {\n    window.console.log('One of the frames doesn\\'t have a _dimensionIndexValues array.');\n    window.console.log(a);\n    window.console.log(b);\n  }\n\n  return 0;\n};\n\nVJS.models.stack.prototype.orderFrames = function() {\n  // order the frames based on theirs dimension indices\n  // first index is the most important.\n  // 1,1,1,1 willl be first\n  // 1,1,2,1 will be next\n  // 1,1,2,3 will be next\n  // 1,1,3,1 wil be next\n  window.console.log(this);\n  if (this._frame[0]._dimensionIndexValues) {\n    this._frame.sort(VJS.models.stack.prototype.orderFrameOnDimensionIndices);\n  } else if (this._frame[0]._imagePosition && this._frame[0]._imageOrientation) {\n    // ORDERING BASED ON IMAGE POSITION\n    var xCosine = new THREE.Vector3(\n      this._frame[0]._imageOrientation[0],\n      this._frame[0]._imageOrientation[1],\n      this._frame[0]._imageOrientation[2]\n      );\n\n    var yCosine = new THREE.Vector3(\n      this._frame[0]._imageOrientation[3],\n      this._frame[0]._imageOrientation[4],\n      this._frame[0]._imageOrientation[5]\n    );\n\n    var zCosine = new THREE.Vector3(0, 0, 0).crossVectors(xCosine, yCosine).normalize();\n\n    // compute and sort by dist in this series\n    this._frame.map(this._computeDistance.bind(null, zCosine));\n    this._frame.sort(this._sortDistance);\n\n  } else {\n    // else slice location\n    // image number\n    // ORDERING BASED ON instance number\n    // _ordering = 'instance_number';\n    // first_image.sort(function(a,b){return a[\"instance_number\"]-b[\"instance_number\"]});\n  }\n};\n\nVJS.models.stack.prototype._computeDistance = function(normal, frame) {\n  frame._dist = frame._imagePosition[0] * normal.x +\n  frame._imagePosition[1] * normal.y +\n  frame._imagePosition[2] * normal.z;\n  return frame;\n};\n\nVJS.models.stack.prototype._sortDistance = function(a, b) {return a._dist - b._dist;};\n\nVJS.models.stack.prototype.zSpacing = function() {\n  // Spacing\n  // can not be 0 if not matrix can not be inverted.\n  var zSpacing = 1;\n  window.console.log(this._frame[0]);\n\n  if (this._numberOfFrames > 1) {\n    if (this._spacingBetweenSlices) {\n      zSpacing = this._spacingBetweenSlices;\n    } else if (this._frame[0]._sliceThickness) {\n      zSpacing = this._frame[0]._sliceThickness;\n    } else {\n      var xCosine = new THREE.Vector3(\n        this._frame[0]._imageOrientation[0],\n        this._frame[0]._imageOrientation[1],\n        this._frame[0]._imageOrientation[2]\n      );\n\n      var yCosine = new THREE.Vector3(\n        this._frame[0]._imageOrientation[3],\n        this._frame[0]._imageOrientation[4],\n        this._frame[0]._imageOrientation[5]\n      );\n\n      var zCosine = new THREE.Vector3(0, 0, 0).crossVectors(xCosine, yCosine).normalize();\n\n      // compute and sort by dist in this series\n      this._frame.map(this._computeDistance.bind(null, zCosine));\n      this._frame.sort(this._sortDistance);\n\n      zSpacing = this._frame[1]._dist - this._frame[0]._dist;\n    }\n  }\n\n  if (zSpacing === 0) {\n    zSpacing = 1;\n  }\n\n  return zSpacing;\n};\n\nVJS.models.stack.prototype.merge = function(stack) {\n  // try to merge imageHelper with current image.\n  // same image if same Series UID?\n  // could use concatenation if available, to already know if image is complete!\n  var sameStackID = false;\n  if (this._stackID === stack._stackID) {\n    sameStackID = true;\n\n    // Make sure image information is consisent?\n    // re-compute it?\n    var frame = stack._frame;\n    // Merge Stacks (N against N)\n    // try to match all stack to current stacks, if not add it to stacks list!\n    for (var i = 0; i < frame.length; i++) {\n      // test stack against existing stack\n      for (var j = 0; j < this._frame.length; j++) {\n        // test dimension\n        // dimension index value not defined!\n        if (\n          \n          // dimension index is unique\n          (this._frame[j]._dimensionIndexValues &&\n            frame[i]._dimensionIndexValues &&\n            this._frame[j]._dimensionIndexValues.join() === frame[i]._dimensionIndexValues.join()) ||\n          \n          // instance number is unique?\n          (this._frame[j]._instanceNumber &&\n            frame[i]._instanceNumber &&\n            this._frame[j]._instanceNumber === frame[i]._instanceNumber) ||\n          \n          // imagePosition + imageOrientation is unique\n          (this._frame[j]._imagePosition &&\n            frame[i]._imagePosition &&\n            this._frame[j]._imagePosition.join() === frame[i]._imagePosition.join() &&\n            this._frame[j]._imageOrientation &&\n            frame[i]._imageOrientation &&\n            this._frame[j]._imageOrientation.join() === frame[i]._imageOrientation.join() &&\n            // FOR DIFFUSION.. same position but different instance numbers...\n            this._frame[j]._instanceNumber &&\n            frame[i]._instanceNumber &&\n            this._frame[j]._instanceNumber === frame[i]._instanceNumber) //||\n\n          // _pixelData length is unique...? imageSOP?\n          // (this._frame[j]._pixelData &&\n          //   frame[i]._pixelData &&\n          //   this._frame[j]._pixelData.length === frame[i]._pixelData.length)\n\n          ) {\n\n          window.console.log('BREAKING!');\n          window.console.log(frame[i], this._frame[j]);\n          break;\n         \n        } else if (j === this._frame.length - 1) {\n\n          window.console.log('PUSHING FRAME TO STACK!');\n          this._frame.push(frame[i]);\n          break;\n\n        }\n\n      }\n\n    }\n  }\n\n  window.console.log(this);\n\n  return sameStackID;\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.models.stack;\n}\n\n},{}],11:[function(require,module,exports){\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals ArithmeticDecoder, globalScope, log2, readUint16, readUint32,\n           info, warn */\n\n'use strict';\n\nvar JpxImage = (function JpxImageClosure() {\n  // Table E.1\n  var SubbandsGainLog2 = {\n    'LL': 0,\n    'LH': 1,\n    'HL': 1,\n    'HH': 2\n  };\n  function JpxImage() {\n    this.failOnCorruptedImage = false;\n  }\n  JpxImage.prototype = {\n    parse: function JpxImage_parse(data) {\n\n      var head = readUint16(data, 0);\n      // No box header, immediate start of codestream (SOC)\n      if (head === 0xFF4F) {\n        this.parseCodestream(data, 0, data.length);\n        return;\n      }\n\n      var position = 0, length = data.length;\n      while (position < length) {\n        var headerSize = 8;\n        var lbox = readUint32(data, position);\n        var tbox = readUint32(data, position + 4);\n        position += headerSize;\n        if (lbox === 1) {\n          // XLBox: read UInt64 according to spec.\n          // JavaScript's int precision of 53 bit should be sufficient here.\n          lbox = readUint32(data, position) * 4294967296 +\n                 readUint32(data, position + 4);\n          position += 8;\n          headerSize += 8;\n        }\n        if (lbox === 0) {\n          lbox = length - position + headerSize;\n        }\n        if (lbox < headerSize) {\n          throw new Error('JPX Error: Invalid box field size');\n        }\n        var dataLength = lbox - headerSize;\n        var jumpDataLength = true;\n        switch (tbox) {\n          case 0x6A703268: // 'jp2h'\n            jumpDataLength = false; // parsing child boxes\n            break;\n          case 0x636F6C72: // 'colr'\n            // Colorspaces are not used, the CS from the PDF is used.\n            var method = data[position];\n            var precedence = data[position + 1];\n            var approximation = data[position + 2];\n            if (method === 1) {\n              // enumerated colorspace\n              var colorspace = readUint32(data, position + 3);\n              switch (colorspace) {\n                case 16: // this indicates a sRGB colorspace\n                case 17: // this indicates a grayscale colorspace\n                case 18: // this indicates a YUV colorspace\n                  break;\n                default:\n                  warn('Unknown colorspace ' + colorspace);\n                  break;\n              }\n            } else if (method === 2) {\n              info('ICC profile not supported');\n            }\n            break;\n          case 0x6A703263: // 'jp2c'\n            this.parseCodestream(data, position, position + dataLength);\n            break;\n          case 0x6A502020: // 'jP\\024\\024'\n            if (0x0d0a870a !== readUint32(data, position)) {\n              warn('Invalid JP2 signature');\n            }\n            break;\n          // The following header types are valid but currently not used:\n          case 0x6A501A1A: // 'jP\\032\\032'\n          case 0x66747970: // 'ftyp'\n          case 0x72726571: // 'rreq'\n          case 0x72657320: // 'res '\n          case 0x69686472: // 'ihdr'\n            break;\n          default:\n            var headerType = String.fromCharCode((tbox >> 24) & 0xFF,\n                                                 (tbox >> 16) & 0xFF,\n                                                 (tbox >> 8) & 0xFF,\n                                                 tbox & 0xFF);\n            warn('Unsupported header type ' + tbox + ' (' + headerType + ')');\n            break;\n        }\n        if (jumpDataLength) {\n          position += dataLength;\n        }\n      }\n    },\n    parseImageProperties: function JpxImage_parseImageProperties(stream) {\n      var newByte = stream.getByte();\n      while (newByte >= 0) {\n        var oldByte = newByte;\n        newByte = stream.getByte();\n        var code = (oldByte << 8) | newByte;\n        // Image and tile size (SIZ)\n        if (code === 0xFF51) {\n          stream.skip(4);\n          var Xsiz = stream.getInt32() >>> 0; // Byte 4\n          var Ysiz = stream.getInt32() >>> 0; // Byte 8\n          var XOsiz = stream.getInt32() >>> 0; // Byte 12\n          var YOsiz = stream.getInt32() >>> 0; // Byte 16\n          stream.skip(16);\n          var Csiz = stream.getUint16(); // Byte 36\n          this.width = Xsiz - XOsiz;\n          this.height = Ysiz - YOsiz;\n          this.componentsCount = Csiz;\n          // Results are always returned as Uint8Arrays\n          this.bitsPerComponent = 8;\n          return;\n        }\n      }\n      throw new Error('JPX Error: No size marker found in JPX stream');\n    },\n    parseCodestream: function JpxImage_parseCodestream(data, start, end) {\n      var context = {};\n      try {\n        var doNotRecover = false;\n        var position = start;\n        while (position + 1 < end) {\n          var code = readUint16(data, position);\n          position += 2;\n\n          var length = 0, j, sqcd, spqcds, spqcdSize, scalarExpounded, tile;\n          switch (code) {\n            case 0xFF4F: // Start of codestream (SOC)\n              context.mainHeader = true;\n              break;\n            case 0xFFD9: // End of codestream (EOC)\n              break;\n            case 0xFF51: // Image and tile size (SIZ)\n              length = readUint16(data, position);\n              var siz = {};\n              siz.Xsiz = readUint32(data, position + 4);\n              siz.Ysiz = readUint32(data, position + 8);\n              siz.XOsiz = readUint32(data, position + 12);\n              siz.YOsiz = readUint32(data, position + 16);\n              siz.XTsiz = readUint32(data, position + 20);\n              siz.YTsiz = readUint32(data, position + 24);\n              siz.XTOsiz = readUint32(data, position + 28);\n              siz.YTOsiz = readUint32(data, position + 32);\n              var componentsCount = readUint16(data, position + 36);\n              siz.Csiz = componentsCount;\n              var components = [];\n              j = position + 38;\n              for (var i = 0; i < componentsCount; i++) {\n                var component = {\n                  precision: (data[j] & 0x7F) + 1,\n                  isSigned: !!(data[j] & 0x80),\n                  XRsiz: data[j + 1],\n                  YRsiz: data[j + 1]\n                };\n                calculateComponentDimensions(component, siz);\n                components.push(component);\n              }\n              context.SIZ = siz;\n              context.components = components;\n              calculateTileGrids(context, components);\n              context.QCC = [];\n              context.COC = [];\n              break;\n            case 0xFF5C: // Quantization default (QCD)\n              length = readUint16(data, position);\n              var qcd = {};\n              j = position + 2;\n              sqcd = data[j++];\n              switch (sqcd & 0x1F) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n                default:\n                  throw new Error('JPX Error: Invalid SQcd value ' + sqcd);\n              }\n              qcd.noQuantization = (spqcdSize === 8);\n              qcd.scalarExpounded = scalarExpounded;\n              qcd.guardBits = sqcd >> 5;\n              spqcds = [];\n              while (j < length + position) {\n                var spqcd = {};\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                  j += 2;\n                }\n                spqcds.push(spqcd);\n              }\n              qcd.SPqcds = spqcds;\n              if (context.mainHeader) {\n                context.QCD = qcd;\n              } else {\n                context.currentTile.QCD = qcd;\n                context.currentTile.QCC = [];\n              }\n              break;\n            case 0xFF5D: // Quantization component (QCC)\n              length = readUint16(data, position);\n              var qcc = {};\n              j = position + 2;\n              var cqcc;\n              if (context.SIZ.Csiz < 257) {\n                cqcc = data[j++];\n              } else {\n                cqcc = readUint16(data, j);\n                j += 2;\n              }\n              sqcd = data[j++];\n              switch (sqcd & 0x1F) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n                default:\n                  throw new Error('JPX Error: Invalid SQcd value ' + sqcd);\n              }\n              qcc.noQuantization = (spqcdSize === 8);\n              qcc.scalarExpounded = scalarExpounded;\n              qcc.guardBits = sqcd >> 5;\n              spqcds = [];\n              while (j < (length + position)) {\n                spqcd = {};\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                  j += 2;\n                }\n                spqcds.push(spqcd);\n              }\n              qcc.SPqcds = spqcds;\n              if (context.mainHeader) {\n                context.QCC[cqcc] = qcc;\n              } else {\n                context.currentTile.QCC[cqcc] = qcc;\n              }\n              break;\n            case 0xFF52: // Coding style default (COD)\n              length = readUint16(data, position);\n              var cod = {};\n              j = position + 2;\n              var scod = data[j++];\n              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n              cod.sopMarkerUsed = !!(scod & 2);\n              cod.ephMarkerUsed = !!(scod & 4);\n              cod.progressionOrder = data[j++];\n              cod.layersCount = readUint16(data, j);\n              j += 2;\n              cod.multipleComponentTransform = data[j++];\n\n              cod.decompositionLevelsCount = data[j++];\n              cod.xcb = (data[j++] & 0xF) + 2;\n              cod.ycb = (data[j++] & 0xF) + 2;\n              var blockStyle = data[j++];\n              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n              cod.resetContextProbabilities = !!(blockStyle & 2);\n              cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n              cod.verticalyStripe = !!(blockStyle & 8);\n              cod.predictableTermination = !!(blockStyle & 16);\n              cod.segmentationSymbolUsed = !!(blockStyle & 32);\n              cod.reversibleTransformation = data[j++];\n              if (cod.entropyCoderWithCustomPrecincts) {\n                var precinctsSizes = [];\n                while (j < length + position) {\n                  var precinctsSize = data[j++];\n                  precinctsSizes.push({\n                    PPx: precinctsSize & 0xF,\n                    PPy: precinctsSize >> 4\n                  });\n                }\n                cod.precinctsSizes = precinctsSizes;\n              }\n              var unsupported = [];\n              if (cod.selectiveArithmeticCodingBypass) {\n                unsupported.push('selectiveArithmeticCodingBypass');\n              }\n              if (cod.resetContextProbabilities) {\n                unsupported.push('resetContextProbabilities');\n              }\n              if (cod.terminationOnEachCodingPass) {\n                unsupported.push('terminationOnEachCodingPass');\n              }\n              if (cod.verticalyStripe) {\n                unsupported.push('verticalyStripe');\n              }\n              if (cod.predictableTermination) {\n                unsupported.push('predictableTermination');\n              }\n              if (unsupported.length > 0) {\n                doNotRecover = true;\n                throw new Error('JPX Error: Unsupported COD options (' +\n                                unsupported.join(', ') + ')');\n              }\n              if (context.mainHeader) {\n                context.COD = cod;\n              } else {\n                context.currentTile.COD = cod;\n                context.currentTile.COC = [];\n              }\n              break;\n            case 0xFF90: // Start of tile-part (SOT)\n              length = readUint16(data, position);\n              tile = {};\n              tile.index = readUint16(data, position + 2);\n              tile.length = readUint32(data, position + 4);\n              tile.dataEnd = tile.length + position - 2;\n              tile.partIndex = data[position + 8];\n              tile.partsCount = data[position + 9];\n\n              context.mainHeader = false;\n              if (tile.partIndex === 0) {\n                // reset component specific settings\n                tile.COD = context.COD;\n                tile.COC = context.COC.slice(0); // clone of the global COC\n                tile.QCD = context.QCD;\n                tile.QCC = context.QCC.slice(0); // clone of the global COC\n              }\n              context.currentTile = tile;\n              break;\n            case 0xFF93: // Start of data (SOD)\n              tile = context.currentTile;\n              if (tile.partIndex === 0) {\n                initializeTile(context, tile.index);\n                buildPackets(context);\n              }\n\n              // moving to the end of the data\n              length = tile.dataEnd - position;\n              parseTilePackets(context, data, position, length);\n              break;\n            case 0xFF55: // Tile-part lengths, main header (TLM)\n            case 0xFF57: // Packet length, main header (PLM)\n            case 0xFF58: // Packet length, tile-part header (PLT)\n            case 0xFF64: // Comment (COM)\n              length = readUint16(data, position);\n              // skipping content\n              break;\n            case 0xFF53: // Coding style component (COC)\n              throw new Error('JPX Error: Codestream code 0xFF53 (COC) is ' +\n                              'not implemented');\n            default:\n              throw new Error('JPX Error: Unknown codestream code: ' +\n                              code.toString(16));\n          }\n          position += length;\n        }\n      } catch (e) {\n        if (doNotRecover || this.failOnCorruptedImage) {\n          throw e;\n        } else {\n          warn('Trying to recover from ' + e.message);\n        }\n      }\n      this.tiles = transformComponents(context);\n      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n      this.componentsCount = context.SIZ.Csiz;\n    }\n  };\n  function calculateComponentDimensions(component, siz) {\n    // Section B.2 Component mapping\n    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n    component.width = component.x1 - component.x0;\n    component.height = component.y1 - component.y0;\n  }\n  function calculateTileGrids(context, components) {\n    var siz = context.SIZ;\n    // Section B.3 Division into tile and tile-components\n    var tile, tiles = [];\n    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n    for (var q = 0; q < numYtiles; q++) {\n      for (var p = 0; p < numXtiles; p++) {\n        tile = {};\n        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n        tile.width = tile.tx1 - tile.tx0;\n        tile.height = tile.ty1 - tile.ty0;\n        tile.components = [];\n        tiles.push(tile);\n      }\n    }\n    context.tiles = tiles;\n\n    var componentsCount = siz.Csiz;\n    for (var i = 0, ii = componentsCount; i < ii; i++) {\n      var component = components[i];\n      for (var j = 0, jj = tiles.length; j < jj; j++) {\n        var tileComponent = {};\n        tile = tiles[j];\n        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n        tile.components[i] = tileComponent;\n      }\n    }\n  }\n  function getBlocksDimensions(context, component, r) {\n    var codOrCoc = component.codingStyleParameters;\n    var result = {};\n    if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n      result.PPx = 15;\n      result.PPy = 15;\n    } else {\n      result.PPx = codOrCoc.precinctsSizes[r].PPx;\n      result.PPy = codOrCoc.precinctsSizes[r].PPy;\n    }\n    // calculate codeblock size as described in section B.7\n    result.xcb_ = (r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) :\n                   Math.min(codOrCoc.xcb, result.PPx));\n    result.ycb_ = (r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) :\n                   Math.min(codOrCoc.ycb, result.PPy));\n    return result;\n  }\n  function buildPrecincts(context, resolution, dimensions) {\n    // Section B.6 Division resolution to precincts\n    var precinctWidth = 1 << dimensions.PPx;\n    var precinctHeight = 1 << dimensions.PPy;\n    // Jasper introduces codeblock groups for mapping each subband codeblocks\n    // to precincts. Precinct partition divides a resolution according to width\n    // and height parameters. The subband that belongs to the resolution level\n    // has a different size than the level, unless it is the zero resolution.\n\n    // From Jasper documentation: jpeg2000.pdf, section K: Tier-2 coding:\n    // The precinct partitioning for a particular subband is derived from a\n    // partitioning of its parent LL band (i.e., the LL band at the next higher\n    // resolution level)... The LL band associated with each resolution level is\n    // divided into precincts... Each of the resulting precinct regions is then\n    // mapped into its child subbands (if any) at the next lower resolution\n    // level. This is accomplished by using the coordinate transformation\n    // (u, v) = (ceil(x/2), ceil(y/2)) where (x, y) and (u, v) are the\n    // coordinates of a point in the LL band and child subband, respectively.\n    var isZeroRes = resolution.resLevel === 0;\n    var precinctWidthInSubband = 1 << (dimensions.PPx + (isZeroRes ? 0 : -1));\n    var precinctHeightInSubband = 1 << (dimensions.PPy + (isZeroRes ? 0 : -1));\n    var numprecinctswide = (resolution.trx1 > resolution.trx0 ?\n      Math.ceil(resolution.trx1 / precinctWidth) -\n      Math.floor(resolution.trx0 / precinctWidth) : 0);\n    var numprecinctshigh = (resolution.try1 > resolution.try0 ?\n      Math.ceil(resolution.try1 / precinctHeight) -\n      Math.floor(resolution.try0 / precinctHeight) : 0);\n    var numprecincts = numprecinctswide * numprecinctshigh;\n\n    resolution.precinctParameters = {\n      precinctWidth: precinctWidth,\n      precinctHeight: precinctHeight,\n      numprecinctswide: numprecinctswide,\n      numprecinctshigh: numprecinctshigh,\n      numprecincts: numprecincts,\n      precinctWidthInSubband: precinctWidthInSubband,\n      precinctHeightInSubband: precinctHeightInSubband\n    };\n  }\n  function buildCodeblocks(context, subband, dimensions) {\n    // Section B.7 Division sub-band into code-blocks\n    var xcb_ = dimensions.xcb_;\n    var ycb_ = dimensions.ycb_;\n    var codeblockWidth = 1 << xcb_;\n    var codeblockHeight = 1 << ycb_;\n    var cbx0 = subband.tbx0 >> xcb_;\n    var cby0 = subband.tby0 >> ycb_;\n    var cbx1 = (subband.tbx1 + codeblockWidth - 1) >> xcb_;\n    var cby1 = (subband.tby1 + codeblockHeight - 1) >> ycb_;\n    var precinctParameters = subband.resolution.precinctParameters;\n    var codeblocks = [];\n    var precincts = [];\n    var i, j, codeblock, precinctNumber;\n    for (j = cby0; j < cby1; j++) {\n      for (i = cbx0; i < cbx1; i++) {\n        codeblock = {\n          cbx: i,\n          cby: j,\n          tbx0: codeblockWidth * i,\n          tby0: codeblockHeight * j,\n          tbx1: codeblockWidth * (i + 1),\n          tby1: codeblockHeight * (j + 1)\n        };\n\n        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n\n        // Calculate precinct number for this codeblock, codeblock position\n        // should be relative to its subband, use actual dimension and position\n        // See comment about codeblock group width and height\n        var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) /\n          precinctParameters.precinctWidthInSubband);\n        var pj = Math.floor((codeblock.tby0_ - subband.tby0) /\n          precinctParameters.precinctHeightInSubband);\n        precinctNumber = pi + (pj * precinctParameters.numprecinctswide);\n\n        codeblock.precinctNumber = precinctNumber;\n        codeblock.subbandType = subband.type;\n        codeblock.Lblock = 3;\n\n        if (codeblock.tbx1_ <= codeblock.tbx0_ ||\n            codeblock.tby1_ <= codeblock.tby0_) {\n          continue;\n        }\n        codeblocks.push(codeblock);\n        // building precinct for the sub-band\n        var precinct = precincts[precinctNumber];\n        if (precinct !== undefined) {\n          if (i < precinct.cbxMin) {\n            precinct.cbxMin = i;\n          } else if (i > precinct.cbxMax) {\n            precinct.cbxMax = i;\n          }\n          if (j < precinct.cbyMin) {\n            precinct.cbxMin = j;\n          } else if (j > precinct.cbyMax) {\n            precinct.cbyMax = j;\n          }\n        } else {\n          precincts[precinctNumber] = precinct = {\n            cbxMin: i,\n            cbyMin: j,\n            cbxMax: i,\n            cbyMax: j\n          };\n        }\n        codeblock.precinct = precinct;\n      }\n    }\n    subband.codeblockParameters = {\n      codeblockWidth: xcb_,\n      codeblockHeight: ycb_,\n      numcodeblockwide: cbx1 - cbx0 + 1,\n      numcodeblockhigh: cby1 - cby0 + 1\n    };\n    subband.codeblocks = codeblocks;\n    subband.precincts = precincts;\n  }\n  function createPacket(resolution, precinctNumber, layerNumber) {\n    var precinctCodeblocks = [];\n    // Section B.10.8 Order of info in packet\n    var subbands = resolution.subbands;\n    // sub-bands already ordered in 'LL', 'HL', 'LH', and 'HH' sequence\n    for (var i = 0, ii = subbands.length; i < ii; i++) {\n      var subband = subbands[i];\n      var codeblocks = subband.codeblocks;\n      for (var j = 0, jj = codeblocks.length; j < jj; j++) {\n        var codeblock = codeblocks[j];\n        if (codeblock.precinctNumber !== precinctNumber) {\n          continue;\n        }\n        precinctCodeblocks.push(codeblock);\n      }\n    }\n    return {\n      layerNumber: layerNumber,\n      codeblocks: precinctCodeblocks\n    };\n  }\n  function LayerResolutionComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,\n        tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var l = 0, r = 0, i = 0, k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.1 Layer-resolution-component-position\n      for (; l < layersCount; l++) {\n        for (; r <= maxDecompositionLevelsCount; r++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n            k = 0;\n          }\n          i = 0;\n        }\n        r = 0;\n      }\n    };\n  }\n  function ResolutionLayerComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,\n        tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var r = 0, l = 0, i = 0, k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.2 Resolution-layer-component-position\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; l < layersCount; l++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n            k = 0;\n          }\n          i = 0;\n        }\n        l = 0;\n      }\n    };\n  }\n  function ResolutionPositionComponentLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var l, r, c, p;\n    var maxDecompositionLevelsCount = 0;\n    for (c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,\n        component.codingStyleParameters.decompositionLevelsCount);\n    }\n    var maxNumPrecinctsInLevel = new Int32Array(\n      maxDecompositionLevelsCount + 1);\n    for (r = 0; r <= maxDecompositionLevelsCount; ++r) {\n      var maxNumPrecincts = 0;\n      for (c = 0; c < componentsCount; ++c) {\n        var resolutions = tile.components[c].resolutions;\n        if (r < resolutions.length) {\n          maxNumPrecincts = Math.max(maxNumPrecincts,\n            resolutions[r].precinctParameters.numprecincts);\n        }\n      }\n      maxNumPrecinctsInLevel[r] = maxNumPrecincts;\n    }\n    l = 0;\n    r = 0;\n    c = 0;\n    p = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.3 Resolution-position-component-layer\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; p < maxNumPrecinctsInLevel[r]; p++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            if (p >= numprecincts) {\n              continue;\n            }\n            for (; l < layersCount;) {\n              var packet = createPacket(resolution, p, l);\n              l++;\n              return packet;\n            }\n            l = 0;\n          }\n          c = 0;\n        }\n        p = 0;\n      }\n    };\n  }\n  function PositionComponentResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var precinctsIterationSizes = precinctsSizes;\n    var l = 0, r = 0, c = 0, px = 0, py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.4 Position-component-resolution-layer\n      for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n        for (; px < precinctsIterationSizes.maxNumWide; px++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n            var decompositionLevelsCount =\n              component.codingStyleParameters.decompositionLevelsCount;\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale =\n                precinctsSizes.components[c].resolutions[r];\n              var k = getPrecinctIndexIfExist(\n                px,\n                py,\n                sizeInImageScale,\n                precinctsIterationSizes,\n                resolution);\n              if (k === null) {\n                continue;\n              }\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n              l = 0;\n            }\n            r = 0;\n          }\n          c = 0;\n        }\n        px = 0;\n      }\n    };\n  }\n  function ComponentPositionResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var l = 0, r = 0, c = 0, px = 0, py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.5 Component-position-resolution-layer\n      for (; c < componentsCount; ++c) {\n        var component = tile.components[c];\n        var precinctsIterationSizes = precinctsSizes.components[c];\n        var decompositionLevelsCount =\n          component.codingStyleParameters.decompositionLevelsCount;\n        for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n          for (; px < precinctsIterationSizes.maxNumWide; px++) {\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsIterationSizes.resolutions[r];\n              var k = getPrecinctIndexIfExist(\n                px,\n                py,\n                sizeInImageScale,\n                precinctsIterationSizes,\n                resolution);\n              if (k === null) {\n                continue;\n              }\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n              l = 0;\n            }\n            r = 0;\n          }\n          px = 0;\n        }\n        py = 0;\n      }\n    };\n  }\n  function getPrecinctIndexIfExist(\n    pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {\n    var posX = pxIndex * precinctIterationSizes.minWidth;\n    var posY = pyIndex * precinctIterationSizes.minHeight;\n    if (posX % sizeInImageScale.width !== 0 ||\n        posY % sizeInImageScale.height !== 0) {\n      return null;\n    }\n    var startPrecinctRowIndex =\n      (posY / sizeInImageScale.width) *\n      resolution.precinctParameters.numprecinctswide;\n    return (posX / sizeInImageScale.height) + startPrecinctRowIndex;\n  }\n  function getPrecinctSizesInImageScale(tile) {\n    var componentsCount = tile.components.length;\n    var minWidth = Number.MAX_VALUE;\n    var minHeight = Number.MAX_VALUE;\n    var maxNumWide = 0;\n    var maxNumHigh = 0;\n    var sizePerComponent = new Array(componentsCount);\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount =\n        component.codingStyleParameters.decompositionLevelsCount;\n      var sizePerResolution = new Array(decompositionLevelsCount + 1);\n      var minWidthCurrentComponent = Number.MAX_VALUE;\n      var minHeightCurrentComponent = Number.MAX_VALUE;\n      var maxNumWideCurrentComponent = 0;\n      var maxNumHighCurrentComponent = 0;\n      var scale = 1;\n      for (var r = decompositionLevelsCount; r >= 0; --r) {\n        var resolution = component.resolutions[r];\n        var widthCurrentResolution =\n          scale * resolution.precinctParameters.precinctWidth;\n        var heightCurrentResolution =\n          scale * resolution.precinctParameters.precinctHeight;\n        minWidthCurrentComponent = Math.min(\n          minWidthCurrentComponent,\n          widthCurrentResolution);\n        minHeightCurrentComponent = Math.min(\n          minHeightCurrentComponent,\n          heightCurrentResolution);\n        maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent,\n          resolution.precinctParameters.numprecinctswide);\n        maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent,\n          resolution.precinctParameters.numprecinctshigh);\n        sizePerResolution[r] = {\n          width: widthCurrentResolution,\n          height: heightCurrentResolution\n        };\n        scale <<= 1;\n      }\n      minWidth = Math.min(minWidth, minWidthCurrentComponent);\n      minHeight = Math.min(minHeight, minHeightCurrentComponent);\n      maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);\n      maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);\n      sizePerComponent[c] = {\n        resolutions: sizePerResolution,\n        minWidth: minWidthCurrentComponent,\n        minHeight: minHeightCurrentComponent,\n        maxNumWide: maxNumWideCurrentComponent,\n        maxNumHigh: maxNumHighCurrentComponent\n      };\n    }\n    return {\n      components: sizePerComponent,\n      minWidth: minWidth,\n      minHeight: minHeight,\n      maxNumWide: maxNumWide,\n      maxNumHigh: maxNumHigh\n    };\n  }\n  function buildPackets(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var componentsCount = siz.Csiz;\n    // Creating resolutions and sub-bands for each component\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount =\n        component.codingStyleParameters.decompositionLevelsCount;\n      // Section B.5 Resolution levels and sub-bands\n      var resolutions = [];\n      var subbands = [];\n      for (var r = 0; r <= decompositionLevelsCount; r++) {\n        var blocksDimensions = getBlocksDimensions(context, component, r);\n        var resolution = {};\n        var scale = 1 << (decompositionLevelsCount - r);\n        resolution.trx0 = Math.ceil(component.tcx0 / scale);\n        resolution.try0 = Math.ceil(component.tcy0 / scale);\n        resolution.trx1 = Math.ceil(component.tcx1 / scale);\n        resolution.try1 = Math.ceil(component.tcy1 / scale);\n        resolution.resLevel = r;\n        buildPrecincts(context, resolution, blocksDimensions);\n        resolutions.push(resolution);\n\n        var subband;\n        if (r === 0) {\n          // one sub-band (LL) with last decomposition\n          subband = {};\n          subband.type = 'LL';\n          subband.tbx0 = Math.ceil(component.tcx0 / scale);\n          subband.tby0 = Math.ceil(component.tcy0 / scale);\n          subband.tbx1 = Math.ceil(component.tcx1 / scale);\n          subband.tby1 = Math.ceil(component.tcy1 / scale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolution.subbands = [subband];\n        } else {\n          var bscale = 1 << (decompositionLevelsCount - r + 1);\n          var resolutionSubbands = [];\n          // three sub-bands (HL, LH and HH) with rest of decompositions\n          subband = {};\n          subband.type = 'HL';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          subband = {};\n          subband.type = 'LH';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          subband = {};\n          subband.type = 'HH';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          resolution.subbands = resolutionSubbands;\n        }\n      }\n      component.resolutions = resolutions;\n      component.subbands = subbands;\n    }\n    // Generate the packets sequence\n    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n    switch (progressionOrder) {\n      case 0:\n        tile.packetsIterator =\n          new LayerResolutionComponentPositionIterator(context);\n        break;\n      case 1:\n        tile.packetsIterator =\n          new ResolutionLayerComponentPositionIterator(context);\n        break;\n      case 2:\n        tile.packetsIterator =\n          new ResolutionPositionComponentLayerIterator(context);\n        break;\n      case 3:\n        tile.packetsIterator =\n          new PositionComponentResolutionLayerIterator(context);\n        break;\n      case 4:\n        tile.packetsIterator =\n          new ComponentPositionResolutionLayerIterator(context);\n        break;\n      default:\n        throw new Error('JPX Error: Unsupported progression order ' +\n                        progressionOrder);\n    }\n  }\n  function parseTilePackets(context, data, offset, dataLength) {\n    var position = 0;\n    var buffer, bufferSize = 0, skipNextBit = false;\n    function readBits(count) {\n      while (bufferSize < count) {\n        var b = data[offset + position];\n        position++;\n        if (skipNextBit) {\n          buffer = (buffer << 7) | b;\n          bufferSize += 7;\n          skipNextBit = false;\n        } else {\n          buffer = (buffer << 8) | b;\n          bufferSize += 8;\n        }\n        if (b === 0xFF) {\n          skipNextBit = true;\n        }\n      }\n      bufferSize -= count;\n      return (buffer >>> bufferSize) & ((1 << count) - 1);\n    }\n    function skipMarkerIfEqual(value) {\n      if (data[offset + position - 1] === 0xFF &&\n          data[offset + position] === value) {\n        skipBytes(1);\n        return true;\n      } else if (data[offset + position] === 0xFF &&\n                 data[offset + position + 1] === value) {\n        skipBytes(2);\n        return true;\n      }\n      return false;\n    }\n    function skipBytes(count) {\n      position += count;\n    }\n    function alignToByte() {\n      bufferSize = 0;\n      if (skipNextBit) {\n        position++;\n        skipNextBit = false;\n      }\n    }\n    function readCodingpasses() {\n      if (readBits(1) === 0) {\n        return 1;\n      }\n      if (readBits(1) === 0) {\n        return 2;\n      }\n      var value = readBits(2);\n      if (value < 3) {\n        return value + 3;\n      }\n      value = readBits(5);\n      if (value < 31) {\n        return value + 6;\n      }\n      value = readBits(7);\n      return value + 37;\n    }\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var sopMarkerUsed = context.COD.sopMarkerUsed;\n    var ephMarkerUsed = context.COD.ephMarkerUsed;\n    var packetsIterator = tile.packetsIterator;\n    while (position < dataLength) {\n      alignToByte();\n      if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {\n        // Skip also marker segment length and packet sequence ID\n        skipBytes(4);\n      }\n      var packet = packetsIterator.nextPacket();\n      if (packet === undefined) {\n        //No more packets. Stream is probably truncated.\n        return;\n      }\n      if (!readBits(1)) {\n        continue;\n      }\n      var layerNumber = packet.layerNumber;\n      var queue = [], codeblock;\n      for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n        codeblock = packet.codeblocks[i];\n        var precinct = codeblock.precinct;\n        var codeblockColumn = codeblock.cbx - precinct.cbxMin;\n        var codeblockRow = codeblock.cby - precinct.cbyMin;\n        var codeblockIncluded = false;\n        var firstTimeInclusion = false;\n        var valueReady;\n        if (codeblock['included'] !== undefined) {\n          codeblockIncluded = !!readBits(1);\n        } else {\n          // reading inclusion tree\n          precinct = codeblock.precinct;\n          var inclusionTree, zeroBitPlanesTree;\n          if (precinct['inclusionTree'] !== undefined) {\n            inclusionTree = precinct.inclusionTree;\n          } else {\n            // building inclusion and zero bit-planes trees\n            var width = precinct.cbxMax - precinct.cbxMin + 1;\n            var height = precinct.cbyMax - precinct.cbyMin + 1;\n            inclusionTree = new InclusionTree(width, height);\n            zeroBitPlanesTree = new TagTree(width, height);\n            precinct.inclusionTree = inclusionTree;\n            precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n          }\n\n          inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber);\n          while (true) {\n            if (position >= data.length) {\n              return;\n            }\n            if (inclusionTree.isAboveThreshold()){\n              break;\n            }\n            if (inclusionTree.isKnown()) {\n                inclusionTree.nextLevel();\n                continue;\n            }\n            if (readBits(1)) {\n              inclusionTree.setKnown();\n              if (inclusionTree.isLeaf()) {\n                codeblock.included = true;\n                codeblockIncluded = firstTimeInclusion = true;\n                break;\n              } else {\n                inclusionTree.nextLevel();\n              }\n            } else {\n              inclusionTree.incrementValue();\n            }\n          }\n        }\n        if (!codeblockIncluded) {\n          continue;\n        }\n        if (firstTimeInclusion) {\n          zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n          zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n          while (true) {\n            if (position >= data.length) {\n              return;\n            }\n            if (readBits(1)) {\n              valueReady = !zeroBitPlanesTree.nextLevel();\n              if (valueReady) {\n                break;\n              }\n            } else {\n              zeroBitPlanesTree.incrementValue();\n            }\n          }\n          codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n        }\n        var codingpasses = readCodingpasses();\n        while (readBits(1)) {\n          codeblock.Lblock++;\n        }\n        var codingpassesLog2 = log2(codingpasses);\n        // rounding down log2\n        var bits = ((codingpasses < (1 << codingpassesLog2)) ?\n          codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;\n        var codedDataLength = readBits(bits);\n        queue.push({\n          codeblock: codeblock,\n          codingpasses: codingpasses,\n          dataLength: codedDataLength\n        });\n      }\n      alignToByte();\n      if (ephMarkerUsed) {\n        skipMarkerIfEqual(0x92);\n      }\n      while (queue.length > 0) {\n        var packetItem = queue.shift();\n        codeblock = packetItem.codeblock;\n        if (codeblock['data'] === undefined) {\n          codeblock.data = [];\n        }\n        codeblock.data.push({\n          data: data,\n          start: offset + position,\n          end: offset + position + packetItem.dataLength,\n          codingpasses: packetItem.codingpasses\n        });\n        position += packetItem.dataLength;\n      }\n    }\n    return position;\n  }\n  function copyCoefficients(coefficients, levelWidth, levelHeight, subband,\n                            delta, mb, reversible, segmentationSymbolUsed) {\n    var x0 = subband.tbx0;\n    var y0 = subband.tby0;\n    var width = subband.tbx1 - subband.tbx0;\n    var codeblocks = subband.codeblocks;\n    var right = subband.type.charAt(0) === 'H' ? 1 : 0;\n    var bottom = subband.type.charAt(1) === 'H' ? levelWidth : 0;\n\n    for (var i = 0, ii = codeblocks.length; i < ii; ++i) {\n      var codeblock = codeblocks[i];\n      var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n      var blockHeight = codeblock.tby1_ - codeblock.tby0_;\n      if (blockWidth === 0 || blockHeight === 0) {\n        continue;\n      }\n      if (codeblock['data'] === undefined) {\n        continue;\n      }\n\n      var bitModel, currentCodingpassType;\n      bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType,\n                              codeblock.zeroBitPlanes, mb);\n      currentCodingpassType = 2; // first bit plane starts from cleanup\n\n      // collect data\n      var data = codeblock.data, totalLength = 0, codingpasses = 0;\n      var j, jj, dataItem;\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        totalLength += dataItem.end - dataItem.start;\n        codingpasses += dataItem.codingpasses;\n      }\n      var encodedData = new Int16Array(totalLength);\n      var position = 0;\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n        encodedData.set(chunk, position);\n        position += chunk.length;\n      }\n      // decoding the item\n      var decoder = new ArithmeticDecoder(encodedData, 0, totalLength);\n      bitModel.setDecoder(decoder);\n\n      for (j = 0; j < codingpasses; j++) {\n        switch (currentCodingpassType) {\n          case 0:\n            bitModel.runSignificancePropogationPass();\n            break;\n          case 1:\n            bitModel.runMagnitudeRefinementPass();\n            break;\n          case 2:\n            bitModel.runCleanupPass();\n            if (segmentationSymbolUsed) {\n              bitModel.checkSegmentationSymbol();\n            }\n            break;\n        }\n        currentCodingpassType = (currentCodingpassType + 1) % 3;\n      }\n\n      var offset = (codeblock.tbx0_ - x0) + (codeblock.tby0_ - y0) * width;\n      var sign = bitModel.coefficentsSign;\n      var magnitude = bitModel.coefficentsMagnitude;\n      var bitsDecoded = bitModel.bitsDecoded;\n      var magnitudeCorrection = reversible ? 0 : 0.5;\n      var k, n, nb;\n      position = 0;\n      // Do the interleaving of Section F.3.3 here, so we do not need\n      // to copy later. LL level is not interleaved, just copied.\n      var interleave = (subband.type !== 'LL');\n      for (j = 0; j < blockHeight; j++) {\n        var row = (offset / width) | 0; // row in the non-interleaved subband\n        var levelOffset = 2 * row * (levelWidth - width) + right + bottom;\n        for (k = 0; k < blockWidth; k++) {\n          n = magnitude[position];\n          if (n !== 0) {\n            n = (n + magnitudeCorrection) * delta;\n            if (sign[position] !== 0) {\n              n = -n;\n            }\n            nb = bitsDecoded[position];\n            var pos = interleave ? (levelOffset + (offset << 1)) : offset;\n            if (reversible && (nb >= mb)) {\n              coefficients[pos] = n;\n            } else {\n              coefficients[pos] = n * (1 << (mb - nb));\n            }\n          }\n          offset++;\n          position++;\n        }\n        offset += width - blockWidth;\n      }\n    }\n  }\n  function transformTile(context, tile, c) {\n    var component = tile.components[c];\n    var codingStyleParameters = component.codingStyleParameters;\n    var quantizationParameters = component.quantizationParameters;\n    var decompositionLevelsCount =\n      codingStyleParameters.decompositionLevelsCount;\n    var spqcds = quantizationParameters.SPqcds;\n    var scalarExpounded = quantizationParameters.scalarExpounded;\n    var guardBits = quantizationParameters.guardBits;\n    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n    var precision = context.components[c].precision;\n\n    var reversible = codingStyleParameters.reversibleTransformation;\n    var transform = (reversible ? new ReversibleTransform() :\n                                  new IrreversibleTransform());\n\n    var subbandCoefficients = [];\n    var b = 0;\n    for (var i = 0; i <= decompositionLevelsCount; i++) {\n      var resolution = component.resolutions[i];\n\n      var width = resolution.trx1 - resolution.trx0;\n      var height = resolution.try1 - resolution.try0;\n      // Allocate space for the whole sublevel.\n      var coefficients = new Float32Array(width * height);\n\n      for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {\n        var mu, epsilon;\n        if (!scalarExpounded) {\n          // formula E-5\n          mu = spqcds[0].mu;\n          epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n        } else {\n          mu = spqcds[b].mu;\n          epsilon = spqcds[b].epsilon;\n          b++;\n        }\n\n        var subband = resolution.subbands[j];\n        var gainLog2 = SubbandsGainLog2[subband.type];\n\n        // calulate quantization coefficient (Section E.1.1.1)\n        var delta = (reversible ? 1 :\n          Math.pow(2, precision + gainLog2 - epsilon) * (1 + mu / 2048));\n        var mb = (guardBits + epsilon - 1);\n\n        // In the first resolution level, copyCoefficients will fill the\n        // whole array with coefficients. In the succeding passes,\n        // copyCoefficients will consecutively fill in the values that belong\n        // to the interleaved positions of the HL, LH, and HH coefficients.\n        // The LL coefficients will then be interleaved in Transform.iterate().\n        copyCoefficients(coefficients, width, height, subband, delta, mb,\n                         reversible, segmentationSymbolUsed);\n      }\n      subbandCoefficients.push({\n        width: width,\n        height: height,\n        items: coefficients\n      });\n    }\n\n    var result = transform.calculate(subbandCoefficients,\n                                     component.tcx0, component.tcy0);\n    return {\n      left: component.tcx0,\n      top: component.tcy0,\n      width: result.width,\n      height: result.height,\n      items: result.items\n    };\n  }\n  function transformComponents(context) {\n    var siz = context.SIZ;\n    var components = context.components;\n    var componentsCount = siz.Csiz;\n    var resultImages = [];\n    for (var i = 0, ii = context.tiles.length; i < ii; i++) {\n      var tile = context.tiles[i];\n      var transformedTiles = [];\n      var c;\n      for (c = 0; c < componentsCount; c++) {\n        transformedTiles[c] = transformTile(context, tile, c);\n      }\n      var tile0 = transformedTiles[0];\n      var isSigned = components[0].isSigned;\n      if (isSigned) {\n        var out = new Int16Array(tile0.items.length * componentsCount);\n      } else {\n        var out = new Uint16Array(tile0.items.length * componentsCount);\n      }\n      var result = {\n        left: tile0.left,\n        top: tile0.top,\n        width: tile0.width,\n        height: tile0.height,\n        items: out\n      };\n\n      // Section G.2.2 Inverse multi component transform\n      var shift, offset, max, min, maxK;\n      var pos = 0, j, jj, y0, y1, y2, r, g, b, k, val;\n      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n        var fourComponents = componentsCount === 4;\n        var y0items = transformedTiles[0].items;\n        var y1items = transformedTiles[1].items;\n        var y2items = transformedTiles[2].items;\n        var y3items = fourComponents ? transformedTiles[3].items : null;\n\n        // HACK: The multiple component transform formulas below assume that\n        // all components have the same precision. With this in mind, we\n        // compute shift and offset only once.\n        shift = components[0].precision - 8;\n        offset = (128 << shift) + 0.5;\n        max = 255 * (1 << shift);\n        maxK = max * 0.5;\n        min = -maxK;\n\n        var component0 = tile.components[0];\n        var alpha01 = componentsCount - 3;\n        jj = y0items.length;\n        if (!component0.codingStyleParameters.reversibleTransformation) {\n          // inverse irreversible multiple component transform\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            r = y0 + 1.402 * y2;\n            g = y0 - 0.34413 * y1 - 0.71414 * y2;\n            b = y0 + 1.772 * y1;\n            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;\n            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;\n            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;\n          }\n        } else {\n          // inverse reversible multiple component transform\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            g = y0 - ((y2 + y1) >> 2);\n            r = g + y2;\n            b = g + y1;\n            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;\n            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;\n            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;\n          }\n        }\n        if (fourComponents) {\n          for (j = 0, pos = 3; j < jj; j++, pos += 4) {\n            k = y3items[j];\n            out[pos] = k <= min ? 0 : k >= maxK ? 255 : (k + offset) >> shift;\n          }\n        }\n      } else { // no multi-component transform\n        for (c = 0; c < componentsCount; c++) {\n          if (components[c].precision === 8){\n            var items = transformedTiles[c].items;\n            shift = components[c].precision - 8;\n            offset = (128 << shift) + 0.5;\n            max = (127.5 * (1 << shift));\n            min = -max;\n            for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n              val = items[j];\n              out[pos] = val <= min ? 0 :\n                         val >= max ? 255 : (val + offset) >> shift;\n              pos += componentsCount;\n            }\n          }else{\n            var isSigned = components[c].isSigned;\n            var items = transformedTiles[c].items;\n\n            if(isSigned){\n              for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n                out[pos] = items[j];\n                pos += componentsCount;\n              }\n            }else{\n              shift = components[c].precision - 8;\n              offset = (128 << shift) + 0.5;\n              var precisionMax = Math.pow(2,components[c].precision)-1;\n              for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n                val = items[j];\n                out[pos] = Math.max(Math.min((val + offset),precisionMax),0);\n                pos += componentsCount;\n              }\n            }\n          }\n        }\n      }\n      resultImages.push(result);\n    }\n    return resultImages;\n  }\n  function initializeTile(context, tileIndex) {\n    var siz = context.SIZ;\n    var componentsCount = siz.Csiz;\n    var tile = context.tiles[tileIndex];\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var qcdOrQcc = (context.currentTile.QCC[c] !== undefined ?\n        context.currentTile.QCC[c] : context.currentTile.QCD);\n      component.quantizationParameters = qcdOrQcc;\n      var codOrCoc = (context.currentTile.COC[c] !== undefined  ?\n        context.currentTile.COC[c] : context.currentTile.COD);\n      component.codingStyleParameters = codOrCoc;\n    }\n    tile.codingStyleDefaultParameters = context.currentTile.COD;\n  }\n\n  // Section B.10.2 Tag trees\n  var TagTree = (function TagTreeClosure() {\n    function TagTree(width, height) {\n      var levelsLength = log2(Math.max(width, height)) + 1;\n      this.levels = [];\n      for (var i = 0; i < levelsLength; i++) {\n        var level = {\n          width: width,\n          height: height,\n          items: []\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n    TagTree.prototype = {\n      reset: function TagTree_reset(i, j) {\n        var currentLevel = 0, value = 0, level;\n        while (currentLevel < this.levels.length) {\n          level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          if (level.items[index] !== undefined) {\n            value = level.items[index];\n            break;\n          }\n          level.index = index;\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n        currentLevel--;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        this.currentLevel = currentLevel;\n        delete this.value;\n      },\n      incrementValue: function TagTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index]++;\n      },\n      nextLevel: function TagTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        currentLevel--;\n        if (currentLevel < 0) {\n          this.value = value;\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return TagTree;\n  })();\n\n  var InclusionTree = (function InclusionTreeClosure() {\n    function InclusionTree(width, height) {\n      var levelsLength = log2(Math.max(width, height)) + 1;\n      this.levels = [];\n      for (var i = 0; i < levelsLength; i++) {\n        var items = new Uint8Array(width * height);\n        var status = new Uint8Array(width * height);\n        for (var j = 0, jj = items.length; j < jj; j++) {\n          items[j] = 0;\n          status[j] = 0;\n        }\n\n        var level = {\n          width: width,\n          height: height,\n          items: items,\n          status: status\n        };\n        this.levels.push(level);\n\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n    InclusionTree.prototype = {\n      reset: function InclusionTree_reset(i, j, stopValue) {\n        this.currentStopValue = stopValue;\n        var currentLevel = 0;\n        while (currentLevel < this.levels.length) {\n          var level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          level.index = index;\n\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n\n        this.currentLevel = this.levels.length - 1;\n        this.minValue =this.levels[this.currentLevel].items[0];\n        return;\n      },\n      incrementValue: function InclusionTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index] = level.items[level.index] + 1;\n        if(level.items[level.index] > this.minValue) {\n          this.minValue = level.items[level.index];\n        }\n      },\n      nextLevel: function InclusionTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        currentLevel--;\n        if (currentLevel < 0) {\n          return false;\n        } else {\n          this.currentLevel = currentLevel;\n          var level = this.levels[currentLevel];\n          if(level.items[level.index] < this.minValue) {\n            level.items[level.index] = this.minValue;\n          }else if (level.items[level.index] > this.minValue) {\n            this.minValue = level.items[level.index];\n          }\n          return true;\n        }\n      },\n    isLeaf: function InclusionTree_isLeaf(){\n      return (this.currentLevel === 0);\n    },\n    isAboveThreshold: function InclusionTree_isAboveThreshold(){\n      var levelindex = this.currentLevel;\n      var level = this.levels[levelindex];\n      return (level.items[level.index] > this.currentStopValue);\n    },\n    isKnown: function InclusionTree_isKnown(){\n      var levelindex = this.currentLevel;\n      var level = this.levels[levelindex];\n      return (level.status[level.index] > 0);\n    },\n    setKnown: function InclusionTree_setKnown(){\n      var levelindex = this.currentLevel;\n      var level = this.levels[levelindex];\n      level.status[level.index] = 1;\n      return;\n    }\n\n    };\n    return InclusionTree;\n  })();\n\n  // Section D. Coefficient bit modeling\n  var BitModel = (function BitModelClosure() {\n    var UNIFORM_CONTEXT = 17;\n    var RUNLENGTH_CONTEXT = 18;\n    // Table D-1\n    // The index is binary presentation: 0dddvvhh, ddd - sum of Di (0..4),\n    // vv - sum of Vi (0..2), and hh - sum of Hi (0..2)\n    var LLAndLHContextsLabel = new Uint8Array([\n      0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4,\n      7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6,\n      8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8\n    ]);\n    var HLContextLabel = new Uint8Array([\n      0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8,\n      8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3,\n      4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8\n    ]);\n    var HHContextLabel = new Uint8Array([\n      0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5,\n      5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8,\n      8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8\n    ]);\n\n    function BitModel(width, height, subband, zeroBitPlanes, mb) {\n      this.width = width;\n      this.height = height;\n\n      this.contextLabelTable = (subband === 'HH' ? HHContextLabel :\n        (subband === 'HL' ? HLContextLabel : LLAndLHContextsLabel));\n\n      var coefficientCount = width * height;\n\n      // coefficients outside the encoding region treated as insignificant\n      // add border state cells for significanceState\n      this.neighborsSignificance = new Uint8Array(coefficientCount);\n      this.coefficentsSign = new Uint8Array(coefficientCount);\n      this.coefficentsMagnitude = mb > 14 ? new Uint32Array(coefficientCount) :\n                                  mb > 6 ? new Uint16Array(coefficientCount) :\n                                  new Uint8Array(coefficientCount);\n      this.processingFlags = new Uint8Array(coefficientCount);\n\n      var bitsDecoded = new Uint8Array(coefficientCount);\n      if (zeroBitPlanes !== 0) {\n        for (var i = 0; i < coefficientCount; i++) {\n          bitsDecoded[i] = zeroBitPlanes;\n        }\n      }\n      this.bitsDecoded = bitsDecoded;\n\n      this.reset();\n    }\n\n    BitModel.prototype = {\n      setDecoder: function BitModel_setDecoder(decoder) {\n        this.decoder = decoder;\n      },\n      reset: function BitModel_reset() {\n        // We have 17 contexts that are accessed via context labels,\n        // plus the uniform and runlength context.\n        this.contexts = new Int8Array(19);\n\n        // Contexts are packed into 1 byte:\n        // highest 7 bits carry the index, lowest bit carries mps\n        this.contexts[0] = (4 << 1) | 0;\n        this.contexts[UNIFORM_CONTEXT] = (46 << 1) | 0;\n        this.contexts[RUNLENGTH_CONTEXT] = (3 << 1) | 0;\n      },\n      setNeighborsSignificance:\n        function BitModel_setNeighborsSignificance(row, column, index) {\n        var neighborsSignificance = this.neighborsSignificance;\n        var width = this.width, height = this.height;\n        var left = (column > 0);\n        var right = (column + 1 < width);\n        var i;\n\n        if (row > 0) {\n          i = index - width;\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (row + 1 < height) {\n          i = index + width;\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (left) {\n          neighborsSignificance[index - 1] += 0x01;\n        }\n        if (right) {\n          neighborsSignificance[index + 1] += 0x01;\n        }\n        neighborsSignificance[index] |= 0x80;\n      },\n      runSignificancePropogationPass:\n        function BitModel_runSignificancePropogationPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var neighborsSignificance = this.neighborsSignificance;\n        var processingFlags = this.processingFlags;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processedInverseMask = ~1;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n\n        for (var i0 = 0; i0 < height; i0 += 4) {\n          for (var j = 0; j < width; j++) {\n            var index = i0 * width + j;\n            for (var i1 = 0; i1 < 4; i1++, index += width) {\n              var i = i0 + i1;\n              if (i >= height) {\n                break;\n              }\n              // clear processed flag first\n              processingFlags[index] &= processedInverseMask;\n\n              if (coefficentsMagnitude[index] ||\n                  !neighborsSignificance[index]) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n              if (decision) {\n                var sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      decodeSignBit: function BitModel_decodeSignBit(row, column, index) {\n        var width = this.width, height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contribution, sign0, sign1, significance1;\n        var contextLabel, decoded;\n\n        // calculate horizontal contribution\n        significance1 = (column > 0 && coefficentsMagnitude[index - 1] !== 0);\n        if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {\n          sign1 = coefficentsSign[index + 1];\n          if (significance1) {\n            sign0 = coefficentsSign[index - 1];\n            contribution = 1 - sign1 - sign0;\n          } else {\n            contribution = 1 - sign1 - sign1;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - 1];\n          contribution = 1 - sign0 - sign0;\n        } else {\n          contribution = 0;\n        }\n        var horizontalContribution = 3 * contribution;\n\n        // calculate vertical contribution and combine with the horizontal\n        significance1 = (row > 0 && coefficentsMagnitude[index - width] !== 0);\n        if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {\n          sign1 = coefficentsSign[index + width];\n          if (significance1) {\n            sign0 = coefficentsSign[index - width];\n            contribution = 1 - sign1 - sign0 + horizontalContribution;\n          } else {\n            contribution = 1 - sign1 - sign1 + horizontalContribution;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - width];\n          contribution = 1 - sign0 - sign0 + horizontalContribution;\n        } else {\n          contribution = horizontalContribution;\n        }\n\n        if (contribution >= 0) {\n          contextLabel = 9 + contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel);\n        } else {\n          contextLabel = 9 - contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;\n        }\n        return decoded;\n      },\n      runMagnitudeRefinementPass:\n        function BitModel_runMagnitudeRefinementPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var neighborsSignificance = this.neighborsSignificance;\n        var contexts = this.contexts;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var length = width * height;\n        var width4 = width * 4;\n\n        for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {\n          indexNext = Math.min(length, index0 + width4);\n          for (var j = 0; j < width; j++) {\n            for (var index = index0 + j; index < indexNext; index += width) {\n\n              // significant but not those that have just become\n              if (!coefficentsMagnitude[index] ||\n                (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = 16;\n              if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {\n                processingFlags[index] ^= firstMagnitudeBitMask;\n                // first refinement\n               var significance = neighborsSignificance[index] & 127;\n               contextLabel = significance === 0 ? 15 : 14;\n              }\n\n              var bit = decoder.readBit(contexts, contextLabel);\n              coefficentsMagnitude[index] =\n                (coefficentsMagnitude[index] << 1) | bit;\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      runCleanupPass: function BitModel_runCleanupPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var neighborsSignificance = this.neighborsSignificance;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var oneRowDown = width;\n        var twoRowsDown = width * 2;\n        var threeRowsDown = width * 3;\n        var iNext;\n        for (var i0 = 0; i0 < height; i0 = iNext) {\n          iNext = Math.min(i0 + 4, height);\n          var indexBase = i0 * width;\n          var checkAllEmpty = i0 + 3 < height;\n          for (var j = 0; j < width; j++) {\n            var index0 = indexBase + j;\n            // using the property: labels[neighborsSignificance[index]] === 0\n            // when neighborsSignificance[index] === 0\n            var allEmpty = (checkAllEmpty &&\n              processingFlags[index0] === 0 &&\n              processingFlags[index0 + oneRowDown] === 0 &&\n              processingFlags[index0 + twoRowsDown] === 0 &&\n              processingFlags[index0 + threeRowsDown] === 0 &&\n              neighborsSignificance[index0] === 0 &&\n              neighborsSignificance[index0 + oneRowDown] === 0 &&\n              neighborsSignificance[index0 + twoRowsDown] === 0 &&\n              neighborsSignificance[index0 + threeRowsDown] === 0);\n            var i1 = 0, index = index0;\n            var i = i0, sign;\n            if (allEmpty) {\n              var hasSignificantCoefficent =\n                decoder.readBit(contexts, RUNLENGTH_CONTEXT);\n              if (!hasSignificantCoefficent) {\n                bitsDecoded[index0]++;\n                bitsDecoded[index0 + oneRowDown]++;\n                bitsDecoded[index0 + twoRowsDown]++;\n                bitsDecoded[index0 + threeRowsDown]++;\n                continue; // next column\n              }\n              i1 = (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |\n                    decoder.readBit(contexts, UNIFORM_CONTEXT);\n              if (i1 !== 0) {\n                i = i0 + i1;\n                index += i1 * width;\n              }\n\n              sign = this.decodeSignBit(i, j, index);\n              coefficentsSign[index] = sign;\n              coefficentsMagnitude[index] = 1;\n              this.setNeighborsSignificance(i, j, index);\n              processingFlags[index] |= firstMagnitudeBitMask;\n\n              index = index0;\n              for (var i2 = i0; i2 <= i; i2++, index += width) {\n                bitsDecoded[index]++;\n              }\n\n              i1++;\n            }\n            for (i = i0 + i1; i < iNext; i++, index += width) {\n              if (coefficentsMagnitude[index] ||\n                (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n              if (decision === 1) {\n                sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n              bitsDecoded[index]++;\n            }\n          }\n        }\n      },\n      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {\n        var decoder = this.decoder;\n        var contexts = this.contexts;\n        var symbol = (decoder.readBit(contexts, UNIFORM_CONTEXT) << 3) |\n                     (decoder.readBit(contexts, UNIFORM_CONTEXT) << 2) |\n                     (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |\n                      decoder.readBit(contexts, UNIFORM_CONTEXT);\n        if (symbol !== 0xA) {\n          throw new Error('JPX Error: Invalid segmentation symbol');\n        }\n      }\n    };\n\n    return BitModel;\n  })();\n\n  // Section F, Discrete wavelet transformation\n  var Transform = (function TransformClosure() {\n    function Transform() {}\n\n    Transform.prototype.calculate =\n      function transformCalculate(subbands, u0, v0) {\n      var ll = subbands[0];\n      for (var i = 1, ii = subbands.length; i < ii; i++) {\n        ll = this.iterate(ll, subbands[i], u0, v0);\n      }\n      return ll;\n    };\n    Transform.prototype.extend = function extend(buffer, offset, size) {\n      // Section F.3.7 extending... using max extension of 4\n      var i1 = offset - 1, j1 = offset + 1;\n      var i2 = offset + size - 2, j2 = offset + size;\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1] = buffer[j1];\n      buffer[j2] = buffer[i2];\n    };\n    Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh,\n                                                             u0, v0) {\n      var llWidth = ll.width, llHeight = ll.height, llItems = ll.items;\n      var width = hl_lh_hh.width;\n      var height = hl_lh_hh.height;\n      var items = hl_lh_hh.items;\n      var i, j, k, l, u, v;\n\n      // Interleave LL according to Section F.3.3\n      for (k = 0, i = 0; i < llHeight; i++) {\n        l = i * 2 * width;\n        for (j = 0; j < llWidth; j++, k++, l += 2) {\n          items[l] = llItems[k];\n        }\n      }\n      // The LL band is not needed anymore.\n      llItems = ll.items = null;\n\n      var bufferPadding = 4;\n      var rowBuffer = new Float32Array(width + 2 * bufferPadding);\n\n      // Section F.3.4 HOR_SR\n      if (width === 1) {\n        // if width = 1, when u0 even keep items as is, when odd divide by 2\n        if ((u0 & 1) !== 0) {\n          for (v = 0, k = 0; v < height; v++, k += width) {\n            items[k] *= 0.5;\n          }\n        }\n      } else {\n        for (v = 0, k = 0; v < height; v++, k += width) {\n          rowBuffer.set(items.subarray(k, k + width), bufferPadding);\n\n          this.extend(rowBuffer, bufferPadding, width);\n          this.filter(rowBuffer, bufferPadding, width);\n\n          items.set(\n            rowBuffer.subarray(bufferPadding, bufferPadding + width),\n            k);\n        }\n      }\n\n      // Accesses to the items array can take long, because it may not fit into\n      // CPU cache and has to be fetched from main memory. Since subsequent\n      // accesses to the items array are not local when reading columns, we\n      // have a cache miss every time. To reduce cache misses, get up to\n      // 'numBuffers' items at a time and store them into the individual\n      // buffers. The colBuffers should be small enough to fit into CPU cache.\n      var numBuffers = 16;\n      var colBuffers = [];\n      for (i = 0; i < numBuffers; i++) {\n        colBuffers.push(new Float32Array(height + 2 * bufferPadding));\n      }\n      var b, currentBuffer = 0;\n      ll = bufferPadding + height;\n\n      // Section F.3.5 VER_SR\n      if (height === 1) {\n          // if height = 1, when v0 even keep items as is, when odd divide by 2\n        if ((v0 & 1) !== 0) {\n          for (u = 0; u < width; u++) {\n            items[u] *= 0.5;\n          }\n        }\n      } else {\n        for (u = 0; u < width; u++) {\n          // if we ran out of buffers, copy several image columns at once\n          if (currentBuffer === 0) {\n            numBuffers = Math.min(width - u, numBuffers);\n            for (k = u, l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                colBuffers[b][l] = items[k + b];\n              }\n            }\n            currentBuffer = numBuffers;\n          }\n\n          currentBuffer--;\n          var buffer = colBuffers[currentBuffer];\n          this.extend(buffer, bufferPadding, height);\n          this.filter(buffer, bufferPadding, height);\n\n          // If this is last buffer in this group of buffers, flush all buffers.\n          if (currentBuffer === 0) {\n            k = u - numBuffers + 1;\n            for (l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                items[k + b] = colBuffers[b][l];\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        width: width,\n        height: height,\n        items: items\n      };\n    };\n    return Transform;\n  })();\n\n  // Section 3.8.2 Irreversible 9-7 filter\n  var IrreversibleTransform = (function IrreversibleTransformClosure() {\n    function IrreversibleTransform() {\n      Transform.call(this);\n    }\n\n    IrreversibleTransform.prototype = Object.create(Transform.prototype);\n    IrreversibleTransform.prototype.filter =\n      function irreversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n, current, next;\n\n      var alpha = -1.586134342059924;\n      var beta = -0.052980118572961;\n      var gamma = 0.882911075530934;\n      var delta = 0.443506852043971;\n      var K = 1.230174104914001;\n      var K_ = 1 / K;\n\n      // step 1 is combined with step 3\n\n      // step 2\n      j = offset - 3;\n      for (n = len + 4; n--; j += 2) {\n        x[j] *= K_;\n      }\n\n      // step 1 & 3\n      j = offset - 2;\n      current = delta * x[j -1];\n      for (n = len + 3; n--; j += 2) {\n        next = delta * x[j + 1];\n        x[j] = K * x[j] - current - next;\n        if (n--) {\n          j += 2;\n          current = delta * x[j + 1];\n          x[j] = K * x[j] - current - next;\n        } else {\n          break;\n        }\n      }\n\n      // step 4\n      j = offset - 1;\n      current = gamma * x[j - 1];\n      for (n = len + 2; n--; j += 2) {\n        next = gamma * x[j + 1];\n        x[j] -= current + next;\n        if (n--) {\n          j += 2;\n          current = gamma * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      // step 5\n      j = offset;\n      current = beta * x[j - 1];\n      for (n = len + 1; n--; j += 2) {\n        next = beta * x[j + 1];\n        x[j] -= current + next;\n        if (n--) {\n          j += 2;\n          current = beta * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      // step 6\n      if (len !== 0) {\n        j = offset + 1;\n        current = alpha * x[j - 1];\n        for (n = len; n--; j += 2) {\n          next = alpha * x[j + 1];\n          x[j] -= current + next;\n          if (n--) {\n            j += 2;\n            current = alpha * x[j + 1];\n            x[j] -= current + next;\n          } else {\n            break;\n          }\n        }\n      }\n    };\n\n    return IrreversibleTransform;\n  })();\n\n  // Section 3.8.1 Reversible 5-3 filter\n  var ReversibleTransform = (function ReversibleTransformClosure() {\n    function ReversibleTransform() {\n      Transform.call(this);\n    }\n\n    ReversibleTransform.prototype = Object.create(Transform.prototype);\n    ReversibleTransform.prototype.filter =\n      function reversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n;\n\n      for (j = offset, n = len + 1; n--; j += 2) {\n        x[j] -= (x[j - 1] + x[j + 1] + 2) >> 2;\n      }\n\n      for (j = offset + 1, n = len; n--; j += 2) {\n        x[j] += (x[j - 1] + x[j + 1]) >> 1;\n      }\n    };\n\n    return ReversibleTransform;\n  })();\n\n  return JpxImage;\n})();\n\n\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\n/* This class implements the QM Coder decoding as defined in\n *   JPEG 2000 Part I Final Committee Draft Version 1.0\n *   Annex C.3 Arithmetic decoding procedure \n * available at http://www.jpeg.org/public/fcd15444-1.pdf\n * \n * The arithmetic decoder is used in conjunction with context models to decode\n * JPEG2000 and JBIG2 streams.\n */\nvar ArithmeticDecoder = (function ArithmeticDecoderClosure() {\n  // Table C-2\n  var QeTable = [\n    {qe: 0x5601, nmps: 1, nlps: 1, switchFlag: 1},\n    {qe: 0x3401, nmps: 2, nlps: 6, switchFlag: 0},\n    {qe: 0x1801, nmps: 3, nlps: 9, switchFlag: 0},\n    {qe: 0x0AC1, nmps: 4, nlps: 12, switchFlag: 0},\n    {qe: 0x0521, nmps: 5, nlps: 29, switchFlag: 0},\n    {qe: 0x0221, nmps: 38, nlps: 33, switchFlag: 0},\n    {qe: 0x5601, nmps: 7, nlps: 6, switchFlag: 1},\n    {qe: 0x5401, nmps: 8, nlps: 14, switchFlag: 0},\n    {qe: 0x4801, nmps: 9, nlps: 14, switchFlag: 0},\n    {qe: 0x3801, nmps: 10, nlps: 14, switchFlag: 0},\n    {qe: 0x3001, nmps: 11, nlps: 17, switchFlag: 0},\n    {qe: 0x2401, nmps: 12, nlps: 18, switchFlag: 0},\n    {qe: 0x1C01, nmps: 13, nlps: 20, switchFlag: 0},\n    {qe: 0x1601, nmps: 29, nlps: 21, switchFlag: 0},\n    {qe: 0x5601, nmps: 15, nlps: 14, switchFlag: 1},\n    {qe: 0x5401, nmps: 16, nlps: 14, switchFlag: 0},\n    {qe: 0x5101, nmps: 17, nlps: 15, switchFlag: 0},\n    {qe: 0x4801, nmps: 18, nlps: 16, switchFlag: 0},\n    {qe: 0x3801, nmps: 19, nlps: 17, switchFlag: 0},\n    {qe: 0x3401, nmps: 20, nlps: 18, switchFlag: 0},\n    {qe: 0x3001, nmps: 21, nlps: 19, switchFlag: 0},\n    {qe: 0x2801, nmps: 22, nlps: 19, switchFlag: 0},\n    {qe: 0x2401, nmps: 23, nlps: 20, switchFlag: 0},\n    {qe: 0x2201, nmps: 24, nlps: 21, switchFlag: 0},\n    {qe: 0x1C01, nmps: 25, nlps: 22, switchFlag: 0},\n    {qe: 0x1801, nmps: 26, nlps: 23, switchFlag: 0},\n    {qe: 0x1601, nmps: 27, nlps: 24, switchFlag: 0},\n    {qe: 0x1401, nmps: 28, nlps: 25, switchFlag: 0},\n    {qe: 0x1201, nmps: 29, nlps: 26, switchFlag: 0},\n    {qe: 0x1101, nmps: 30, nlps: 27, switchFlag: 0},\n    {qe: 0x0AC1, nmps: 31, nlps: 28, switchFlag: 0},\n    {qe: 0x09C1, nmps: 32, nlps: 29, switchFlag: 0},\n    {qe: 0x08A1, nmps: 33, nlps: 30, switchFlag: 0},\n    {qe: 0x0521, nmps: 34, nlps: 31, switchFlag: 0},\n    {qe: 0x0441, nmps: 35, nlps: 32, switchFlag: 0},\n    {qe: 0x02A1, nmps: 36, nlps: 33, switchFlag: 0},\n    {qe: 0x0221, nmps: 37, nlps: 34, switchFlag: 0},\n    {qe: 0x0141, nmps: 38, nlps: 35, switchFlag: 0},\n    {qe: 0x0111, nmps: 39, nlps: 36, switchFlag: 0},\n    {qe: 0x0085, nmps: 40, nlps: 37, switchFlag: 0},\n    {qe: 0x0049, nmps: 41, nlps: 38, switchFlag: 0},\n    {qe: 0x0025, nmps: 42, nlps: 39, switchFlag: 0},\n    {qe: 0x0015, nmps: 43, nlps: 40, switchFlag: 0},\n    {qe: 0x0009, nmps: 44, nlps: 41, switchFlag: 0},\n    {qe: 0x0005, nmps: 45, nlps: 42, switchFlag: 0},\n    {qe: 0x0001, nmps: 45, nlps: 43, switchFlag: 0},\n    {qe: 0x5601, nmps: 46, nlps: 46, switchFlag: 0}\n  ];\n\n  // C.3.5 Initialisation of the decoder (INITDEC)\n  function ArithmeticDecoder(data, start, end) {\n    this.data = data;\n    this.bp = start;\n    this.dataEnd = end;\n\n    this.chigh = data[start];\n    this.clow = 0;\n\n    this.byteIn();\n\n    this.chigh = ((this.chigh << 7) & 0xFFFF) | ((this.clow >> 9) & 0x7F);\n    this.clow = (this.clow << 7) & 0xFFFF;\n    this.ct -= 7;\n    this.a = 0x8000;\n  }\n\n  ArithmeticDecoder.prototype = {\n    // C.3.4 Compressed data input (BYTEIN)\n    byteIn: function ArithmeticDecoder_byteIn() {\n      var data = this.data;\n      var bp = this.bp;\n      if (data[bp] === 0xFF) {\n        var b1 = data[bp + 1];\n        if (b1 > 0x8F) {\n          this.clow += 0xFF00;\n          this.ct = 8;\n        } else {\n          bp++;\n          this.clow += (data[bp] << 9);\n          this.ct = 7;\n          this.bp = bp;\n        }\n      } else {\n        bp++;\n        this.clow += bp < this.dataEnd ? (data[bp] << 8) : 0xFF00;\n        this.ct = 8;\n        this.bp = bp;\n      }\n      if (this.clow > 0xFFFF) {\n        this.chigh += (this.clow >> 16);\n        this.clow &= 0xFFFF;\n      }\n    },\n    // C.3.2 Decoding a decision (DECODE)\n    readBit: function ArithmeticDecoder_readBit(contexts, pos) {\n      // contexts are packed into 1 byte:\n      // highest 7 bits carry cx.index, lowest bit carries cx.mps\n      var cx_index = contexts[pos] >> 1, cx_mps = contexts[pos] & 1;\n      var qeTableIcx = QeTable[cx_index];\n      var qeIcx = qeTableIcx.qe;\n      var d;\n      var a = this.a - qeIcx;\n\n      if (this.chigh < qeIcx) {\n        // exchangeLps\n        if (a < qeIcx) {\n          a = qeIcx;\n          d = cx_mps;\n          cx_index = qeTableIcx.nmps;\n        } else {\n          a = qeIcx;\n          d = 1 ^ cx_mps;\n          if (qeTableIcx.switchFlag === 1) {\n            cx_mps = d;\n          }\n          cx_index = qeTableIcx.nlps;\n        }\n      } else {\n        this.chigh -= qeIcx;\n        if ((a & 0x8000) !== 0) {\n          this.a = a;\n          return cx_mps;\n        }\n        // exchangeMps\n        if (a < qeIcx) {\n          d = 1 ^ cx_mps;\n          if (qeTableIcx.switchFlag === 1) {\n            cx_mps = d;\n          }\n          cx_index = qeTableIcx.nlps;\n        } else {\n          d = cx_mps;\n          cx_index = qeTableIcx.nmps;\n        }\n      }\n      // C.3.3 renormD;\n      do {\n        if (this.ct === 0) {\n          this.byteIn();\n        }\n\n        a <<= 1;\n        this.chigh = ((this.chigh << 1) & 0xFFFF) | ((this.clow >> 15) & 1);\n        this.clow = (this.clow << 1) & 0xFFFF;\n        this.ct--;\n      } while ((a & 0x8000) === 0);\n      this.a = a;\n\n      contexts[pos] = cx_index << 1 | cx_mps;\n      return d;\n    }\n  };\n\n  return ArithmeticDecoder;\n})();\n\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals Cmd, ColorSpace, Dict, MozBlobBuilder, Name, PDFJS, Ref, URL,\n           Promise */\n\n'use strict';\n\nvar globalScope = (typeof window === 'undefined') ? this : window;\n\nvar isWorker = (typeof window === 'undefined');\n\nvar FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\nvar TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4\n};\n\nvar ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3\n};\n\nvar AnnotationType = {\n  WIDGET: 1,\n  TEXT: 2,\n  LINK: 3\n};\n\nvar StreamType = {\n  UNKNOWN: 0,\n  FLATE: 1,\n  LZW: 2,\n  DCT: 3,\n  JPX: 4,\n  JBIG: 5,\n  A85: 6,\n  AHX: 7,\n  CCF: 8,\n  RL: 9\n};\n\nvar FontType = {\n  UNKNOWN: 0,\n  TYPE1: 1,\n  TYPE1C: 2,\n  CIDFONTTYPE0: 3,\n  CIDFONTTYPE0C: 4,\n  TRUETYPE: 5,\n  CIDFONTTYPE2: 6,\n  TYPE3: 7,\n  OPENTYPE: 8,\n  TYPE0: 9,\n  MMTYPE1: 10\n};\n\n// The global PDFJS object exposes the API\n// In production, it will be declared outside a global wrapper\n// In development, it will be declared here\nif (!globalScope.PDFJS) {\n  globalScope.PDFJS = {};\n}\n\nglobalScope.PDFJS.pdfBug = false;\n\nPDFJS.VERBOSITY_LEVELS = {\n  errors: 0,\n  warnings: 1,\n  infos: 5\n};\n\n// All the possible operations for an operator list.\nvar OPS = PDFJS.OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91\n};\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (PDFJS.verbosity >= PDFJS.VERBOSITY_LEVELS.infos) {\n    console.log('Info: ' + msg);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (PDFJS.verbosity >= PDFJS.VERBOSITY_LEVELS.warnings) {\n    console.log('Warning: ' + msg);\n  }\n}\n\n// Fatal errors that should trigger the fallback UI and halt execution by\n// throwing an exception.\nfunction error(msg) {\n  // If multiple arguments were passed, pass them all to the log function.\n  if (arguments.length > 1) {\n    var logArguments = ['Error:'];\n    logArguments.push.apply(logArguments, arguments);\n    console.log.apply(console, logArguments);\n    // Join the arguments into a single string for the lines below.\n    msg = [].join.call(arguments, ' ');\n  } else {\n    console.log('Error: ' + msg);\n  }\n  console.log(backtrace());\n  UnsupportedManager.notify(UNSUPPORTED_FEATURES.unknown);\n  throw new Error(msg);\n}\n\nfunction backtrace() {\n  try {\n    throw new Error();\n  } catch (e) {\n    return e.stack ? e.stack.split('\\n').slice(2).join('\\n') : '';\n  }\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    error(msg);\n  }\n}\n\nvar UNSUPPORTED_FEATURES = PDFJS.UNSUPPORTED_FEATURES = {\n  unknown: 'unknown',\n  forms: 'forms',\n  javaScript: 'javaScript',\n  smask: 'smask',\n  shadingPattern: 'shadingPattern',\n  font: 'font'\n};\n\nvar UnsupportedManager = PDFJS.UnsupportedManager =\n  (function UnsupportedManagerClosure() {\n  var listeners = [];\n  return {\n    listen: function (cb) {\n      listeners.push(cb);\n    },\n    notify: function (featureId) {\n      warn('Unsupported feature \"' + featureId + '\"');\n      for (var i = 0, ii = listeners.length; i < ii; i++) {\n        listeners[i](featureId);\n      }\n    }\n  };\n})();\n\n// Combines two URLs. The baseUrl shall be absolute URL. If the url is an\n// absolute URL, it will be returned as is.\nfunction combineUrl(baseUrl, url) {\n  if (!url) {\n    return baseUrl;\n  }\n  if (/^[a-z][a-z0-9+\\-.]*:/i.test(url)) {\n    return url;\n  }\n  var i;\n  if (url.charAt(0) === '/') {\n    // absolute path\n    i = baseUrl.indexOf('://');\n    if (url.charAt(1) === '/') {\n      ++i;\n    } else {\n      i = baseUrl.indexOf('/', i + 3);\n    }\n    return baseUrl.substring(0, i) + url;\n  } else {\n    // relative path\n    var pathLength = baseUrl.length;\n    i = baseUrl.lastIndexOf('#');\n    pathLength = i >= 0 ? i : pathLength;\n    i = baseUrl.lastIndexOf('?', pathLength);\n    pathLength = i >= 0 ? i : pathLength;\n    var prefixLength = baseUrl.lastIndexOf('/', pathLength);\n    return baseUrl.substring(0, prefixLength + 1) + url;\n  }\n}\n\n// Validates if URL is safe and allowed, e.g. to avoid XSS.\nfunction isValidUrl(url, allowRelative) {\n  if (!url) {\n    return false;\n  }\n  // RFC 3986 (http://tools.ietf.org/html/rfc3986#section-3.1)\n  // scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n  var protocol = /^[a-z][a-z0-9+\\-.]*(?=:)/i.exec(url);\n  if (!protocol) {\n    return allowRelative;\n  }\n  protocol = protocol[0].toLowerCase();\n  switch (protocol) {\n    case 'http':\n    case 'https':\n    case 'ftp':\n    case 'mailto':\n    case 'tel':\n      return true;\n    default:\n      return false;\n  }\n}\nPDFJS.isValidUrl = isValidUrl;\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, { value: value,\n                                     enumerable: true,\n                                     configurable: true,\n                                     writable: false });\n  return value;\n}\nPDFJS.shadow = shadow;\n\nvar PasswordResponses = PDFJS.PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2\n};\n\nvar PasswordException = (function PasswordExceptionClosure() {\n  function PasswordException(msg, code) {\n    this.name = 'PasswordException';\n    this.message = msg;\n    this.code = code;\n  }\n\n  PasswordException.prototype = new Error();\n  PasswordException.constructor = PasswordException;\n\n  return PasswordException;\n})();\nPDFJS.PasswordException = PasswordException;\n\nvar UnknownErrorException = (function UnknownErrorExceptionClosure() {\n  function UnknownErrorException(msg, details) {\n    this.name = 'UnknownErrorException';\n    this.message = msg;\n    this.details = details;\n  }\n\n  UnknownErrorException.prototype = new Error();\n  UnknownErrorException.constructor = UnknownErrorException;\n\n  return UnknownErrorException;\n})();\nPDFJS.UnknownErrorException = UnknownErrorException;\n\nvar InvalidPDFException = (function InvalidPDFExceptionClosure() {\n  function InvalidPDFException(msg) {\n    this.name = 'InvalidPDFException';\n    this.message = msg;\n  }\n\n  InvalidPDFException.prototype = new Error();\n  InvalidPDFException.constructor = InvalidPDFException;\n\n  return InvalidPDFException;\n})();\nPDFJS.InvalidPDFException = InvalidPDFException;\n\nvar MissingPDFException = (function MissingPDFExceptionClosure() {\n  function MissingPDFException(msg) {\n    this.name = 'MissingPDFException';\n    this.message = msg;\n  }\n\n  MissingPDFException.prototype = new Error();\n  MissingPDFException.constructor = MissingPDFException;\n\n  return MissingPDFException;\n})();\nPDFJS.MissingPDFException = MissingPDFException;\n\nvar UnexpectedResponseException =\n    (function UnexpectedResponseExceptionClosure() {\n  function UnexpectedResponseException(msg, status) {\n    this.name = 'UnexpectedResponseException';\n    this.message = msg;\n    this.status = status;\n  }\n\n  UnexpectedResponseException.prototype = new Error();\n  UnexpectedResponseException.constructor = UnexpectedResponseException;\n\n  return UnexpectedResponseException;\n})();\nPDFJS.UnexpectedResponseException = UnexpectedResponseException;\n\nvar NotImplementedException = (function NotImplementedExceptionClosure() {\n  function NotImplementedException(msg) {\n    this.message = msg;\n  }\n\n  NotImplementedException.prototype = new Error();\n  NotImplementedException.prototype.name = 'NotImplementedException';\n  NotImplementedException.constructor = NotImplementedException;\n\n  return NotImplementedException;\n})();\n\nvar MissingDataException = (function MissingDataExceptionClosure() {\n  function MissingDataException(begin, end) {\n    this.begin = begin;\n    this.end = end;\n    this.message = 'Missing data [' + begin + ', ' + end + ')';\n  }\n\n  MissingDataException.prototype = new Error();\n  MissingDataException.prototype.name = 'MissingDataException';\n  MissingDataException.constructor = MissingDataException;\n\n  return MissingDataException;\n})();\n\nvar XRefParseException = (function XRefParseExceptionClosure() {\n  function XRefParseException(msg) {\n    this.message = msg;\n  }\n\n  XRefParseException.prototype = new Error();\n  XRefParseException.prototype.name = 'XRefParseException';\n  XRefParseException.constructor = XRefParseException;\n\n  return XRefParseException;\n})();\n\n\nfunction bytesToString(bytes) {\n  assert(bytes !== null && typeof bytes === 'object' &&\n         bytes.length !== undefined, 'Invalid argument for bytesToString');\n  var length = bytes.length;\n  var MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  var strBuf = [];\n  for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    var chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join('');\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === 'string', 'Invalid argument for stringToBytes');\n  var length = str.length;\n  var bytes = new Uint8Array(length);\n  for (var i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xFF;\n  }\n  return bytes;\n}\n\nfunction string32(value) {\n  return String.fromCharCode((value >> 24) & 0xff, (value >> 16) & 0xff,\n                             (value >> 8) & 0xff, value & 0xff);\n}\n\nfunction log2(x) {\n  var n = 1, i = 0;\n  while (x > n) {\n    n <<= 1;\n    i++;\n  }\n  return i;\n}\n\nfunction readInt8(data, start) {\n  return (data[start] << 24) >> 24;\n}\n\nfunction readUint16(data, offset) {\n  return (data[offset] << 8) | data[offset + 1];\n}\n\nfunction readUint32(data, offset) {\n  return ((data[offset] << 24) | (data[offset + 1] << 16) |\n         (data[offset + 2] << 8) | data[offset + 3]) >>> 0;\n}\n\n// Lazy test the endianness of the platform\n// NOTE: This will be 'true' for simulated TypedArrays\nfunction isLittleEndian() {\n  var buffer8 = new Uint8Array(2);\n  buffer8[0] = 1;\n  var buffer16 = new Uint16Array(buffer8.buffer);\n  return (buffer16[0] === 1);\n}\n\nObject.defineProperty(PDFJS, 'isLittleEndian', {\n  configurable: true,\n  get: function PDFJS_isLittleEndian() {\n    return shadow(PDFJS, 'isLittleEndian', isLittleEndian());\n  }\n});\n\n//#if !(FIREFOX || MOZCENTRAL || B2G || CHROME)\n//// Lazy test if the userAgant support CanvasTypedArrays\nfunction hasCanvasTypedArrays() {\n  var canvas = document.createElement('canvas');\n  canvas.width = canvas.height = 1;\n  var ctx = canvas.getContext('2d');\n  var imageData = ctx.createImageData(1, 1);\n  return (typeof imageData.data.buffer !== 'undefined');\n}\n\nObject.defineProperty(PDFJS, 'hasCanvasTypedArrays', {\n  configurable: true,\n  get: function PDFJS_hasCanvasTypedArrays() {\n    return shadow(PDFJS, 'hasCanvasTypedArrays', hasCanvasTypedArrays());\n  }\n});\n\nvar Uint32ArrayView = (function Uint32ArrayViewClosure() {\n\n  function Uint32ArrayView(buffer, length) {\n    this.buffer = buffer;\n    this.byteLength = buffer.length;\n    this.length = length === undefined ? (this.byteLength >> 2) : length;\n    ensureUint32ArrayViewProps(this.length);\n  }\n  Uint32ArrayView.prototype = Object.create(null);\n\n  var uint32ArrayViewSetters = 0;\n  function createUint32ArrayProp(index) {\n    return {\n      get: function () {\n        var buffer = this.buffer, offset = index << 2;\n        return (buffer[offset] | (buffer[offset + 1] << 8) |\n          (buffer[offset + 2] << 16) | (buffer[offset + 3] << 24)) >>> 0;\n      },\n      set: function (value) {\n        var buffer = this.buffer, offset = index << 2;\n        buffer[offset] = value & 255;\n        buffer[offset + 1] = (value >> 8) & 255;\n        buffer[offset + 2] = (value >> 16) & 255;\n        buffer[offset + 3] = (value >>> 24) & 255;\n      }\n    };\n  }\n\n  function ensureUint32ArrayViewProps(length) {\n    while (uint32ArrayViewSetters < length) {\n      Object.defineProperty(Uint32ArrayView.prototype,\n        uint32ArrayViewSetters,\n        createUint32ArrayProp(uint32ArrayViewSetters));\n      uint32ArrayViewSetters++;\n    }\n  }\n\n  return Uint32ArrayView;\n})();\n//#else\n//PDFJS.hasCanvasTypedArrays = true;\n//#endif\n\nvar IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n\nvar Util = PDFJS.Util = (function UtilClosure() {\n  function Util() {}\n\n  var rgbBuf = ['rgb(', 0, ',', 0, ',', 0, ')'];\n\n  // makeCssRgb() can be called thousands of times. Using |rgbBuf| avoids\n  // creating many intermediate strings.\n  Util.makeCssRgb = function Util_makeCssRgb(r, g, b) {\n    rgbBuf[1] = r;\n    rgbBuf[3] = g;\n    rgbBuf[5] = b;\n    return rgbBuf.join('');\n  };\n\n  // Concatenates two transformation matrices together and returns the result.\n  Util.transform = function Util_transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5]\n    ];\n  };\n\n  // For 2d affine transforms\n  Util.applyTransform = function Util_applyTransform(p, m) {\n    var xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    var yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  };\n\n  Util.applyInverseTransform = function Util_applyInverseTransform(p, m) {\n    var d = m[0] * m[3] - m[1] * m[2];\n    var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  };\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  Util.getAxialAlignedBoundingBox =\n    function Util_getAxialAlignedBoundingBox(r, m) {\n\n    var p1 = Util.applyTransform(r, m);\n    var p2 = Util.applyTransform(r.slice(2, 4), m);\n    var p3 = Util.applyTransform([r[0], r[3]], m);\n    var p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1])\n    ];\n  };\n\n  Util.inverseTransform = function Util_inverseTransform(m) {\n    var d = m[0] * m[3] - m[1] * m[2];\n    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n  };\n\n  // Apply a generic 3d matrix M on a 3-vector v:\n  //   | a b c |   | X |\n  //   | d e f | x | Y |\n  //   | g h i |   | Z |\n  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],\n  // with v as [X,Y,Z]\n  Util.apply3dTransform = function Util_apply3dTransform(m, v) {\n    return [\n      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],\n      m[6] * v[0] + m[7] * v[1] + m[8] * v[2]\n    ];\n  };\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  Util.singularValueDecompose2dScale =\n    function Util_singularValueDecompose2dScale(m) {\n\n    var transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    var a = m[0] * transpose[0] + m[1] * transpose[2];\n    var b = m[0] * transpose[1] + m[1] * transpose[3];\n    var c = m[2] * transpose[0] + m[3] * transpose[2];\n    var d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    var first = (a + d) / 2;\n    var second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;\n    var sx = first + second || 1;\n    var sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  };\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  Util.normalizeRect = function Util_normalizeRect(rect) {\n    var r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  };\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'false'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  Util.intersect = function Util_intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    // Order points along the axes\n    var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare),\n        orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare),\n        result = [];\n\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    // X: first and second points belong to different rectangles?\n    if ((orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||\n        (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])) {\n      // Intersection must be between second and third points\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return false;\n    }\n\n    // Y: first and second points belong to different rectangles?\n    if ((orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||\n        (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])) {\n      // Intersection must be between second and third points\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return false;\n    }\n\n    return result;\n  };\n\n  Util.sign = function Util_sign(num) {\n    return num < 0 ? -1 : 1;\n  };\n\n  Util.appendToArray = function Util_appendToArray(arr1, arr2) {\n    Array.prototype.push.apply(arr1, arr2);\n  };\n\n  Util.prependToArray = function Util_prependToArray(arr1, arr2) {\n    Array.prototype.unshift.apply(arr1, arr2);\n  };\n\n  Util.extendObj = function extendObj(obj1, obj2) {\n    for (var key in obj2) {\n      obj1[key] = obj2[key];\n    }\n  };\n\n  Util.getInheritableProperty = function Util_getInheritableProperty(dict,\n                                                                     name) {\n    while (dict && !dict.has(name)) {\n      dict = dict.get('Parent');\n    }\n    if (!dict) {\n      return null;\n    }\n    return dict.get(name);\n  };\n\n  Util.inherit = function Util_inherit(sub, base, prototype) {\n    sub.prototype = Object.create(base.prototype);\n    sub.prototype.constructor = sub;\n    for (var prop in prototype) {\n      sub.prototype[prop] = prototype[prop];\n    }\n  };\n\n  Util.loadScript = function Util_loadScript(src, callback) {\n    var script = document.createElement('script');\n    var loaded = false;\n    script.setAttribute('src', src);\n    if (callback) {\n      script.onload = function() {\n        if (!loaded) {\n          callback();\n        }\n        loaded = true;\n      };\n    }\n    document.getElementsByTagName('head')[0].appendChild(script);\n  };\n\n  return Util;\n})();\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n * @class\n * @alias PDFJS.PageViewport\n */\nvar PageViewport = PDFJS.PageViewport = (function PageViewportClosure() {\n  /**\n   * @constructor\n   * @private\n   * @param viewBox {Array} xMin, yMin, xMax and yMax coordinates.\n   * @param scale {number} scale of the viewport.\n   * @param rotation {number} rotations of the viewport in degrees.\n   * @param offsetX {number} offset X\n   * @param offsetY {number} offset Y\n   * @param dontFlip {boolean} if true, axis Y will not be flipped.\n   */\n  function PageViewport(viewBox, scale, rotation, offsetX, offsetY, dontFlip) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    var centerX = (viewBox[2] + viewBox[0]) / 2;\n    var centerY = (viewBox[3] + viewBox[1]) / 2;\n    var rotateA, rotateB, rotateC, rotateD;\n    rotation = rotation % 360;\n    rotation = rotation < 0 ? rotation + 360 : rotation;\n    switch (rotation) {\n      case 180:\n        rotateA = -1; rotateB = 0; rotateC = 0; rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0; rotateB = 1; rotateC = 1; rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0; rotateB = -1; rotateC = -1; rotateD = 0;\n        break;\n      //case 0:\n      default:\n        rotateA = 1; rotateB = 0; rotateC = 0; rotateD = -1;\n        break;\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC; rotateD = -rotateD;\n    }\n\n    var offsetCanvasX, offsetCanvasY;\n    var width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY\n    ];\n\n    this.width = width;\n    this.height = height;\n    this.fontScale = scale;\n  }\n  PageViewport.prototype = /** @lends PDFJS.PageViewport.prototype */ {\n    /**\n     * Clones viewport with additional properties.\n     * @param args {Object} (optional) If specified, may contain the 'scale' or\n     * 'rotation' properties to override the corresponding properties in\n     * the cloned viewport.\n     * @returns {PDFJS.PageViewport} Cloned viewport.\n     */\n    clone: function PageViewPort_clone(args) {\n      args = args || {};\n      var scale = 'scale' in args ? args.scale : this.scale;\n      var rotation = 'rotation' in args ? args.rotation : this.rotation;\n      return new PageViewport(this.viewBox.slice(), scale, rotation,\n                              this.offsetX, this.offsetY, args.dontFlip);\n    },\n    /**\n     * Converts PDF point to the viewport coordinates. For examples, useful for\n     * converting PDF location into canvas pixel coordinates.\n     * @param x {number} X coordinate.\n     * @param y {number} Y coordinate.\n     * @returns {Object} Object that contains 'x' and 'y' properties of the\n     * point in the viewport coordinate space.\n     * @see {@link convertToPdfPoint}\n     * @see {@link convertToViewportRectangle}\n     */\n    convertToViewportPoint: function PageViewport_convertToViewportPoint(x, y) {\n      return Util.applyTransform([x, y], this.transform);\n    },\n    /**\n     * Converts PDF rectangle to the viewport coordinates.\n     * @param rect {Array} xMin, yMin, xMax and yMax coordinates.\n     * @returns {Array} Contains corresponding coordinates of the rectangle\n     * in the viewport coordinate space.\n     * @see {@link convertToViewportPoint}\n     */\n    convertToViewportRectangle:\n      function PageViewport_convertToViewportRectangle(rect) {\n      var tl = Util.applyTransform([rect[0], rect[1]], this.transform);\n      var br = Util.applyTransform([rect[2], rect[3]], this.transform);\n      return [tl[0], tl[1], br[0], br[1]];\n    },\n    /**\n     * Converts viewport coordinates to the PDF location. For examples, useful\n     * for converting canvas pixel location into PDF one.\n     * @param x {number} X coordinate.\n     * @param y {number} Y coordinate.\n     * @returns {Object} Object that contains 'x' and 'y' properties of the\n     * point in the PDF coordinate space.\n     * @see {@link convertToViewportPoint}\n     */\n    convertToPdfPoint: function PageViewport_convertToPdfPoint(x, y) {\n      return Util.applyInverseTransform([x, y], this.transform);\n    }\n  };\n  return PageViewport;\n})();\n\nvar PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014,\n  0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C,\n  0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160,\n  0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC\n];\n\nfunction stringToPDFString(str) {\n  var i, n = str.length, strBuf = [];\n  if (str[0] === '\\xFE' && str[1] === '\\xFF') {\n    // UTF16BE BOM\n    for (i = 2; i < n; i += 2) {\n      strBuf.push(String.fromCharCode(\n        (str.charCodeAt(i) << 8) | str.charCodeAt(i + 1)));\n    }\n  } else {\n    for (i = 0; i < n; ++i) {\n      var code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n  return strBuf.join('');\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction isEmptyObj(obj) {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n}\n\nfunction isBool(v) {\n  return typeof v === 'boolean';\n}\n\nfunction isInt(v) {\n  return typeof v === 'number' && ((v | 0) === v);\n}\n\nfunction isNum(v) {\n  return typeof v === 'number';\n}\n\nfunction isString(v) {\n  return typeof v === 'string';\n}\n\nfunction isNull(v) {\n  return v === null;\n}\n\nfunction isName(v) {\n  return v instanceof Name;\n}\n\nfunction isCmd(v, cmd) {\n  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);\n}\n\nfunction isDict(v, type) {\n  if (!(v instanceof Dict)) {\n    return false;\n  }\n  if (!type) {\n    return true;\n  }\n  var dictType = v.get('Type');\n  return isName(dictType) && dictType.name === type;\n}\n\nfunction isArray(v) {\n  return v instanceof Array;\n}\n\nfunction isStream(v) {\n  return typeof v === 'object' && v !== null && v.getBytes !== undefined;\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === 'object' && v !== null && v.byteLength !== undefined;\n}\n\nfunction isRef(v) {\n  return v instanceof Ref;\n}\n\n/**\n * Promise Capability object.\n *\n * @typedef {Object} PromiseCapability\n * @property {Promise} promise - A promise object.\n * @property {function} resolve - Fullfills the promise.\n * @property {function} reject - Rejects the promise.\n */\n\n/**\n * Creates a promise capability object.\n * @alias PDFJS.createPromiseCapability\n *\n * @return {PromiseCapability} A capability object contains:\n * - a Promise, resolve and reject methods.\n */\nfunction createPromiseCapability() {\n  var capability = {};\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = resolve;\n    capability.reject = reject;\n  });\n  return capability;\n}\n\nPDFJS.createPromiseCapability = createPromiseCapability;\n\n/**\n * Polyfill for Promises:\n * The following promise implementation tries to generally implement the\n * Promise/A+ spec. Some notable differences from other promise libaries are:\n * - There currently isn't a seperate deferred and promise object.\n * - Unhandled rejections eventually show an error if they aren't handled.\n *\n * Based off of the work in:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=810490\n */\n(function PromiseClosure() {\n  if (globalScope.Promise) {\n    // Promises existing in the DOM/Worker, checking presence of all/resolve\n    if (typeof globalScope.Promise.all !== 'function') {\n      globalScope.Promise.all = function (iterable) {\n        var count = 0, results = [], resolve, reject;\n        var promise = new globalScope.Promise(function (resolve_, reject_) {\n          resolve = resolve_;\n          reject = reject_;\n        });\n        iterable.forEach(function (p, i) {\n          count++;\n          p.then(function (result) {\n            results[i] = result;\n            count--;\n            if (count === 0) {\n              resolve(results);\n            }\n          }, reject);\n        });\n        if (count === 0) {\n          resolve(results);\n        }\n        return promise;\n      };\n    }\n    if (typeof globalScope.Promise.resolve !== 'function') {\n      globalScope.Promise.resolve = function (value) {\n        return new globalScope.Promise(function (resolve) { resolve(value); });\n      };\n    }\n    if (typeof globalScope.Promise.reject !== 'function') {\n      globalScope.Promise.reject = function (reason) {\n        return new globalScope.Promise(function (resolve, reject) {\n          reject(reason);\n        });\n      };\n    }\n    if (typeof globalScope.Promise.prototype.catch !== 'function') {\n      globalScope.Promise.prototype.catch = function (onReject) {\n        return globalScope.Promise.prototype.then(undefined, onReject);\n      };\n    }\n    return;\n  }\n//#if !MOZCENTRAL\n  var STATUS_PENDING = 0;\n  var STATUS_RESOLVED = 1;\n  var STATUS_REJECTED = 2;\n\n  // In an attempt to avoid silent exceptions, unhandled rejections are\n  // tracked and if they aren't handled in a certain amount of time an\n  // error is logged.\n  var REJECTION_TIMEOUT = 500;\n\n  var HandlerManager = {\n    handlers: [],\n    running: false,\n    unhandledRejections: [],\n    pendingRejectionCheck: false,\n\n    scheduleHandlers: function scheduleHandlers(promise) {\n      if (promise._status === STATUS_PENDING) {\n        return;\n      }\n\n      this.handlers = this.handlers.concat(promise._handlers);\n      promise._handlers = [];\n\n      if (this.running) {\n        return;\n      }\n      this.running = true;\n\n      setTimeout(this.runHandlers.bind(this), 0);\n    },\n\n    runHandlers: function runHandlers() {\n      var RUN_TIMEOUT = 1; // ms\n      var timeoutAt = Date.now() + RUN_TIMEOUT;\n      while (this.handlers.length > 0) {\n        var handler = this.handlers.shift();\n\n        var nextStatus = handler.thisPromise._status;\n        var nextValue = handler.thisPromise._value;\n\n        try {\n          if (nextStatus === STATUS_RESOLVED) {\n            if (typeof handler.onResolve === 'function') {\n              nextValue = handler.onResolve(nextValue);\n            }\n          } else if (typeof handler.onReject === 'function') {\n              nextValue = handler.onReject(nextValue);\n              nextStatus = STATUS_RESOLVED;\n\n              if (handler.thisPromise._unhandledRejection) {\n                this.removeUnhandeledRejection(handler.thisPromise);\n              }\n          }\n        } catch (ex) {\n          nextStatus = STATUS_REJECTED;\n          nextValue = ex;\n        }\n\n        handler.nextPromise._updateStatus(nextStatus, nextValue);\n        if (Date.now() >= timeoutAt) {\n          break;\n        }\n      }\n\n      if (this.handlers.length > 0) {\n        setTimeout(this.runHandlers.bind(this), 0);\n        return;\n      }\n\n      this.running = false;\n    },\n\n    addUnhandledRejection: function addUnhandledRejection(promise) {\n      this.unhandledRejections.push({\n        promise: promise,\n        time: Date.now()\n      });\n      this.scheduleRejectionCheck();\n    },\n\n    removeUnhandeledRejection: function removeUnhandeledRejection(promise) {\n      promise._unhandledRejection = false;\n      for (var i = 0; i < this.unhandledRejections.length; i++) {\n        if (this.unhandledRejections[i].promise === promise) {\n          this.unhandledRejections.splice(i);\n          i--;\n        }\n      }\n    },\n\n    scheduleRejectionCheck: function scheduleRejectionCheck() {\n      if (this.pendingRejectionCheck) {\n        return;\n      }\n      this.pendingRejectionCheck = true;\n      setTimeout(function rejectionCheck() {\n        this.pendingRejectionCheck = false;\n        var now = Date.now();\n        for (var i = 0; i < this.unhandledRejections.length; i++) {\n          if (now - this.unhandledRejections[i].time > REJECTION_TIMEOUT) {\n            var unhandled = this.unhandledRejections[i].promise._value;\n            var msg = 'Unhandled rejection: ' + unhandled;\n            if (unhandled.stack) {\n              msg += '\\n' + unhandled.stack;\n            }\n            warn(msg);\n            this.unhandledRejections.splice(i);\n            i--;\n          }\n        }\n        if (this.unhandledRejections.length) {\n          this.scheduleRejectionCheck();\n        }\n      }.bind(this), REJECTION_TIMEOUT);\n    }\n  };\n\n  function Promise(resolver) {\n    this._status = STATUS_PENDING;\n    this._handlers = [];\n    try {\n      resolver.call(this, this._resolve.bind(this), this._reject.bind(this));\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n  /**\n   * Builds a promise that is resolved when all the passed in promises are\n   * resolved.\n   * @param {array} array of data and/or promises to wait for.\n   * @return {Promise} New dependant promise.\n   */\n  Promise.all = function Promise_all(promises) {\n    var resolveAll, rejectAll;\n    var deferred = new Promise(function (resolve, reject) {\n      resolveAll = resolve;\n      rejectAll = reject;\n    });\n    var unresolved = promises.length;\n    var results = [];\n    if (unresolved === 0) {\n      resolveAll(results);\n      return deferred;\n    }\n    function reject(reason) {\n      if (deferred._status === STATUS_REJECTED) {\n        return;\n      }\n      results = [];\n      rejectAll(reason);\n    }\n    for (var i = 0, ii = promises.length; i < ii; ++i) {\n      var promise = promises[i];\n      var resolve = (function(i) {\n        return function(value) {\n          if (deferred._status === STATUS_REJECTED) {\n            return;\n          }\n          results[i] = value;\n          unresolved--;\n          if (unresolved === 0) {\n            resolveAll(results);\n          }\n        };\n      })(i);\n      if (Promise.isPromise(promise)) {\n        promise.then(resolve, reject);\n      } else {\n        resolve(promise);\n      }\n    }\n    return deferred;\n  };\n\n  /**\n   * Checks if the value is likely a promise (has a 'then' function).\n   * @return {boolean} true if value is thenable\n   */\n  Promise.isPromise = function Promise_isPromise(value) {\n    return value && typeof value.then === 'function';\n  };\n\n  /**\n   * Creates resolved promise\n   * @param value resolve value\n   * @returns {Promise}\n   */\n  Promise.resolve = function Promise_resolve(value) {\n    return new Promise(function (resolve) { resolve(value); });\n  };\n\n  /**\n   * Creates rejected promise\n   * @param reason rejection value\n   * @returns {Promise}\n   */\n  Promise.reject = function Promise_reject(reason) {\n    return new Promise(function (resolve, reject) { reject(reason); });\n  };\n\n  Promise.prototype = {\n    _status: null,\n    _value: null,\n    _handlers: null,\n    _unhandledRejection: null,\n\n    _updateStatus: function Promise__updateStatus(status, value) {\n      if (this._status === STATUS_RESOLVED ||\n          this._status === STATUS_REJECTED) {\n        return;\n      }\n\n      if (status === STATUS_RESOLVED &&\n          Promise.isPromise(value)) {\n        value.then(this._updateStatus.bind(this, STATUS_RESOLVED),\n                   this._updateStatus.bind(this, STATUS_REJECTED));\n        return;\n      }\n\n      this._status = status;\n      this._value = value;\n\n      if (status === STATUS_REJECTED && this._handlers.length === 0) {\n        this._unhandledRejection = true;\n        HandlerManager.addUnhandledRejection(this);\n      }\n\n      HandlerManager.scheduleHandlers(this);\n    },\n\n    _resolve: function Promise_resolve(value) {\n      this._updateStatus(STATUS_RESOLVED, value);\n    },\n\n    _reject: function Promise_reject(reason) {\n      this._updateStatus(STATUS_REJECTED, reason);\n    },\n\n    then: function Promise_then(onResolve, onReject) {\n      var nextPromise = new Promise(function (resolve, reject) {\n        this.resolve = resolve;\n        this.reject = reject;\n      });\n      this._handlers.push({\n        thisPromise: this,\n        onResolve: onResolve,\n        onReject: onReject,\n        nextPromise: nextPromise\n      });\n      HandlerManager.scheduleHandlers(this);\n      return nextPromise;\n    },\n\n    catch: function Promise_catch(onReject) {\n      return this.then(undefined, onReject);\n    }\n  };\n\n  globalScope.Promise = Promise;\n//#else\n//throw new Error('DOM Promise is not present');\n//#endif\n})();\n\nvar StatTimer = (function StatTimerClosure() {\n  function rpad(str, pad, length) {\n    while (str.length < length) {\n      str += pad;\n    }\n    return str;\n  }\n  function StatTimer() {\n    this.started = {};\n    this.times = [];\n    this.enabled = true;\n  }\n  StatTimer.prototype = {\n    time: function StatTimer_time(name) {\n      if (!this.enabled) {\n        return;\n      }\n      if (name in this.started) {\n        warn('Timer is already running for ' + name);\n      }\n      this.started[name] = Date.now();\n    },\n    timeEnd: function StatTimer_timeEnd(name) {\n      if (!this.enabled) {\n        return;\n      }\n      if (!(name in this.started)) {\n        warn('Timer has not been started for ' + name);\n      }\n      this.times.push({\n        'name': name,\n        'start': this.started[name],\n        'end': Date.now()\n      });\n      // Remove timer from started so it can be called again.\n      delete this.started[name];\n    },\n    toString: function StatTimer_toString() {\n      var i, ii;\n      var times = this.times;\n      var out = '';\n      // Find the longest name for padding purposes.\n      var longest = 0;\n      for (i = 0, ii = times.length; i < ii; ++i) {\n        var name = times[i]['name'];\n        if (name.length > longest) {\n          longest = name.length;\n        }\n      }\n      for (i = 0, ii = times.length; i < ii; ++i) {\n        var span = times[i];\n        var duration = span.end - span.start;\n        out += rpad(span['name'], ' ', longest) + ' ' + duration + 'ms\\n';\n      }\n      return out;\n    }\n  };\n  return StatTimer;\n})();\n\nPDFJS.createBlob = function createBlob(data, contentType) {\n  if (typeof Blob !== 'undefined') {\n    return new Blob([data], { type: contentType });\n  }\n  // Blob builder is deprecated in FF14 and removed in FF18.\n  var bb = new MozBlobBuilder();\n  bb.append(data);\n  return bb.getBlob(contentType);\n};\n\nPDFJS.createObjectURL = (function createObjectURLClosure() {\n  // Blob/createObjectURL is not available, falling back to data schema.\n  var digits =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  return function createObjectURL(data, contentType) {\n    if (!PDFJS.disableCreateObjectURL &&\n        typeof URL !== 'undefined' && URL.createObjectURL) {\n      var blob = PDFJS.createBlob(data, contentType);\n      return URL.createObjectURL(blob);\n    }\n\n    var buffer = 'data:' + contentType + ';base64,';\n    for (var i = 0, ii = data.length; i < ii; i += 3) {\n      var b1 = data[i] & 0xFF;\n      var b2 = data[i + 1] & 0xFF;\n      var b3 = data[i + 2] & 0xFF;\n      var d1 = b1 >> 2, d2 = ((b1 & 3) << 4) | (b2 >> 4);\n      var d3 = i + 1 < ii ? ((b2 & 0xF) << 2) | (b3 >> 6) : 64;\n      var d4 = i + 2 < ii ? (b3 & 0x3F) : 64;\n      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n    }\n    return buffer;\n  };\n})();\n\nfunction MessageHandler(name, comObj) {\n  this.name = name;\n  this.comObj = comObj;\n  this.callbackIndex = 1;\n  this.postMessageTransfers = true;\n  var callbacksCapabilities = this.callbacksCapabilities = {};\n  var ah = this.actionHandler = {};\n\n  ah['console_log'] = [function ahConsoleLog(data) {\n    console.log.apply(console, data);\n  }];\n  ah['console_error'] = [function ahConsoleError(data) {\n    console.error.apply(console, data);\n  }];\n  ah['_unsupported_feature'] = [function ah_unsupportedFeature(data) {\n    UnsupportedManager.notify(data);\n  }];\n\n  comObj.onmessage = function messageHandlerComObjOnMessage(event) {\n    var data = event.data;\n    if (data.isReply) {\n      var callbackId = data.callbackId;\n      if (data.callbackId in callbacksCapabilities) {\n        var callback = callbacksCapabilities[callbackId];\n        delete callbacksCapabilities[callbackId];\n        if ('error' in data) {\n          callback.reject(data.error);\n        } else {\n          callback.resolve(data.data);\n        }\n      } else {\n        error('Cannot resolve callback ' + callbackId);\n      }\n    } else if (data.action in ah) {\n      var action = ah[data.action];\n      if (data.callbackId) {\n        Promise.resolve().then(function () {\n          return action[0].call(action[1], data.data);\n        }).then(function (result) {\n          comObj.postMessage({\n            isReply: true,\n            callbackId: data.callbackId,\n            data: result\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            isReply: true,\n            callbackId: data.callbackId,\n            error: reason\n          });\n        });\n      } else {\n        action[0].call(action[1], data.data);\n      }\n    } else {\n      error('Unknown action from worker: ' + data.action);\n    }\n  };\n}\n\nMessageHandler.prototype = {\n  on: function messageHandlerOn(actionName, handler, scope) {\n    var ah = this.actionHandler;\n    if (ah[actionName]) {\n      error('There is already an actionName called \"' + actionName + '\"');\n    }\n    ah[actionName] = [handler, scope];\n  },\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {String} actionName Action to call.\n   * @param {JSON} data JSON data to send.\n   * @param {Array} [transfers] Optional list of transfers/ArrayBuffers\n   */\n  send: function messageHandlerSend(actionName, data, transfers) {\n    var message = {\n      action: actionName,\n      data: data\n    };\n    this.postMessage(message, transfers);\n  },\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that other side will callback with the response.\n   * @param {String} actionName Action to call.\n   * @param {JSON} data JSON data to send.\n   * @param {Array} [transfers] Optional list of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise:\n    function messageHandlerSendWithPromise(actionName, data, transfers) {\n    var callbackId = this.callbackIndex++;\n    var message = {\n      action: actionName,\n      data: data,\n      callbackId: callbackId\n    };\n    var capability = createPromiseCapability();\n    this.callbacksCapabilities[callbackId] = capability;\n    try {\n      this.postMessage(message, transfers);\n    } catch (e) {\n      capability.reject(e);\n    }\n    return capability.promise;\n  },\n  /**\n   * Sends raw message to the comObj.\n   * @private\n   * @param message {Object} Raw message.\n   * @param transfers List of transfers/ArrayBuffers, or undefined.\n   */\n  postMessage: function (message, transfers) {\n    if (transfers && this.postMessageTransfers) {\n      this.comObj.postMessage(message, transfers);\n    } else {\n      this.comObj.postMessage(message);\n    }\n  }\n};\n\nfunction loadJpegStream(id, imageUrl, objs) {\n  var img = new Image();\n  img.onload = (function loadJpegStream_onloadClosure() {\n    objs.resolve(id, img);\n  });\n  img.onerror = (function loadJpegStream_onerrorClosure() {\n    objs.resolve(id, null);\n    warn('Error during JPEG image loading');\n  });\n  img.src = imageUrl;\n}\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = JpxImage;\n}\n},{}],12:[function(require,module,exports){\n/*global module*/\n\n//ftp://medical.nema.org/MEDICAL/Dicom/2014c/output/chtml/part05/sect_6.2.html/\n\n'use strict';\n\n// imports\nvar dicomParser = require('dicom-parser');\nvar jpx = require('./jpx.js');\n\nvar VJS = VJS || {};\nVJS.parsers = VJS.parsers || {};\n\n/**\n * Dicom parser is a combination of utilities to get a VJS image from dicom files.\n *\n * Relies on dcmjs, jquery, HTML5 fetch API, HTML5 promise API.\n *\n * @constructor\n * @class\n * @memberOf VJS.parsers\n * @public\n *\n * @param arrayBuffer {arraybuffer} - List of files to be parsed. It is urls from which\n * VJS.parsers.dicom can pull the data from.\n */\nVJS.parsers.dicom = function(arrayBuffer, id) {\n  /**\n   * @member\n   * @type {arraybuffer}\n   */\n  this._id = id;\n  this._arrayBuffer = arrayBuffer;\n\n  var byteArray = new Uint8Array(arrayBuffer);\n  // window.console.log(byteArray.length);\n\n  // catch error\n  // throw error if any!\n  try {\n    this._dataSet = dicomParser.parseDicom(byteArray);\n  }\n  catch (e) {\n    window.console.log(e);\n    throw 'VJS.parsers.dicom could not parse the dicom';\n  }\n\n  //window.console.log(dicomParser);\n  // window.console.log(this._dataSet);\n  // this.rescaleIntercept(0);\n};\n\nVJS.parsers.dicom.prototype.seriesInstanceUID =  function() {\n  return this._dataSet.string('x0020000e');\n};\n\nVJS.parsers.dicom.prototype.modality =  function() {\n  return this._dataSet.string('x00080060');\n};\n\n// image/frame specific\nVJS.parsers.dicom.prototype.sopInstanceUID =  function() {\n  return this._dataSet.string('x00200018');\n};\n\nVJS.parsers.dicom.prototype.transferSyntaxUID =  function() {\n  return this._dataSet.string('x00020010');\n};\n\nVJS.parsers.dicom.prototype.photometricInterpretation =  function() {\n  return this._dataSet.string('x00280004');\n};\n\nVJS.parsers.dicom.prototype.planarConfiguration =  function() {\n\n  var planarConfiguration = this._dataSet.uint16('x00280006');\n\n  if (typeof planarConfiguration === 'undefined') {\n    planarConfiguration = null;\n  }\n\n  return planarConfiguration;\n};\n\nVJS.parsers.dicom.prototype.samplesPerPixel =  function() {\n  return this._dataSet.uint16('x00280002');\n};\n\nVJS.parsers.dicom.prototype.numberOfFrames =  function() {\n  var numberOfFrames = this._dataSet.intString('x00280008');\n\n  // need something smarter!\n  if (typeof numberOfFrames === 'undefined') {\n    numberOfFrames = null;\n  }\n\n  // make sure we return a number! (not a string!)\n  return numberOfFrames;\n};\n\nVJS.parsers.dicom.prototype.numberOfChannels =  function() {\n  var numberOfChannels = 1;\n  var photometricInterpretation = this.photometricInterpretation();\n\n  if (photometricInterpretation === 'RGB' ||\n            photometricInterpretation === 'PALETTE COLOR' ||\n            photometricInterpretation === 'YBR_FULL' ||\n            photometricInterpretation === 'YBR_FULL_422' ||\n            photometricInterpretation === 'YBR_PARTIAL_422' ||\n            photometricInterpretation === 'YBR_PARTIAL_420' ||\n            photometricInterpretation === 'YBR_RCT') {\n    numberOfChannels = 3;\n  }\n\n  // make sure we return a number! (not a string!)\n  return numberOfChannels;\n};\n\nVJS.parsers.dicom.prototype.imageOrientation =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var imageOrientation = this._dataSet.string('x00200037');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof imageOrientation === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // plane orientation sequence for Nth element in the sequence\n      var planeOrientationSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00209116.items[0].dataSet;\n      imageOrientation = planeOrientationSequence.string('x00200037');\n    } else {\n      // default orientation\n      // should we default to undefined??\n      imageOrientation = null;\n    }\n  }\n\n  // format image orientation ('1\\0\\0\\0\\1\\0') to array containing 6 numbers\n  if (imageOrientation) {\n    // make sure we return a number! (not a string!)\n    // might not need to split (floatString + index)\n    imageOrientation = imageOrientation.split('\\\\').map(Number);\n  }\n\n  return imageOrientation;\n};\n\nVJS.parsers.dicom.prototype.pixelAspectRatio =  function() {\n  var pixelAspectRatio = [\n    this._dataSet.intString('x00280034', 0),\n    this._dataSet.intString('x00280034', 1)\n    ];\n\n  // need something smarter!\n  if (typeof pixelAspectRatio[0] === 'undefined') {\n    pixelAspectRatio = null;\n  }\n\n  // make sure we return a number! (not a string!)\n  return pixelAspectRatio;\n};\n\nVJS.parsers.dicom.prototype.imagePosition =  function(frameIndex) {\n  var imagePosition = null;\n  // first look for frame!\n  // per frame functionnal group sequence\n  var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n  if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n    // plane orientation sequence for Nth element in the sequence\n    var planeOrientationSequence = perFrameFunctionnalGroupSequence\n      .items[frameIndex].dataSet.elements.x00209113.items[0].dataSet;\n    imagePosition = planeOrientationSequence.string('x00200032');\n  } else {\n    // should we default to undefined??\n    // default orientation\n    imagePosition = this._dataSet.string('x00200032');\n\n    if (typeof imagePosition === 'undefined') {\n      imagePosition = null;\n    }\n  }\n\n  // format image orientation ('1\\0\\0\\0\\1\\0') to array containing 6 numbers\n  if (imagePosition) {\n    // make sure we return a number! (not a string!)\n    imagePosition = imagePosition.split('\\\\').map(Number);\n  }\n\n  return imagePosition;\n};\n\nVJS.parsers.dicom.prototype.instanceNumber =  function(frameIndex) {\n  var instanceNumber = null;\n  // first look for frame!\n  // per frame functionnal group sequence\n  var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n  if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n    // plane orientation sequence for Nth element in the sequence\n    // PHILIPS HACK...\n    if (perFrameFunctionnalGroupSequence\n      .items[frameIndex].dataSet.elements.x2005140f) {\n      var planeOrientationSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x2005140f.items[0].dataSet;\n      instanceNumber = planeOrientationSequence.intString('x00200013');\n    } else {\n      instanceNumber = this._dataSet.intString('x00200013');\n\n      if (typeof instanceNumber === 'undefined') {\n        instanceNumber = null;\n      }\n    }\n\n  } else {\n    // should we default to undefined??\n    // default orientation\n    instanceNumber = this._dataSet.intString('x00200013');\n\n    if (typeof instanceNumber === 'undefined') {\n      instanceNumber = null;\n    }\n  }\n\n  return instanceNumber;\n};\n\nVJS.parsers.dicom.prototype.pixelSpacing =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var pixelSpacing = this._dataSet.string('x00280030');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof pixelSpacing === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // plane orientation sequence for Nth element in the sequence\n      var planeOrientationSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289110.items[0].dataSet;\n      pixelSpacing = planeOrientationSequence.string('x00280030');\n    } else {\n      // default orientation\n      pixelSpacing = null;\n    }\n  }\n\n  // format image orientation ('1\\0\\0\\0\\1\\0') to array containing 6 numbers\n  // should we default to undefined??\n  if (pixelSpacing) {\n\n    // make sure we return array of numbers! (not strings!)\n    pixelSpacing = pixelSpacing.split('\\\\').map(Number);\n  }\n  return pixelSpacing;\n};\n\nVJS.parsers.dicom.prototype.sopInstanceUID =  function(frameIndex) {\n  // expect frame index to start at 0!\n\n  // per frame\n  // philips 2005,140f\n  //\n  var sopInstanceUID = this._dataSet.string('x00080018');\n  return sopInstanceUID;\n};\n\nVJS.parsers.dicom.prototype.sliceThickness =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var sliceThickness = this._dataSet.floatString('x00180050');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof sliceThickness === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // plane orientation sequence for Nth element in the sequence\n      var planeOrientationSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289110.items[0].dataSet;\n      sliceThickness = planeOrientationSequence.floatString('x00180050');\n    } else {\n      // default orientation\n      // should we default to undefined??\n      // print warning at least...\n      sliceThickness = null;\n    }\n  }\n\n  return sliceThickness;\n};\n\nVJS.parsers.dicom.prototype.rows =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var rows = this._dataSet.uint16('x00280010');\n\n  if (typeof rows === 'undefined') {\n    rows = null;\n    // print warning at least...\n  }\n\n  return rows;\n};\n\nVJS.parsers.dicom.prototype.columns =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var columns = this._dataSet.uint16('x00280011');\n\n  if (typeof columns === 'undefined') {\n    columns = null;\n    // print warning at least...\n  }\n\n  return columns;\n};\n\nVJS.parsers.dicom.prototype.pixelRepresentation =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var pixelRepresentation = this._dataSet.uint16('x00280103');\n  return pixelRepresentation;\n};\n\nVJS.parsers.dicom.prototype.bitsAllocated =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var bitsAllocated = this._dataSet.uint16('x00280100');\n  return bitsAllocated;\n};\n\nVJS.parsers.dicom.prototype.highBit =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var highBit = this._dataSet.uint16('x00280102');\n  return highBit;\n};\n\nVJS.parsers.dicom.prototype.rescaleIntercept =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var rescaleIntercept = this._dataSet.floatString('x00281052');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof rescaleIntercept === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // NOT A PHILIPS TRICK!\n      var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289145.items[0].dataSet;\n      rescaleIntercept = philipsPrivateSequence.floatString('x00281052');\n    } else {\n      // default rescaleIntercept\n      rescaleIntercept = null;\n    }\n  }\n\n  return rescaleIntercept;\n};\n\nVJS.parsers.dicom.prototype.rescaleSlope =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var rescaleSlope = this._dataSet.floatString('x00281053');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof rescaleSlope === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // NOT A PHILIPS TRICK!\n      var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289145.items[0].dataSet;\n      rescaleSlope = philipsPrivateSequence.floatString('x00281052');\n    } else {\n      // default rescaleSlope\n      rescaleSlope = null;\n    }\n  }\n\n  return rescaleSlope;\n};\n\nVJS.parsers.dicom.prototype.windowCenter =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var windowCenter = this._dataSet.floatString('x00281050');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof windowCenter === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // NOT A PHILIPS TRICK!.\n      var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289132.items[0].dataSet;\n      windowCenter = philipsPrivateSequence.floatString('x00281050');\n    } else {\n      // default windowCenter\n      // print warning at least...\n      windowCenter = null;\n    }\n  }\n\n  return windowCenter;\n};\n\nVJS.parsers.dicom.prototype.windowWidth =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var windowWidth = this._dataSet.floatString('x00281051');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof windowWidth === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // NOT A PHILIPS TRICK!\n      var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289132.items[0].dataSet;\n      windowWidth = philipsPrivateSequence.floatString('x00281051');\n    } else {\n      // default windowWidth\n      // print warning at least...\n      windowWidth = null;\n    }\n  }\n  return windowWidth;\n};\n\nVJS.parsers.dicom.prototype.dimensionIndexValues =  function(frameIndex) {\n  var dimensionIndexValues = [];\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group sequence\n  var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n  if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n    // NOT A PHILIPS TRICK!\n    var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n      .items[frameIndex].dataSet.elements.x00209111.items[0].dataSet;\n    var element = philipsPrivateSequence.elements.x00209157;\n    // /4 because UL\n    var nbValues = element.length / 4;\n    for (var i = 0; i < nbValues; i++) {\n      dimensionIndexValues.push(philipsPrivateSequence.uint32('x00209157', i));\n    }\n  } else {\n    dimensionIndexValues = null;\n  }\n\n  return dimensionIndexValues;\n};\n\nVJS.parsers.dicom.prototype.inStackPositionNumber =  function(frameIndex) {\n  var inStackPositionNumber = null;\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group sequence\n  var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n  if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n    // NOT A PHILIPS TRICK!\n    var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n      .items[frameIndex].dataSet.elements.x00209111.items[0].dataSet;\n    inStackPositionNumber = philipsPrivateSequence.uint32('x00209057');\n  } else {\n    inStackPositionNumber = null;\n  }\n\n  return inStackPositionNumber;\n};\n\nVJS.parsers.dicom.prototype.stackID =  function(frameIndex) {\n  var stackID = null;\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group sequence\n  var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n  if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n    // NOT A PHILIPS TRICK!\n    var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n      .items[frameIndex].dataSet.elements.x00209111.items[0].dataSet;\n    stackID = philipsPrivateSequence.intString('x00209056');\n  } else {\n    stackID = null;\n  }\n\n  return stackID;\n};\n\nVJS.parsers.dicom.prototype.decompressPixelData =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var dPixelData = [];\n  // http://www.dicomlibrary.com/dicom/transfer-syntax/\n  var transferSyntaxUID = this.transferSyntaxUID();\n\n  // find compression scheme\n  if (transferSyntaxUID === '1.2.840.10008.1.2.4.90' ||  // JPEG 2000 lossless\n      transferSyntaxUID === '1.2.840.10008.1.2.4.91') {  // JPEG 2000 lossy\n    //window.console.log('JPG2000 in action!');\n    // window.console.log(this._dataSet);\n    //window.console.log(dicomParser);\n    //window.console.log(this._dataSet.elements);\n    var compressedPixelData = dicomParser.readEncapsulatedPixelData(this._dataSet, this._dataSet.elements.x7fe00010, frameIndex);\n    // var pixelDataElement = this._dataSet.elements.x7fe00010;\n    // var pixelData = new Uint8Array(this._dataSet.byteArray.buffer, pixelDataElement.dataOffset, pixelDataElement.length);\n    var jpxImage = new jpx();\n    // https://github.com/OHIF/image-JPEG2000/issues/6\n    // It currently returns either Int16 or Uint16 based on whether the codestream is signed or not.\n    jpxImage.parse(compressedPixelData);\n\n    // var j2kWidth = jpxImage.width;\n    // var j2kHeight = jpxImage.height;\n\n    var componentsCount = jpxImage.componentsCount;\n    if (componentsCount !== 1) {\n      throw 'JPEG2000 decoder returned a componentCount of ' + componentsCount + ', when 1 is expected';\n    }\n    var tileCount = jpxImage.tiles.length;\n    if (tileCount !== 1) {\n      throw 'JPEG2000 decoder returned a tileCount of ' + tileCount + ', when 1 is expected';\n    }\n    var tileComponents = jpxImage.tiles[0];\n    var pixelData = tileComponents.items;\n\n    // window.console.log(j2kWidth, j2kHeight);\n\n    return pixelData;\n  }\n\n  return dPixelData;\n};\n\nVJS.parsers.dicom.prototype.extractPixelData =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var ePixelData = null;\n\n  // if compressed..?\n  var transferSyntaxUID = this.transferSyntaxUID();\n\n  // find compression scheme\n  if (transferSyntaxUID === '1.2.840.10008.1.2.4.90' ||  // JPEG 2000 lossless\n      transferSyntaxUID === '1.2.840.10008.1.2.4.91') {\n    // which format\n    return this.decompressPixelData(frameIndex);\n  }\n\n  // else\n  // ned to guess pixel format to know if uint8, unit16 or int16\n  // Note - we may want to sanity check the rows * columns * bitsAllocated * samplesPerPixel against the buffer size\n  var pixelRepresentation = this.pixelRepresentation(frameIndex);\n  var bitsAllocated = this.bitsAllocated(frameIndex);\n  var pixelDataElement = this._dataSet.elements.x7fe00010;\n  var pixelDataOffset = pixelDataElement.dataOffset;\n  var numberOfChannels  = this.numberOfChannels();\n  var numPixels = this.rows(frameIndex) * this.columns(frameIndex) * numberOfChannels;\n  var frameOffset = 0;\n\n  if (numberOfChannels === 1) {\n    if (pixelRepresentation === 0 && bitsAllocated === 8) {\n\n      // unsigned 8 bit\n      frameOffset = pixelDataOffset + frameIndex * numPixels;\n      ePixelData =  new Uint8Array(this._dataSet.byteArray.buffer, frameOffset, numPixels);\n\n    } else if (pixelRepresentation === 0 && bitsAllocated === 16) {\n\n      // unsigned 16 bit\n      frameOffset = pixelDataOffset + frameIndex * numPixels * 2;\n      ePixelData = new Uint16Array(this._dataSet.byteArray.buffer, frameOffset, numPixels);\n\n    } else if (pixelRepresentation === 1 && bitsAllocated === 16) {\n\n      // signed 16 bit\n      frameOffset = pixelDataOffset + frameIndex * numPixels * 2;\n      ePixelData = new Int16Array(this._dataSet.byteArray.buffer, frameOffset, numPixels);\n\n    }\n  } else {\n    // ASSUME RGB 8 BITS SIGNED!\n    frameOffset = pixelDataOffset + frameIndex * numPixels;\n    var encodedPixelData = new Uint8Array(this._dataSet.byteArray.buffer, frameOffset, numPixels);\n    var photometricInterpretation = this.photometricInterpretation();\n\n    if (photometricInterpretation === 'RGB') {\n      // ALL GOOD, ALREADY ORDERED\n      ePixelData = encodedPixelData;\n\n    } else if (photometricInterpretation === 'YBR_FULL') {\n      ePixelData = new Uint8Array(numPixels);\n      // https://github.com/chafey/cornerstoneWADOImageLoader/blob/master/src/decodeYBRFull.js\n      var nPixels = numPixels / 3;\n      var ybrIndex = 0;\n      var rgbaIndex = 0;\n      for (var i = 0; i < nPixels; i++) {\n        var y = encodedPixelData[ybrIndex++];\n        var cb = encodedPixelData[ybrIndex++];\n        var cr = encodedPixelData[ybrIndex++];\n        ePixelData[rgbaIndex++] = y + 1.40200 * (cr - 128);// red\n        ePixelData[rgbaIndex++] = y - 0.34414 * (cb - 128) - 0.71414 * (cr - 128); // green\n        ePixelData[rgbaIndex++] = y + 1.77200 * (cb - 128); // blue\n        ePixelData[rgbaIndex++] = 255; //alpha\n      }\n    } else {\n      window.console.log('photometric interpolation not supported: ' + photometricInterpretation);\n    }\n\n  }\n\n  return ePixelData;\n};\n\nVJS.parsers.dicom.prototype.minMaxPixelData =  function(pixelData) {\n\n  var minMax = [65535, -32768];\n  var numPixels = pixelData.length;\n  for (var index = 0; index < numPixels; index++) {\n    var spv = pixelData[index];\n\n    //apply rescale/intercept\n    // var rSlope = this.rescaleSlope(0);\n    // var rIntercept = this.rescaleIntercept(0);\n    // var rpv = spv * rSlope + rIntercept;\n\n    // apply window/level\n    // var wWidth = this.windowWidth(0);\n    // var wCenter = this.windowCenter(0);\n    // var wpv = rpv;\n    // if( wpv < wCenter - wWidth/2){\n    //   wpv = wCenter - wWidth/2;\n    // }\n    // else if( wpv > wCenter + wWidth/2){\n    //   wpv = wCenter + wWidth/2;\n    // }\n\n    minMax[0] = Math.min(minMax[0], spv);\n    minMax[1] = Math.max(minMax[1], spv);\n  }\n\n  return minMax;\n};\n\n// VJS.parsers.dicom.prototype.frameOfReferenceUID = function(imageJqueryDom) {\n//   // try to access frame of reference UID through its DICOM tag\n//   var seriesNumber = imageJqueryDom.find('[tag=\"00200052\"] Value').text();\n\n//   // if not available, assume we only have 1 frame\n//   if (seriesNumber === '') {\n//     seriesNumber = 1;\n//   }\n//   return seriesNumber;\n// };\n\n//\n// ENDIAN NESS NOT TAKEN CARE OF\n// http://stackoverflow.com/questions/5320439/how-do-i-swap-endian-ness-byte-order-of-a-variable-in-javascript\n// http://www.barre.nom.fr/medical/samples/\n//\n//\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n  module.exports = VJS.parsers.dicom;\n}\n\n},{\"./jpx.js\":11,\"dicom-parser\":2}],13:[function(require,module,exports){\n'use strict';\n\nvar VJS = VJS || {};\nVJS.shaders = VJS.shaders || {};\n\n/**\n *\n * Custom shader for the slice object. Should be a shader directory. We can add this shader to any object...\n * @member\n *\n */\n\nVJS.shaders.data = {\n\n  /* -------------------------------------------------------------------------\n  //  Slice shader\n  // features:\n  //\n   ------------------------------------------------------------------------- */\n   \n  'parameters': {\n\n    uniforms: {\n      'uTextureSize': {\n        type: 'f',\n        value: 0.0\n      },\n      'uTextureContainer': {\n        type: 'tv',\n        value: null\n      },\n      'uDataDimensions': {\n        type: 'v3',\n        value: new THREE.Vector3()\n      },\n      'uWorldToData': {\n        type: 'm4',\n        value: new THREE.Matrix4()\n      },\n      'uWindowLevel': {\n        type: 'fv1',\n        value: [0.0, 0.0]\n      },\n      'uNumberOfChannels': {\n        type: 'i',\n        value: 1\n      },\n      'uBitsAllocated': {\n        type: 'i',\n        value: 8\n      },\n      'uInvert': {\n        type: 'i',\n        value: 0\n      },\n      'uLut': {\n        type: 'i',\n        value: 0\n      },\n      'uLutI': {\n        type: 'fv1',\n        value: [0.0]\n      },\n      'uLutR': {\n        type: 'fv1',\n        value: [0.0]\n      },\n      'uLutG': {\n        type: 'fv1',\n        value: [0.0]\n      },\n      'uLutB': {\n        type: 'fv1',\n        value: [0.0]\n      }\n    }\n\n  }\n\n};\n\nmodule.exports = VJS.shaders.data;\n\n},{}],14:[function(require,module,exports){\n'use strict';\n\nvar VJS = VJS || {};\nVJS.widgets = VJS.widgets || {};\n\n/**\n *\n * It is typically used to get information about an image from the mouse cursor.\n *\n * Demo: {@link https://fnndsc.github.io/vjs#widget_pixelProbe}\n *\n * @constructor\n * @class\n * @memberOf VJS.widgets\n * @public\n *\n */\nVJS.widgets.pixelProbe = function(image, imageMeshes) {\n    // it is an object 3D that we can add to the scene :)\n    THREE.Object3D.call(this);\n\n    this.domElement = null;\n    this.rasContainer = null;\n    this.ijkContainer = null;\n    this.valueContainer = null;\n\n    this.imageMeshes = imageMeshes;\n    this.image = image;\n\n    this.volumeCore = null;\n\n    this.marks = [];\n\n    this.createDomElement();\n\n    this._worldCoordinate = null; //LPS\n    this._dataCoordinate = null; //IJK\n    this._dataValue = null; //\n    this._labelValue = null; //\n};\n\nVJS.widgets.pixelProbe.prototype = Object.create(THREE.Object3D.prototype);\nVJS.widgets.pixelProbe.prototype.constructor = VJS.widgets.pixelProbe;\n\nVJS.widgets.pixelProbe.prototype.createDomElement = function() {\n\n    // RAS\n    this.rasContainer = document.createElement('div');\n    this.rasContainer.setAttribute('id', 'VJSProbeRAS');\n\n    // IJK\n    this.ijkContainer = document.createElement('div');\n    this.ijkContainer.setAttribute('id', 'VJSProbeIJK');\n\n    // Value\n    this.valueContainer = document.createElement('div');\n    this.valueContainer.setAttribute('id', 'VJSProbeValue');\n\n    this.domElement = document.createElement('div');\n    this.domElement.setAttribute('id', 'VJSProbe');\n    this.domElement.appendChild(this.rasContainer);\n    this.domElement.appendChild(this.ijkContainer);\n    this.domElement.appendChild(this.valueContainer);\n};\n\nVJS.widgets.pixelProbe.prototype.computeValues = function() {\n    // convert point to IJK\n    if (this.image) {\n        var worldToData = this.image._stack[0]._lps2IJK;\n\n        var dataCoordinate = new THREE.Vector3().copy(this._worldCoordinate).applyMatrix4(worldToData);\n        var temp = dataCoordinate.clone();\n\n        // same rounding in the shaders\n        dataCoordinate.x = Math.floor(dataCoordinate.x + 0.5);\n        dataCoordinate.y = Math.floor(dataCoordinate.y + 0.5);\n        dataCoordinate.z = Math.floor(dataCoordinate.z + 0.5);\n        this._dataCoordinate = dataCoordinate;\n\n        if (dataCoordinate.x >= 0 &&\n            dataCoordinate.y >= 0 &&\n            dataCoordinate.z >= 0) {\n            // var textureSize = this.image._stack[0]._textureSize;\n            var rows = this.image._stack[0]._rows;\n            var columns = this.image._stack[0]._columns;\n\n            // var index = this._dataCoordinate.x + columns * this._dataCoordinate.y + rows * columns * this._dataCoordinate.z;\n\n            // var textureIndex = Math.floor(index / (textureSize * textureSize));\n            // var inTextureIndex = index % (textureSize * textureSize);\n\n            this._dataValue = this.image._stack[0]._frame[this._dataCoordinate.z]._pixelData[this._dataCoordinate.x + columns * this._dataCoordinate.y];\n        } else {\n            window.console.log('something funny happening in compute value');\n            window.console.log(dataCoordinate);\n            window.console.log(temp);\n        }\n    }\n};\n\nVJS.widgets.pixelProbe.prototype.updateUI = function(mouse) {\n    var rasContent = this._worldCoordinate.x.toFixed(2) + ' : ' + this._worldCoordinate.y.toFixed(2) + ' : ' + this._worldCoordinate.z.toFixed(2);\n    this.rasContainer.innerHTML = 'LPS: ' + rasContent;\n\n    var ijkContent = this._dataCoordinate.x + ' : ' + this._dataCoordinate.y + ' : ' + this._dataCoordinate.z;\n    this.ijkContainer.innerHTML = 'IJK: ' + ijkContent;\n\n    var valueContent = this._dataValue;\n    this.valueContainer.innerHTML = 'Value: ' + valueContent;\n\n    // position of the div...\n    // need a mode to track the mouse\n    document.getElementById('VJSProbe').style.display = 'block';\n    document.getElementById('VJSProbe').style.top = mouse.clientY + 10;\n    document.getElementById('VJSProbe').style.left = mouse.clientX + 10;\n\n};\n\nVJS.widgets.pixelProbe.prototype.update = function(raycaster, mouse, camera, canvas) {\n\n    if (!this.imageMeshes) {\n        return;\n    }\n\n    this.updateMarkDom(raycaster, mouse, camera, canvas);\n\n    // calculate image intersecting the picking ray\n    var intersects = raycaster.intersectObjects(this.imageMeshes);\n\n    for (var intersect in intersects) {\n        var worldCoordinates = new THREE.Vector3().copy(intersects[intersect].point);\n\n        // if we intersect an image with a ShaderMaterial\n        // TODO: review that\n        if (intersects[intersect].object.material.type === 'ShaderMaterial') {\n            this._worldCoordinate = worldCoordinates;\n            // window.console.log(this._worldCoordinate);\n            this.computeValues();\n            this.updateUI(mouse);\n            return;\n        }\n    }\n\n    // hide UI if not intersecting the planne\n    this.hideUI();\n};\n\nVJS.widgets.pixelProbe.prototype.hideUI = function() {\n    document.getElementById('VJSProbe').style.display = 'none';\n};\n\nVJS.widgets.pixelProbe.prototype.mark = function(raycaster, mouse) {\n    // calculate image intersecting against itself (ideally N spheres)\n    // no all good yet, because we can click on Shader Materail and still\n    // intersect another voxel if looking at plane from the side\n    // do we intersect a cube of the probe (in front of the plane not detected yet...)\n    var intersects = raycaster.intersectObjects(this.children);\n    var worldCoordinates = null;\n    // Look for a pixelProbeMark\n    // for (var intersect in intersects) {\n    //   worldCoordinates = new THREE.Vector3().copy(intersects[intersect].point);\n\n    //   // if on a mark, do not do anything\n    //   if (intersects[intersect].object.name === 'pixelProbeMark') {\n    //     window.console.log('intersect pixelProbeMark!');\n\n    //     return null;\n    //   }\n    // }\n\n    // Look for intersection against image\n    window.console.log(this);\n    intersects = raycaster.intersectObjects(this.imageMeshes);\n    for (var intersect2 in intersects) {\n        worldCoordinates = new THREE.Vector3().copy(intersects[intersect2].point);\n\n        // might be better to re-loop\n        // if we intersect an image with a ShaderMaterial\n        // TODO: review that\n        if (intersects[intersect2].object.material.type === 'ShaderMaterial') {\n            window.console.log('intersect shader material!');\n            this._worldCoordinate = worldCoordinates;\n            this.computeValues();\n\n            // make sure this IJK mark is not already shown...\n            for (var i = 0; i < this.marks.length; i++) {\n                if (this.marks[i].ijk.x === this._dataCoordinate.x &&\n                    this.marks[i].ijk.y === this._dataCoordinate.y &&\n                    this.marks[i].ijk.z === this._dataCoordinate.z) {\n                    return;\n                }\n            }\n\n            // create the geometry for it!\n            // var sphereGeometry = new THREE.SphereGeometry(1);\n            // var material = new THREE.MeshBasicMaterial({\n            //     // not selected: amber? #FFC107\n            //     // orange? #FF9800\n            //     // selected: deep orange? #FF5722\n            //     color: 0xFF5722\n            //   });\n            // var sphere = new THREE.Mesh(sphereGeometry, material);\n            // sphere.applyMatrix(new THREE.Matrix4().makeTranslation(\n            //   worldCoordinates.x, worldCoordinates.y, worldCoordinates.z));\n\n            // position against World Voxel Center! Not against the mouse!!\n            var dataToWorld = this.image._stack[0]._ijk2LPS;\n            var worldCenterCoordinate = new THREE.Vector3()\n                .copy(this._dataCoordinate)\n                .applyMatrix4(dataToWorld);\n\n            var voxDataCoord = this._dataCoordinate.clone();\n\n            var voxelGeometry = new THREE.BoxGeometry(1, 1, 1);\n            voxelGeometry.applyMatrix(new THREE.Matrix4().makeTranslation(\n                this._dataCoordinate.x,\n                this._dataCoordinate.y,\n                this._dataCoordinate.z));\n            voxelGeometry.applyMatrix(this.image._stack[0]._ijk2LPS);\n            var voxelMaterial = new THREE.MeshBasicMaterial({\n                wireframe: true,\n                color: 0xFFC107\n            });\n            var voxel = new THREE.Mesh(voxelGeometry, voxelMaterial);\n            // move to world space!\n            // voxel.applyMatrix(new THREE.Matrix4().makeTranslation(\n            //   worldCoordinates.x, worldCoordinates.y, worldCoordinates.z));\n            voxel.name = 'pixelProbeMark';\n            this.add(voxel);\n\n            // store mark\n            var mark = {\n                id: voxel.id,\n                position: worldCenterCoordinate,\n                ijk: voxDataCoord\n            };\n            this.marks.push(mark);\n            window.console.log(this.marks);\n\n            var domElement = this.markDom(mark, mouse);\n\n            return domElement;\n        }\n    }\n};\n\n// do not need mouse in theory...\nVJS.widgets.pixelProbe.prototype.markDom = function(mark, mouse) {\n\n    // that could be a web-component!\n    // RAS\n    var rasContainer = document.createElement('div');\n    rasContainer.setAttribute('class', 'VJSProbeRAS');\n\n    var rasContent = this._worldCoordinate.x.toFixed(2) + ' : ' + this._worldCoordinate.y.toFixed(2) + ' : ' + this._worldCoordinate.z.toFixed(2);\n    rasContainer.innerHTML = 'LPS: ' + rasContent;\n\n    // IJK\n    var ijkContainer = document.createElement('div');\n    ijkContainer.setAttribute('class', 'VJSProbeIJK');\n\n    var ijkContent = this._dataCoordinate.x + ' : ' + this._dataCoordinate.y + ' : ' + this._dataCoordinate.z;\n    ijkContainer.innerHTML = 'IJK: ' + ijkContent;\n\n    // Value\n    var valueContainer = document.createElement('div');\n    valueContainer.setAttribute('class', 'VJSProbeValue');\n\n    var valueContent = this._dataValue;\n    valueContainer.innerHTML = 'Value: ' + valueContent;\n\n    // Package everything\n    var domElement = document.createElement('div');\n    domElement.setAttribute('id', 'mark' + mark.id);\n    domElement.setAttribute('class', 'mark');\n    domElement.appendChild(rasContainer);\n    domElement.appendChild(ijkContainer);\n    domElement.appendChild(valueContainer);\n\n    domElement.style.display = 'block';\n    domElement.style.top = mouse.clientY + 10;\n    domElement.style.left = mouse.clientX + 10;\n\n    return domElement;\n};\n\n// do not need mouse in theory...\nVJS.widgets.pixelProbe.prototype.updateMarkDom = function(raycaster, mouse, camera, canvas) {\n\n    for (var i = 0; i < this.marks.length; i++) {\n        // find element in DOM!\n        // world coordinates to screen\n        var screenCoordinates = this.marks[i].position.clone();\n        screenCoordinates.project(camera);\n\n        screenCoordinates.x = Math.round((screenCoordinates.x + 1) * canvas.offsetWidth / 2);\n        screenCoordinates.y = Math.round((-screenCoordinates.y + 1) * canvas.offsetHeight / 2);\n        screenCoordinates.z = 0;\n\n        // update div position\n        // window.console.log(document.getElementById('mark' + this.marks[i].id));\n        document.getElementById('mark' + this.marks[i].id).style.top = screenCoordinates.y + 10;\n        document.getElementById('mark' + this.marks[i].id).style.left = screenCoordinates.x + 10;\n\n    }\n\n};\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.widgets.pixelProbe;\n}\n},{}]},{},[1])\n\n","/*! dicom-parser - v1.1.0 - 2015-07-20 | (c) 2014 Chris Hafey | https://github.com/chafey/dicomParser */\n(function (root, factory) {\n\n    // node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = factory();\n    }\n    else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else {\n        // Browser globals\n        if(typeof cornerstone === 'undefined'){\n            dicomParser = {};\n\n            // meteor\n            if (typeof Package !== 'undefined') {\n                root.dicomParser = dicomParser;\n            }\n        }\n        dicomParser = factory();\n    }\n}(this, function () {\n\n    /**\n     * Parses a DICOM P10 byte array and returns a DataSet object with the parsed elements.  If the options\n     * argument is supplied and it contains the untilTag property, parsing will stop once that\n     * tag is encoutered.  This can be used to parse partial byte streams.\n     *\n     * @param byteArray the byte array\n     * @param options object to control parsing behavior (optional)\n     * @returns {DataSet}\n     * @throws error if an error occurs while parsing.  The exception object will contain a property dataSet with the\n     *         elements successfully parsed before the error.\n     */\nvar dicomParser = (function(dicomParser) {\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.parseDicom = function(byteArray, options) {\n\n        if(byteArray === undefined)\n        {\n            throw \"dicomParser.parseDicom: missing required parameter 'byteArray'\";\n        }\n\n        var littleEndianByteStream = new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray);\n\n        function readPrefix()\n        {\n            littleEndianByteStream.seek(128);\n            var prefix = littleEndianByteStream.readFixedString(4);\n            if(prefix !== \"DICM\")\n            {\n                throw \"dicomParser.parseDicom: DICM prefix not found at location 132\";\n            }\n        }\n\n        function readPart10Header()\n        {\n            // Per the DICOM standard, the header is always encoded in Explicit VR Little Endian (see PS3.10, section 7.1)\n            // so use littleEndianByteStream throughout this method regardless of the transfer syntax\n            readPrefix();\n\n            var warnings = [];\n            var elements = {};\n            while(littleEndianByteStream.position < littleEndianByteStream.byteArray.length) {\n                var position = littleEndianByteStream.position;\n                var element = dicomParser.readDicomElementExplicit(littleEndianByteStream, warnings);\n                if(element.tag > 'x0002ffff') {\n                    littleEndianByteStream.position = position;\n                    break;\n                }\n                // Cache the littleEndianByteArrayParser for meta header elements, since the rest of the data set may be big endian\n                // and this parser will be needed later if the meta header values are to be read.\n                element.parser = dicomParser.littleEndianByteArrayParser;\n                elements[element.tag] = element;\n            }\n            var metaHeaderDataSet = new dicomParser.DataSet(littleEndianByteStream.byteArrayParser, littleEndianByteStream.byteArray, elements);\n            metaHeaderDataSet.warnings = littleEndianByteStream.warnings;\n            return metaHeaderDataSet;\n        }\n\n        function readTransferSyntax(metaHeaderDataSet) {\n            if(metaHeaderDataSet.elements.x00020010 === undefined) {\n                throw 'dicomParser.parseDicom: missing required meta header attribute 0002,0010';\n            }\n            var transferSyntaxElement = metaHeaderDataSet.elements.x00020010;\n            return dicomParser.readFixedString(littleEndianByteStream.byteArray, transferSyntaxElement.dataOffset, transferSyntaxElement.length);\n        }\n\n        function isExplicit(transferSyntax) {\n            if(transferSyntax === '1.2.840.10008.1.2') // implicit little endian\n            {\n                return false;\n            }\n            // all other transfer syntaxes should be explicit\n            return true;\n        }\n\n        function getDataSetByteStream(transferSyntax) {\n            if(transferSyntax === '1.2.840.10008.1.2.2') // explicit big endian\n            {\n                return new dicomParser.ByteStream(dicomParser.bigEndianByteArrayParser, byteArray, littleEndianByteStream.position);\n            }\n            else\n            {\n                // all other transfer syntaxes are little endian; only the pixel encoding differs\n                // make a new stream so the metaheader warnings don't come along for the ride\n                return new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray, littleEndianByteStream.position);\n            }\n        }\n\n        function mergeDataSets(metaHeaderDataSet, instanceDataSet)\n        {\n            for (var propertyName in metaHeaderDataSet.elements)\n            {\n                if(metaHeaderDataSet.elements.hasOwnProperty(propertyName))\n                {\n                    instanceDataSet.elements[propertyName] = metaHeaderDataSet.elements[propertyName];\n                }\n            }\n            if (metaHeaderDataSet.warnings !== undefined) {\n                instanceDataSet.warnings = metaHeaderDataSet.warnings.concat(instanceDataSet.warnings);\n            }\n            return instanceDataSet;\n        }\n\n        function readDataSet(metaHeaderDataSet)\n        {\n            var transferSyntax = readTransferSyntax(metaHeaderDataSet);\n            var explicit = isExplicit(transferSyntax);\n            var dataSetByteStream = getDataSetByteStream(transferSyntax);\n\n            var elements = {};\n            var dataSet = new dicomParser.DataSet(dataSetByteStream.byteArrayParser, dataSetByteStream.byteArray, elements);\n            dataSet.warnings = dataSetByteStream.warnings;\n\n            try{\n                if(explicit) {\n                    dicomParser.parseDicomDataSetExplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n                }\n                else\n                {\n                    dicomParser.parseDicomDataSetImplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n                }\n            }\n            catch(e) {\n                var ex = {\n                    exception: e,\n                    dataSet: dataSet\n                };\n                throw ex;\n            }\n            return dataSet;\n        }\n\n        // main function here\n        function parseTheByteStream() {\n            var metaHeaderDataSet = readPart10Header();\n\n            var dataSet = readDataSet(metaHeaderDataSet);\n\n            return mergeDataSets(metaHeaderDataSet, dataSet);\n        }\n\n        // This is where we actually start parsing\n        return parseTheByteStream();\n    };\n\n    return dicomParser;\n})(dicomParser);\n\nvar dicomParser = (function (dicomParser) {\n    \"use strict\";\n\n    if (dicomParser === undefined) {\n        dicomParser = {};\n    }\n\n    /**\n     * converts an explicit dataSet to a javascript object\n     * @param dataSet\n     * @param options\n     */\n    dicomParser.explicitDataSetToJS = function (dataSet, options) {\n\n        if(dataSet === undefined) {\n            throw 'dicomParser.explicitDataSetToJS: missing required parameter dataSet';\n        }\n\n        options = options || {\n            omitPrivateAttibutes: true, // true if private elements should be omitted\n            maxElementLength : 128      // maximum element length to try and convert to string format\n        };\n\n        var result = {\n\n        };\n\n        for(var tag in dataSet.elements) {\n            var element = dataSet.elements[tag];\n\n            // skip this element if it a private element and our options specify that we should\n            if(options.omitPrivateAttibutes === true && dicomParser.isPrivateTag(tag))\n            {\n                continue;\n            }\n\n            if(element.items) {\n                // handle sequences\n                var sequenceItems = [];\n                for(var i=0; i < element.items.length; i++) {\n                    sequenceItems.push(dicomParser.explicitDataSetToJS(element.items[i].dataSet, options));\n                }\n                result[tag] = sequenceItems;\n            } else {\n                var asString;\n                asString = undefined;\n                if(element.length < options.maxElementLength) {\n                    asString = dicomParser.explicitElementToString(dataSet, element);\n                }\n\n                if(asString !== undefined) {\n                    result[tag] = asString;\n                }  else {\n                    result[tag] = {\n                        dataOffset: element.dataOffset,\n                        length : element.length\n                    };\n                }\n            }\n        }\n\n        return result;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\nvar dicomParser = (function (dicomParser) {\n    \"use strict\";\n\n    if (dicomParser === undefined) {\n        dicomParser = {};\n    }\n\n    /**\n     * Converts an explicit VR element to a string or undefined if it is not possible to convert.\n     * Throws an error if an implicit element is supplied\n     * @param dataSet\n     * @param element\n     * @returns {*}\n     */\n    dicomParser.explicitElementToString = function(dataSet, element)\n    {\n        if(dataSet === undefined || element === undefined) {\n            throw 'dicomParser.explicitElementToString: missing required parameters';\n        }\n        if(element.vr === undefined) {\n            throw 'dicomParser.explicitElementToString: cannot convert implicit element to string';\n        }\n        var vr = element.vr;\n        var tag = element.tag;\n\n        var textResult;\n\n        function multiElementToString(numItems, func) {\n            var result = \"\";\n            for(var i=0; i < numItems; i++) {\n                if(i !== 0) {\n                    result += '/';\n                }\n                result += func.call(dataSet, tag).toString();\n            }\n            return result;\n        }\n\n        if(dicomParser.isStringVr(vr) === true)\n        {\n            textResult = dataSet.string(tag);\n        }\n        else if (vr == 'AT') {\n            var num = dataSet.uint32(tag);\n            if(num === undefined) {\n                return undefined;\n            }\n            if (num < 0)\n            {\n                num = 0xFFFFFFFF + num + 1;\n            }\n\n            return 'x' + num.toString(16).toUpperCase();\n        }\n        else if (vr == 'US')\n        {\n            textResult = multiElementToString(element.length / 2, dataSet.uint16);\n        }\n        else if(vr === 'SS')\n        {\n            textResult = multiElementToString(element.length / 2, dataSet.int16);\n        }\n        else if (vr == 'UL')\n        {\n            textResult = multiElementToString(element.length / 4, dataSet.uint32);\n        }\n        else if(vr === 'SL')\n        {\n            textResult = multiElementToString(element.length / 4, dataSet.int32);\n        }\n        else if(vr == 'FD')\n        {\n            textResult = multiElementToString(element.length / 8, dataSet.int32);\n        }\n        else if(vr == 'FL')\n        {\n            textResult = multiElementToString(element.length / 4, dataSet.float);\n        }\n\n        return textResult;\n    };\n    return dicomParser;\n}(dicomParser));\n/**\n * Utility functions for dealing with DICOM\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    var stringVrs = {\n        AE: true,\n        AS: true,\n        AT: false,\n        CS: true,\n        DA: true,\n        DS: true,\n        DT: true,\n        FL: false,\n        FD: false,\n        IS: true,\n        LO: true,\n        LT: true,\n        OB: false,\n        OD: false,\n        OF: false,\n        OW: false,\n        PN: true,\n        SH: true,\n        SL: false,\n        SQ: false,\n        SS: false,\n        ST: true,\n        TM: true,\n        UI: true,\n        UL: false,\n        UN: undefined, // dunno\n        UR: true,\n        US: false,\n        UT: true\n    };\n\n    /**\n     * Tests to see if vr is a string or not.\n     * @param vr\n     * @returns true if string, false it not string, undefined if unknown vr or UN type\n     */\n    dicomParser.isStringVr = function(vr)\n    {\n        return stringVrs[vr];\n    };\n\n    /**\n     * Tests to see if a given tag in the format xggggeeee is a private tag or not\n     * @param tag\n     * @returns {boolean}\n     */\n    dicomParser.isPrivateTag = function(tag)\n    {\n        var lastGroupDigit = parseInt(tag[4]);\n        var groupIsOdd = (lastGroupDigit % 2) === 1;\n        return groupIsOdd;\n    };\n\n    /**\n     * Parses a PN formatted string into a javascript object with properties for givenName, familyName, middleName, prefix and suffix\n     * @param personName a string in the PN VR format\n     * @param index\n     * @returns {*} javascript object with properties for givenName, familyName, middleName, prefix and suffix or undefined if no element or data\n     */\n    dicomParser.parsePN = function(personName) {\n        if(personName === undefined) {\n            return undefined;\n        }\n        var stringValues = personName.split('^');\n        return {\n            familyName: stringValues[0],\n            givenName: stringValues[1],\n            middleName: stringValues[2],\n            prefix: stringValues[3],\n            suffix: stringValues[4]\n        };\n    };\n\n    /**\n     * Parses a DA formatted string into a Javascript object\n     * @param date a string in the DA VR format\n     * @returns {*} Javascript object with properties year, month and day or undefined if not present or not 8 bytes long\n     */\n    dicomParser.parseDA = function(date)\n    {\n        if(date && date.length === 8)\n        {\n            var yyyy = parseInt(date.substring(0, 4), 10);\n            var mm = parseInt(date.substring(4, 6), 10);\n            var dd = parseInt(date.substring(6, 8), 10);\n\n            return {\n                year: yyyy,\n                month: mm,\n                day: dd\n            };\n        }\n        return undefined;\n    };\n\n    /**\n     * Parses a TM formatted string into a javascript object with properties for hours, minutes, seconds and fractionalSeconds\n     * @param time a string in the TM VR format\n     * @returns {*} javascript object with properties for hours, minutes, seconds and fractionalSeconds or undefined if no element or data.  Missing fields are set to undefined\n     */\n    dicomParser.parseTM = function(time) {\n\n        if (time.length >= 2) // must at least have HH\n        {\n            // 0123456789\n            // HHMMSS.FFFFFF\n            var hh = parseInt(time.substring(0, 2), 10);\n            var mm = time.length >= 4 ? parseInt(time.substring(2, 4), 10) : undefined;\n            var ss = time.length >= 6 ? parseInt(time.substring(4, 6), 10) : undefined;\n            var ffffff = time.length >= 8 ? parseInt(time.substring(7, 13), 10) : undefined;\n\n            return {\n                hours: hh,\n                minutes: mm,\n                seconds: ss,\n                fractionalSeconds: ffffff\n            };\n        }\n        return undefined;\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function getPixelDataFromFragments(byteStream, fragments, bufferSize)\n    {\n        // if there is only one fragment, return a view on this array to avoid copying\n        if(fragments.length === 1) {\n            return new Uint8Array(byteStream.byteArray.buffer, fragments[0].dataOffset, fragments[0].length);\n        }\n\n        // more than one fragment, combine all of the fragments into one buffer\n        var pixelData = new Uint8Array(bufferSize);\n        var pixelDataIndex = 0;\n        for(var i=0; i < fragments.length; i++) {\n            var fragmentOffset = fragments[i].dataOffset;\n            for(var j=0; j < fragments[i].length; j++) {\n                pixelData[pixelDataIndex++] = byteStream.byteArray[fragmentOffset++];\n            }\n        }\n\n        return pixelData;\n    }\n\n    function readFragmentsUntil(byteStream, endOfFrame) {\n        // Read fragments until we reach endOfFrame\n        var fragments = [];\n        var bufferSize = 0;\n        while(byteStream.position < endOfFrame && byteStream.position < byteStream.byteArray.length) {\n            var fragment = dicomParser.readSequenceItem(byteStream);\n            // NOTE: we only encounter this for the sequence delimiter tag when extracting the last frame\n            if(fragment.tag === 'xfffee0dd') {\n                break;\n            }\n            fragments.push(fragment);\n            byteStream.seek(fragment.length);\n            bufferSize += fragment.length;\n        }\n\n        // Convert the fragments into a single pixelData buffer\n        var pixelData = getPixelDataFromFragments(byteStream, fragments, bufferSize);\n        return pixelData;\n    }\n\n    function readEncapsulatedPixelDataWithBasicOffsetTable(pixelDataElement, byteStream, frame) {\n        //  validate that we have an offset for this frame\n        var numFrames = pixelDataElement.basicOffsetTable.length;\n        if(frame > numFrames) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter frame exceeds number of frames in basic offset table\";\n        }\n\n        // move to the start of this frame\n        var frameOffset = pixelDataElement.basicOffsetTable[frame];\n        byteStream.seek(frameOffset);\n\n        // Find the end of this frame\n        var endOfFrameOffset = pixelDataElement.basicOffsetTable[frame + 1];\n        if(endOfFrameOffset === undefined) { // special case for last frame\n            endOfFrameOffset = byteStream.position + pixelDataElement.length;\n        }\n\n        // read this frame\n        var pixelData = readFragmentsUntil(byteStream, endOfFrameOffset);\n        return pixelData;\n    }\n\n    function readEncapsulatedDataNoBasicOffsetTable(pixelDataElement, byteStream, frame) {\n        // if the basic offset table is empty, this is a single frame so make sure the requested\n        // frame is 0\n        if(frame !== 0) {\n            throw 'dicomParser.readEncapsulatedPixelData: non zero frame specified for single frame encapsulated pixel data';\n        }\n\n        // read this frame\n        var endOfFrame = byteStream.position + pixelDataElement.length;\n        var pixelData = readFragmentsUntil(byteStream, endOfFrame);\n        return pixelData;\n    }\n\n    /**\n     * Returns the pixel data for the specified frame in an encapsulated pixel data element\n     *\n     * @param dataSet - the dataSet containing the encapsulated pixel data\n     * @param pixelDataElement - the pixel data element (x7fe00010) to extract the frame from\n     * @param frame - the zero based frame index\n     * @returns Uint8Array with the encapsulated pixel data\n     */\n    dicomParser.readEncapsulatedPixelData = function(dataSet, pixelDataElement, frame)\n    {\n        if(dataSet === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: missing required parameter 'dataSet'\";\n        }\n        if(pixelDataElement === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: missing required parameter 'element'\";\n        }\n        if(frame === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: missing required parameter 'frame'\";\n        }\n        if(pixelDataElement.tag !== 'x7fe00010') {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to non pixel data tag (expected tag = x7fe00010'\";\n        }\n        if(pixelDataElement.encapsulatedPixelData !== true) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(pixelDataElement.hadUndefinedLength !== true) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(pixelDataElement.basicOffsetTable === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(pixelDataElement.fragments === undefined) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data\";\n        }\n        if(frame < 0) {\n            throw \"dicomParser.readEncapsulatedPixelData: parameter 'frame' must be >= 0\";\n        }\n\n        // seek past the basic offset table (no need to parse it again since we already have)\n        var byteStream = new dicomParser.ByteStream(dataSet.byteArrayParser, dataSet.byteArray, pixelDataElement.dataOffset);\n        var basicOffsetTable = dicomParser.readSequenceItem(byteStream);\n        if(basicOffsetTable.tag !== 'xfffee000')\n        {\n            throw \"dicomParser.readEncapsulatedPixelData: missing basic offset table xfffee000\";\n        }\n        byteStream.seek(basicOffsetTable.length);\n\n        // If the basic offset table is empty (no entries), it is a single frame.  If it is not empty,\n        // it has at least one frame so use the basic offset table to find the bytes\n        if(pixelDataElement.basicOffsetTable.length !== 0)\n        {\n            return readEncapsulatedPixelDataWithBasicOffsetTable(pixelDataElement, byteStream, frame);\n        }\n        else\n        {\n            return readEncapsulatedDataNoBasicOffsetTable(pixelDataElement, byteStream, frame);\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n\n/**\n * Internal helper functions for parsing different types from a big-endian byte array\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.bigEndianByteArrayParser = {\n        /**\n         *\n         * Parses an unsigned int 16 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readUint16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n            }\n            return (byteArray[position] << 8) + byteArray[position + 1];\n        },\n\n        /**\n         *\n         * Parses a signed int 16 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed signed int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readInt16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n            }\n            var int16 = (byteArray[position] << 8) + byteArray[position + 1];\n            // fix sign\n            if (int16 & 0x8000) {\n                int16 = int16 - 0xFFFF - 1;\n            }\n            return int16;\n        },\n\n        /**\n         * Parses an unsigned int 32 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readUint32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n            }\n\n            var uint32 = (256 * (256 * (256 * byteArray[position] +\n                                              byteArray[position + 1]) +\n                                              byteArray[position + 2]) +\n                                              byteArray[position + 3]);\n\n            return uint32;\n        },\n\n        /**\n         * Parses a signed int 32 from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed signed int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readInt32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n            }\n\n            var int32 = ((byteArray[position] << 24) +\n                         (byteArray[position + 1] << 16) +\n                         (byteArray[position + 2] << 8) +\n                          byteArray[position + 3]);\n\n            return int32;\n        },\n\n        /**\n         * Parses 32-bit float from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 32-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readFloat: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readFloat: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(4);\n            byteArrayForParsingFloat[3] = byteArray[position];\n            byteArrayForParsingFloat[2] = byteArray[position + 1];\n            byteArrayForParsingFloat[1] = byteArray[position + 2];\n            byteArrayForParsingFloat[0] = byteArray[position + 3];\n            var floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        },\n\n        /**\n         * Parses 64-bit float from a big-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 64-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readDouble: function (byteArray, position) {\n            if (position < 0) {\n                throw 'bigEndianByteArrayParser.readDouble: position cannot be less than 0';\n            }\n\n            if (position + 8 > byteArray.length) {\n                throw 'bigEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(8);\n            byteArrayForParsingFloat[7] = byteArray[position];\n            byteArrayForParsingFloat[6] = byteArray[position + 1];\n            byteArrayForParsingFloat[5] = byteArray[position + 2];\n            byteArrayForParsingFloat[4] = byteArray[position + 3];\n            byteArrayForParsingFloat[3] = byteArray[position + 4];\n            byteArrayForParsingFloat[2] = byteArray[position + 5];\n            byteArrayForParsingFloat[1] = byteArray[position + 6];\n            byteArrayForParsingFloat[0] = byteArray[position + 7];\n            var floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions common to parsing byte arrays of any type\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads a string of 8-bit characters from an array of bytes and advances\n     * the position by length bytes.  A null terminator will end the string\n     * but will not effect advancement of the position.  Trailing and leading\n     * spaces are preserved (not trimmed)\n     * @param byteArray the byteArray to read from\n     * @param position the position in the byte array to read from\n     * @param length the maximum number of bytes to parse\n     * @returns {string} the parsed string\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n    dicomParser.readFixedString = function(byteArray, position, length)\n    {\n        if(length < 0)\n        {\n            throw 'readFixedString - length cannot be less than 0';\n        }\n\n        if(position + length > byteArray.length) {\n            throw 'dicomParser.readFixedString: attempt to read past end of buffer';\n        }\n\n        var result = \"\";\n        for(var i=0; i < length; i++)\n        {\n            var byte = byteArray[position + i];\n            if(byte === 0) {\n                position +=  length;\n                return result;\n            }\n            result += String.fromCharCode(byte);\n        }\n\n        return result;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n *\n * Internal helper class to assist with parsing. Supports reading from a byte\n * stream contained in a Uint8Array.  Example usage:\n *\n *  var byteArray = new Uint8Array(32);\n *  var byteStream = new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray);\n *\n * */\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Constructor for ByteStream objects.\n     * @param byteArrayParser a parser for parsing the byte array\n     * @param byteArray a Uint8Array containing the byte stream\n     * @param position (optional) the position to start reading from.  0 if not specified\n     * @constructor\n     * @throws will throw an error if the byteArrayParser parameter is not present\n     * @throws will throw an error if the byteArray parameter is not present or invalid\n     * @throws will throw an error if the position parameter is not inside the byte array\n     */\n    dicomParser.ByteStream = function(byteArrayParser, byteArray, position) {\n        if(byteArrayParser === undefined)\n        {\n            throw \"dicomParser.ByteStream: missing required parameter 'byteArrayParser'\";\n        }\n        if(byteArray === undefined)\n        {\n            throw \"dicomParser.ByteStream: missing required parameter 'byteArray'\";\n        }\n        if((byteArray instanceof Uint8Array) === false) {\n            throw 'dicomParser.ByteStream: parameter byteArray is not of type Uint8Array';\n        }\n        if(position < 0)\n        {\n            throw \"dicomParser.ByteStream: parameter 'position' cannot be less than 0\";\n        }\n        if(position >= byteArray.length)\n        {\n            throw \"dicomParser.ByteStream: parameter 'position' cannot be greater than or equal to 'byteArray' length\";\n\n        }\n        this.byteArrayParser = byteArrayParser;\n        this.byteArray = byteArray;\n        this.position = position ? position : 0;\n        this.warnings = []; // array of string warnings encountered while parsing\n    };\n\n    /**\n     * Safely seeks through the byte stream.  Will throw an exception if an attempt\n     * is made to seek outside of the byte array.\n     * @param offset the number of bytes to add to the position\n     * @throws error if seek would cause position to be outside of the byteArray\n     */\n    dicomParser.ByteStream.prototype.seek = function(offset)\n    {\n        if(this.position + offset < 0)\n        {\n            throw \"cannot seek to position < 0\";\n        }\n        this.position += offset;\n    };\n\n    /**\n     * Returns a new ByteStream object from the current position and of the requested number of bytes\n     * @param numBytes the length of the byte array for the ByteStream to contain\n     * @returns {dicomParser.ByteStream}\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readByteStream = function(numBytes)\n    {\n        if(this.position + numBytes > this.byteArray.length) {\n            throw 'readByteStream - buffer overread';\n        }\n        var byteArrayView = new Uint8Array(this.byteArray.buffer, this.position, numBytes);\n        this.position += numBytes;\n        return new dicomParser.ByteStream(this.byteArrayParser, byteArrayView);\n    };\n\n    /**\n     *\n     * Parses an unsigned int 16 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parsed unsigned int 16\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readUint16 = function()\n    {\n        var result = this.byteArrayParser.readUint16(this.byteArray, this.position);\n        this.position += 2;\n        return result;\n    };\n\n    /**\n     * Parses an unsigned int 32 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parse unsigned int 32\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readUint32 = function()\n    {\n        var result = this.byteArrayParser.readUint32(this.byteArray, this.position);\n        this.position += 4;\n        return result;\n    };\n\n    /**\n     * Reads a string of 8-bit characters from an array of bytes and advances\n     * the position by length bytes.  A null terminator will end the string\n     * but will not effect advancement of the position.\n     * @param length the maximum number of bytes to parse\n     * @returns {string} the parsed string\n     * @throws error if buffer overread would occur\n     */\n    dicomParser.ByteStream.prototype.readFixedString = function(length)\n    {\n        var result = dicomParser.readFixedString(this.byteArray, this.position, length);\n        this.position += length;\n        return result;\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n *\n * The DataSet class encapsulates a collection of DICOM Elements and provides various functions\n * to access the data in those elements\n *\n * Rules for handling padded spaces:\n * DS = Strip leading and trailing spaces\n * DT = Strip trailing spaces\n * IS = Strip leading and trailing spaces\n * PN = Strip trailing spaces\n * TM = Strip trailing spaces\n * AE = Strip leading and trailing spaces\n * CS = Strip leading and trailing spaces\n * SH = Strip leading and trailing spaces\n * LO = Strip leading and trailing spaces\n * LT = Strip trailing spaces\n * ST = Strip trailing spaces\n * UT = Strip trailing spaces\n *\n */\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function getByteArrayParser(element, defaultParser)\n    {\n        return (element.parser !== undefined ? element.parser : defaultParser);\n    }\n\n    /**\n     * Constructs a new DataSet given byteArray and collection of elements\n     * @param byteArrayParser\n     * @param byteArray\n     * @param elements\n     * @constructor\n     */\n    dicomParser.DataSet = function(byteArrayParser, byteArray, elements)\n    {\n        this.byteArrayParser = byteArrayParser;\n        this.byteArray = byteArray;\n        this.elements = elements;\n    };\n\n    /**\n     * Finds the element for tag and returns an unsigned int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 16 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.uint16 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readUint16(this.byteArray, element.dataOffset + (index *2));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns an signed int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 16 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.int16 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readInt16(this.byteArray, element.dataOffset + (index * 2));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns an unsigned int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 32 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.uint32 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readUint32(this.byteArray, element.dataOffset + (index * 4));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns an signed int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 32 or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.int32 = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readInt32(this.byteArray, element.dataOffset + (index * 4));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns a 32 bit floating point number (VR=FL) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or has data of length 0\n     */\n    dicomParser.DataSet.prototype.float = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readFloat(this.byteArray, element.dataOffset + (index * 4));\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds the element for tag and returns a 64 bit floating point number (VR=FD) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or doesn't has data of length 0\n     */\n    dicomParser.DataSet.prototype.double = function(tag, index)\n    {\n        var element = this.elements[tag];\n        index = (index !== undefined) ? index : 0;\n        if(element && element.length !== 0)\n        {\n            return getByteArrayParser(element, this.byteArrayParser).readDouble(this.byteArray, element.dataOffset + (index * 8));\n        }\n        return undefined;\n    };\n\n    /**\n     * Returns the number of string values for the element\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @returns {*} the number of string values or undefined if the attribute is not present or has zero length data\n     */\n    dicomParser.DataSet.prototype.numStringValues = function(tag)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            var fixedString = dicomParser.readFixedString(this.byteArray, element.dataOffset, element.length);\n            var numMatching = fixedString.match(/\\\\/g);\n            if(numMatching === null)\n            {\n                return 1;\n            }\n            return numMatching.length + 1;\n        }\n        return undefined;\n    };\n\n    /**\n     * Returns a string for the element.  If index is provided, the element is assumed to be\n     * multi-valued and will return the component specified by index.  Undefined is returned\n     * if there is no component with the specified index, the element does not exist or is zero length.\n     *\n     * Use this function for VR types of AE, CS, SH and LO\n     *\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the entire string\n     * @returns {*}\n     */\n    dicomParser.DataSet.prototype.string = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            var fixedString = dicomParser.readFixedString(this.byteArray, element.dataOffset, element.length);\n            if(index >= 0)\n            {\n                var values = fixedString.split('\\\\');\n                // trim trailing spaces\n                return values[index].trim();\n            }\n            else\n            {\n                // trim trailing spaces\n                return fixedString.trim();\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Returns a string with the leading spaces preserved and trailing spaces removed.\n     *\n     * Use this function to access data for VRs of type UT, ST and LT\n     *\n     * @param tag\n     * @param index\n     * @returns {*}\n     */\n    dicomParser.DataSet.prototype.text = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            var fixedString = dicomParser.readFixedString(this.byteArray, element.dataOffset, element.length);\n            if(index >= 0)\n            {\n                var values = fixedString.split('\\\\');\n                return values[index].replace(/ +$/, '');\n            }\n            else\n            {\n                return fixedString.replace(/ +$/, '');\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Parses a string to a float for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} a floating point number or undefined if not present or data not long enough\n     */\n    dicomParser.DataSet.prototype.floatString = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0)\n        {\n            index = (index !== undefined) ? index : 0;\n            var value = this.string(tag, index);\n            if(value !== undefined) {\n                return parseFloat(value);\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Parses a string to an integer for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} an integer or undefined if not present or data not long enough\n     */\n    dicomParser.DataSet.prototype.intString = function(tag, index)\n    {\n        var element = this.elements[tag];\n        if(element && element.length > 0) {\n            index = (index !== undefined) ? index : 0;\n            var value = this.string(tag, index);\n            if(value !== undefined) {\n                return parseInt(value);\n            }\n        }\n        return undefined;\n    };\n\n    //dicomParser.DataSet = DataSet;\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads an encapsulated pixel data element and adds an array of fragments to the element\n     * containing the offset and length of each fragment and any offsets from the basic offset\n     * table\n     * @param byteStream\n     * @param element\n     */\n    dicomParser.findEndOfEncapsulatedElement = function(byteStream, element, warnings)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.findEndOfEncapsulatedElement: missing required parameter 'byteStream'\";\n        }\n        if(element === undefined)\n        {\n            throw \"dicomParser.findEndOfEncapsulatedElement: missing required parameter 'element'\";\n        }\n\n        element.encapsulatedPixelData = true;\n        element.basicOffsetTable = [];\n        element.fragments = [];\n        var basicOffsetTableItemTag = dicomParser.readTag(byteStream);\n        if(basicOffsetTableItemTag !== 'xfffee000') {\n            throw \"dicomParser.findEndOfEncapsulatedElement: basic offset table not found\";\n        }\n        var basicOffsetTableItemlength = byteStream.readUint32();\n        var numFragments = basicOffsetTableItemlength / 4;\n        for(var i =0; i < numFragments; i++) {\n            var offset = byteStream.readUint32();\n            element.basicOffsetTable.push(offset);\n        }\n        var baseOffset = byteStream.position;\n\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var tag = dicomParser.readTag(byteStream);\n            var length = byteStream.readUint32();\n            if(tag === 'xfffee0dd')\n            {\n                byteStream.seek(length);\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n            else if(tag === 'xfffee000')\n            {\n                element.fragments.push({\n                    offset: byteStream.position - baseOffset - 8,\n                    position : byteStream.position,\n                    length : length\n                });\n            }\n            else {\n                if(warnings) {\n                    warnings.push('unexpected tag ' + tag + ' while searching for end of pixel data element with undefined length');\n                }\n                if(length > byteStream.byteArray.length - byteStream.position)\n                {\n                    // fix length\n                    length = byteStream.byteArray.length - byteStream.position;\n                }\n                element.fragments.push({\n                    offset: byteStream.position - baseOffset - 8,\n                    position : byteStream.position,\n                    length : length\n                });\n                byteStream.seek(length);\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n\n            byteStream.seek(length);\n        }\n\n        if(warnings) {\n            warnings.push(\"pixel data element \" + element.tag + \" missing sequence delimiter tag xfffee0dd\");\n        }\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * reads from the byte stream until it finds the magic numbers for the item delimitation item\n     * and then sets the length of the element\n     * @param byteStream\n     * @param element\n     */\n    dicomParser.findItemDelimitationItemAndSetElementLength = function(byteStream, element)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'\";\n        }\n\n        var itemDelimitationItemLength = 8; // group, element, length\n        var maxPosition = byteStream.byteArray.length - itemDelimitationItemLength;\n        while(byteStream.position <= maxPosition)\n        {\n            var groupNumber = byteStream.readUint16();\n            if(groupNumber === 0xfffe)\n            {\n                var elementNumber = byteStream.readUint16();\n                if(elementNumber === 0xe00d)\n                {\n                    // NOTE: It would be better to also check for the length to be 0 as part of the check above\n                    // but we will just log a warning for now\n                    var itemDelimiterLength = byteStream.readUint32(); // the length\n                    if(itemDelimiterLength !== 0) {\n                        byteStream.warnings('encountered non zero length following item delimiter at position' + byteStream.position - 4 + \" while reading element of undefined length with tag ' + element.tag\");\n                    }\n                    element.length = byteStream.position - element.dataOffset;\n                    return;\n\n                }\n            }\n        }\n\n        // No item delimitation item - silently set the length to the end of the buffer and set the position past the end of the buffer\n        element.length = byteStream.byteArray.length - element.dataOffset;\n        byteStream.seek(byteStream.byteArray.length - byteStream.position);\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing different types from a little-endian byte array\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.littleEndianByteArrayParser = {\n        /**\n         *\n         * Parses an unsigned int 16 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readUint16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n            }\n            return byteArray[position] + (byteArray[position + 1] * 256);\n        },\n\n        /**\n         *\n         * Parses a signed int 16 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed signed int 16\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt16: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readInt16: position cannot be less than 0';\n            }\n            if (position + 2 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n            }\n            var int16 = byteArray[position] + (byteArray[position + 1] << 8);\n            // fix sign\n            if (int16 & 0x8000) {\n                int16 = int16 - 0xFFFF - 1;\n            }\n            return int16;\n        },\n\n\n        /**\n         * Parses an unsigned int 32 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readUint32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readUint32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n            }\n\n            var uint32 = (byteArray[position] +\n            (byteArray[position + 1] * 256) +\n            (byteArray[position + 2] * 256 * 256) +\n            (byteArray[position + 3] * 256 * 256 * 256 ));\n\n            return uint32;\n        },\n\n        /**\n         * Parses a signed int 32 from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed unsigned int 32\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readInt32: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readInt32: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n            }\n\n            var int32 = (byteArray[position] +\n            (byteArray[position + 1] << 8) +\n            (byteArray[position + 2] << 16) +\n            (byteArray[position + 3] << 24));\n\n            return int32;\n\n        },\n\n        /**\n         * Parses 32-bit float from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 32-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readFloat: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readFloat: position cannot be less than 0';\n            }\n\n            if (position + 4 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(4);\n            byteArrayForParsingFloat[0] = byteArray[position];\n            byteArrayForParsingFloat[1] = byteArray[position + 1];\n            byteArrayForParsingFloat[2] = byteArray[position + 2];\n            byteArrayForParsingFloat[3] = byteArray[position + 3];\n            var floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        },\n\n        /**\n         * Parses 64-bit float from a little-endian byte array\n         *\n         * @param byteArray the byte array to read from\n         * @param position the position in the byte array to read from\n         * @returns {*} the parsed 64-bit float\n         * @throws error if buffer overread would occur\n         * @access private\n         */\n        readDouble: function (byteArray, position) {\n            if (position < 0) {\n                throw 'littleEndianByteArrayParser.readDouble: position cannot be less than 0';\n            }\n\n            if (position + 8 > byteArray.length) {\n                throw 'littleEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n            }\n\n            // I am sure there is a better way than this but this should be safe\n            var byteArrayForParsingFloat = new Uint8Array(8);\n            byteArrayForParsingFloat[0] = byteArray[position];\n            byteArrayForParsingFloat[1] = byteArray[position + 1];\n            byteArrayForParsingFloat[2] = byteArray[position + 2];\n            byteArrayForParsingFloat[3] = byteArray[position + 3];\n            byteArrayForParsingFloat[4] = byteArray[position + 4];\n            byteArrayForParsingFloat[5] = byteArray[position + 5];\n            byteArrayForParsingFloat[6] = byteArray[position + 6];\n            byteArrayForParsingFloat[7] = byteArray[position + 7];\n            var floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n            return floatArray[0];\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing implicit and explicit DICOM data sets\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * reads an explicit data set\n     * @param byteStream the byte stream to read from\n     * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n     */\n    dicomParser.parseDicomDataSetExplicit = function (dataSet, byteStream, maxPosition, options) {\n\n        maxPosition = (maxPosition === undefined) ? byteStream.byteArray.length : maxPosition ;\n        options = options || {};\n\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.parseDicomDataSetExplicit: missing required parameter 'byteStream'\";\n        }\n        if(maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length)\n        {\n            throw \"dicomParser.parseDicomDataSetExplicit: invalid value for parameter 'maxPosition'\";\n        }\n        var elements = dataSet.elements;\n\n        while(byteStream.position < maxPosition)\n        {\n            var element = dicomParser.readDicomElementExplicit(byteStream, dataSet.warnings, options.untilTag);\n            elements[element.tag] = element;\n            if(element.tag === options.untilTag) {\n                return;\n            }\n        }\n        if(byteStream.position > maxPosition) {\n            throw \"dicomParser:parseDicomDataSetExplicit: buffer overrun\";\n        }\n    };\n\n    /**\n     * reads an implicit data set\n     * @param byteStream the byte stream to read from\n     * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n     */\n    dicomParser.parseDicomDataSetImplicit = function(dataSet, byteStream, maxPosition, options)\n    {\n        maxPosition = (maxPosition === undefined) ? dataSet.byteArray.length : maxPosition ;\n        options = options || {};\n\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.parseDicomDataSetImplicit: missing required parameter 'byteStream'\";\n        }\n        if(maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length)\n        {\n            throw \"dicomParser.parseDicomDataSetImplicit: invalid value for parameter 'maxPosition'\";\n        }\n\n        var elements = dataSet.elements;\n\n        while(byteStream.position < maxPosition)\n        {\n            var element = dicomParser.readDicomElementImplicit(byteStream, options.untilTag);\n            elements[element.tag] = element;\n            if(element.tag === options.untilTag) {\n                return;\n            }\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function getDataLengthSizeInBytesForVR(vr)\n    {\n        if( vr === 'OB' ||\n            vr === 'OW' ||\n            vr === 'SQ' ||\n            vr === 'OF' ||\n            vr === 'UT' ||\n            vr === 'UN')\n        {\n            return 4;\n        }\n        else\n        {\n            return 2;\n        }\n    }\n\n    dicomParser.readDicomElementExplicit = function(byteStream, warnings, untilTag)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readDicomElementExplicit: missing required parameter 'byteStream'\";\n        }\n\n        var element = {\n            tag : dicomParser.readTag(byteStream),\n            vr : byteStream.readFixedString(2)\n            // length set below based on VR\n            // dataOffset set below based on VR and size of length\n        };\n\n        var dataLengthSizeBytes = getDataLengthSizeInBytesForVR(element.vr);\n        if(dataLengthSizeBytes === 2)\n        {\n            element.length = byteStream.readUint16();\n            element.dataOffset = byteStream.position;\n        }\n        else\n        {\n            byteStream.seek(2);\n            element.length = byteStream.readUint32();\n            element.dataOffset = byteStream.position;\n        }\n\n        if(element.length === 4294967295)\n        {\n            element.hadUndefinedLength = true;\n        }\n\n        if(element.tag === untilTag) {\n            return element;\n        }\n\n        // if VR is SQ, parse the sequence items\n        if(element.vr === 'SQ')\n        {\n            dicomParser.readSequenceItemsExplicit(byteStream, element, warnings);\n            return element;\n        }\n        if(element.length === 4294967295)\n        {\n            if(element.tag === 'x7fe00010') {\n                dicomParser.findEndOfEncapsulatedElement(byteStream, element, warnings);\n                return element;\n            } else {\n                dicomParser.findItemDelimitationItemAndSetElementLength(byteStream, element);\n                return element;\n            }\n        }\n\n        byteStream.seek(element.length);\n        return element;\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    dicomParser.readDicomElementImplicit = function(byteStream, untilTag)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'\";\n        }\n\n        var element = {\n            tag : dicomParser.readTag(byteStream),\n            length: byteStream.readUint32(),\n            dataOffset :  byteStream.position\n        };\n\n        if(element.length === 4294967295)\n        {\n            element.hadUndefinedLength = true;\n        }\n\n        if(element.tag === untilTag) {\n            return element;\n        }\n\n        // peek ahead at the next tag to see if it looks like a sequence.  This is not 100%\n        // safe because a non sequence item could have data that has these bytes, but this\n        // is how to do it without a data dictionary.\n        if ((byteStream.position + 4) <= byteStream.byteArray.length) {\n            var nextTag = dicomParser.readTag(byteStream);\n            byteStream.seek(-4);\n\n            if (nextTag === 'xfffee000') {\n                // parse the sequence\n                dicomParser.readSequenceItemsImplicit(byteStream, element);\n                //element.length = byteStream.byteArray.length - element.dataOffset;\n                return element;\n            }\n        }\n\n        // if element is not a sequence and has undefined length, we have to\n        // scan the data for a magic number to figure out when it ends.\n        if(element.length === 4294967295)\n        {\n            dicomParser.findItemDelimitationItemAndSetElementLength(byteStream, element);\n            return element;\n        }\n\n        // non sequence element with known length, skip over the data part\n        byteStream.seek(element.length);\n        return element;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function readDicomDataSetExplicitUndefinedLength(byteStream, warnings)\n    {\n        var elements = {};\n\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var element = dicomParser.readDicomElementExplicit(byteStream, warnings);\n            elements[element.tag] = element;\n\n            // we hit an item delimiter tag, return the current offset to mark\n            // the end of this sequence item\n            if(element.tag === 'xfffee00d')\n            {\n                return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n            }\n\n        }\n\n        // eof encountered - log a warning and return what we have for the element\n        byteStream.warnings.push('eof encountered before finding sequence delimitation item while reading sequence item of undefined length');\n        return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n\n    function readSequenceItemExplicit(byteStream, warnings)\n    {\n        var item = dicomParser.readSequenceItem(byteStream);\n\n        if(item.length === 4294967295)\n        {\n            item.hadUndefinedLength = true;\n            item.dataSet = readDicomDataSetExplicitUndefinedLength(byteStream, warnings);\n            item.length = byteStream.position - item.dataOffset;\n        }\n        else\n        {\n            item.dataSet = new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n            dicomParser.parseDicomDataSetExplicit(item.dataSet, byteStream, byteStream.position + item.length);\n        }\n        return item;\n    }\n\n    function readSQElementUndefinedLengthExplicit(byteStream, element, warnings)\n    {\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var item = readSequenceItemExplicit(byteStream, warnings);\n            element.items.push(item);\n\n            // If this is the sequence delimitation item, return the offset of the next element\n            if(item.tag === 'xfffee0dd')\n            {\n                // sequence delimitation item, update attr data length and return\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n        }\n\n        // eof encountered - log a warning and set the length of the element based on the buffer size\n        byteStream.warnings.push('eof encountered before finding sequence delimitation item in sequence element of undefined length with tag ' + element.tag);\n        element.length = byteStream.byteArray.length - element.dataOffset;\n    }\n\n    function readSQElementKnownLengthExplicit(byteStream, element, warnings)\n    {\n        var maxPosition = element.dataOffset + element.length;\n        while(byteStream.position < maxPosition)\n        {\n            var item = readSequenceItemExplicit(byteStream, warnings);\n            element.items.push(item);\n        }\n    }\n\n    dicomParser.readSequenceItemsExplicit = function(byteStream, element, warnings)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsExplicit: missing required parameter 'byteStream'\";\n        }\n        if(element === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsExplicit: missing required parameter 'element'\";\n        }\n\n        element.items = [];\n\n        if(element.length === 4294967295)\n        {\n            readSQElementUndefinedLengthExplicit(byteStream, element);\n        }\n        else\n        {\n            readSQElementKnownLengthExplicit(byteStream, element, warnings);\n        }\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    function readDicomDataSetImplicitUndefinedLength(byteStream)\n    {\n        var elements = {};\n\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var element = dicomParser.readDicomElementImplicit(byteStream);\n            elements[element.tag] = element;\n\n            // we hit an item delimiter tag, return the current offset to mark\n            // the end of this sequence item\n            if(element.tag === 'xfffee00d')\n            {\n                return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n            }\n        }\n        // eof encountered - log a warning and return what we have for the element\n        byteStream.warnings.push('eof encountered before finding sequence item delimiter in sequence item of undefined length');\n        return new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n\n    function readSequenceItemImplicit(byteStream)\n    {\n        var item = dicomParser.readSequenceItem(byteStream);\n\n        if(item.length === 4294967295)\n        {\n            item.hadUndefinedLength = true;\n            item.dataSet = readDicomDataSetImplicitUndefinedLength(byteStream);\n            item.length = byteStream.position - item.dataOffset;\n        }\n        else\n        {\n            item.dataSet = new dicomParser.DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n            dicomParser.parseDicomDataSetImplicit(item.dataSet, byteStream, byteStream.position + item.length);\n        }\n        return item;\n    }\n\n    function readSQElementUndefinedLengthImplicit(byteStream, element)\n    {\n        while(byteStream.position < byteStream.byteArray.length)\n        {\n            var item = readSequenceItemImplicit(byteStream);\n            element.items.push(item);\n\n            // If this is the sequence delimitation item, return the offset of the next element\n            if(item.tag === 'xfffee0dd')\n            {\n                // sequence delimitation item, update attr data length and return\n                element.length = byteStream.position - element.dataOffset;\n                return;\n            }\n        }\n\n        // eof encountered - log a warning and set the length of the element based on the buffer size\n        byteStream.warnings.push('eof encountered before finding sequence delimitation item in sequence of undefined length');\n        element.length = byteStream.byteArray.length - element.dataOffset;\n    }\n\n    function readSQElementKnownLengthImplicit(byteStream, element)\n    {\n        var maxPosition = element.dataOffset + element.length;\n        while(byteStream.position < maxPosition)\n        {\n            var item = readSequenceItemImplicit(byteStream);\n            element.items.push(item);\n        }\n    }\n\n    /**\n     * Reads sequence items for an element in an implicit little endian byte stream\n     * @param byteStream the implicit little endian byte stream\n     * @param element the element to read the sequence items for\n     */\n    dicomParser.readSequenceItemsImplicit = function(byteStream, element)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsImplicit: missing required parameter 'byteStream'\";\n        }\n        if(element === undefined)\n        {\n            throw \"dicomParser.readSequenceItemsImplicit: missing required parameter 'element'\";\n        }\n\n        element.items = [];\n\n        if(element.length === 4294967295)\n        {\n            readSQElementUndefinedLengthImplicit(byteStream, element);\n        }\n        else\n        {\n            readSQElementKnownLengthImplicit(byteStream, element);\n        }\n    };\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads the tag and length of a sequence item and returns them as an object with the following properties\n     *  tag : string for the tag of this element in the format xggggeeee\n     *  length: the number of bytes in this item or 4294967295 if undefined\n     *  dataOffset: the offset into the byteStream of the data for this item\n     * @param byteStream the byte\n     * @returns {{tag: string, length: integer, dataOffset: integer}}\n     */\n    dicomParser.readSequenceItem = function(byteStream)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readSequenceItem: missing required parameter 'byteStream'\";\n        }\n\n        var element = {\n            tag : dicomParser.readTag(byteStream),\n            length : byteStream.readUint32(),\n            dataOffset :  byteStream.position\n        };\n\n        return element;\n    };\n\n\n    return dicomParser;\n}(dicomParser));\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nvar dicomParser = (function (dicomParser)\n{\n    \"use strict\";\n\n    if(dicomParser === undefined)\n    {\n        dicomParser = {};\n    }\n\n    /**\n     * Reads a tag (group number and element number) from a byteStream\n     * @param byteStream the byte stream to read from\n     * @returns {string} the tag in format xggggeeee where gggg is the lowercase hex value of the group number\n     * and eeee is the lower case hex value of the element number\n     */\n    dicomParser.readTag = function(byteStream)\n    {\n        if(byteStream === undefined)\n        {\n            throw \"dicomParser.readTag: missing required parameter 'byteStream'\";\n        }\n\n        var groupNumber =  byteStream.readUint16() * 256 * 256;\n        var elementNumber = byteStream.readUint16();\n        var tag = \"x\" + ('00000000' + (groupNumber + elementNumber).toString(16)).substr(-8);\n        return tag;\n    };\n\n    return dicomParser;\n}(dicomParser));\n    return dicomParser;\n}));\n","'use strict';\n\n/**\n * traversc: modified mouse wheel zoom to work with orthographic camera\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n/*global THREE, console */\n\n// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\n// the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\n// supported.\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\nTHREE.OrbitControls2D = function(object, domElement) {\n\n    this.object = object;\n    this.domElement = (domElement !== undefined) ? domElement : document;\n\n    // API\n\n    // Set to false to disable this control\n    this.enabled = true;\n\n    // \"target\" sets the location of focus, where the control orbits around\n    // and where it pans with respect to.\n    this.target = new THREE.Vector3();\n\n    // center is old, deprecated; use \"target\" instead\n    this.center = this.target;\n\n    // This option actually enables dollying in and out; left as \"zoom\" for\n    // backwards compatibility\n    this.noZoom = false;\n    this.zoomSpeed = 1.0;\n\n    // Limits to how far you can dolly in and out\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n\n    // Set to true to disable this control\n    this.noRotate = false;\n    this.rotateSpeed = 1.0;\n\n    // Set to true to disable this control\n    this.noPan = false;\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n\n    // Set to true to automatically rotate around the target\n    this.autoRotate = false;\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n    // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n    this.minPolarAngle = 0; // radians\n    this.maxPolarAngle = Math.PI; // radians\n\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n    this.minAzimuthAngle = -Infinity; // radians\n    this.maxAzimuthAngle = Infinity; // radians\n\n    // Set to true to disable use of the keys\n    this.noKeys = false;\n\n    // The four arrow keys\n    this.keys = {\n        LEFT: 37,\n        UP: 38,\n        RIGHT: 39,\n        BOTTOM: 40\n    };\n\n    // Mouse buttons\n    this.mouseButtons = {\n        ORBIT: THREE.MOUSE.LEFT,\n        ZOOM: THREE.MOUSE.MIDDLE,\n        PAN: THREE.MOUSE.RIGHT\n    };\n\n    ////////////\n    // internals\n\n    var scope = this;\n\n    var EPS = 0.000001;\n\n    var rotateStart = new THREE.Vector2();\n    var rotateEnd = new THREE.Vector2();\n    var rotateDelta = new THREE.Vector2();\n\n    var panStart = new THREE.Vector2();\n    var panEnd = new THREE.Vector2();\n    var panDelta = new THREE.Vector2();\n    var panOffset = new THREE.Vector3();\n\n    var offset = new THREE.Vector3();\n\n    var dollyStart = new THREE.Vector2();\n    var dollyEnd = new THREE.Vector2();\n    var dollyDelta = new THREE.Vector2();\n\n    var theta;\n    var phi;\n    var phiDelta = 0;\n    var thetaDelta = 0;\n    var scale = 1;\n    var pan = new THREE.Vector3();\n\n    var lastPosition = new THREE.Vector3();\n    var lastQuaternion = new THREE.Quaternion();\n\n    var STATE = {\n        NONE: -1,\n        ROTATE: 0,\n        DOLLY: 1,\n        PAN: 2,\n        TOUCH_ROTATE: 3,\n        TOUCH_DOLLY: 4,\n        TOUCH_PAN: 5\n    };\n\n    var state = STATE.NONE;\n\n    // for reset\n\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n\n    // so camera.up is the orbit axis\n\n    var quat = new THREE.Quaternion().setFromUnitVectors(object.up, new THREE.Vector3(0, 1, 0));\n    var quatInverse = quat.clone().inverse();\n\n    // events\n\n    var changeEvent = {\n        type: 'change'\n    };\n    var startEvent = {\n        type: 'start'\n    };\n    var endEvent = {\n        type: 'end'\n    };\n\n    this.rotateLeft = function(angle) {\n\n        if (angle === undefined) {\n\n            angle = getAutoRotationAngle();\n\n        }\n\n        thetaDelta -= angle;\n\n    };\n\n    this.rotateUp = function(angle) {\n\n        if (angle === undefined) {\n\n            angle = getAutoRotationAngle();\n\n        }\n\n        phiDelta -= angle;\n\n    };\n\n    // pass in distance in world space to move left\n    this.panLeft = function(distance) {\n\n        var te = this.object.matrix.elements;\n\n        // get X column of matrix\n        panOffset.set(te[0], te[1], te[2]);\n        panOffset.multiplyScalar(-distance);\n\n        pan.add(panOffset);\n\n    };\n\n    // pass in distance in world space to move up\n    this.panUp = function(distance) {\n\n        var te = this.object.matrix.elements;\n\n        // get Y column of matrix\n        panOffset.set(te[4], te[5], te[6]);\n        panOffset.multiplyScalar(distance);\n\n        pan.add(panOffset);\n\n    };\n\n    // pass in x,y of change desired in pixel space,\n    // right and down are positive\n    this.pan = function(deltaX, deltaY) {\n\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n        if (scope.object.fov !== undefined) {\n\n            // perspective\n            var position = scope.object.position;\n            var offset = position.clone().sub(scope.target);\n            var targetDistance = offset.length();\n\n            // half of the fov is center to top of screen\n            targetDistance *= Math.tan((scope.object.fov / 2) * Math.PI / 180.0);\n\n            // we actually don't use screenWidth, since perspective camera is fixed to screen height\n            scope.panLeft(2 * deltaX * targetDistance / element.clientHeight);\n            scope.panUp(2 * deltaY * targetDistance / element.clientHeight);\n\n        } else if (scope.object.top !== undefined) {\n\n            // orthographic\n            scope.panLeft(deltaX * (scope.object.right - scope.object.left) / (element.clientWidth * this.object.zoom));\n            scope.panUp(deltaY * (scope.object.top - scope.object.bottom) / (element.clientHeight * this.object.zoom));\n\n        } else {\n\n            // camera neither orthographic or perspective\n            console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n\n        }\n\n    };\n\n    //traversc: fix with orthographic camera zoom\n    this.dollyIn = function(dollyScale) {\n        if (dollyScale === undefined) {\n            dollyScale = getZoomScale();\n        }\n        if (scope.object.top !== undefined) {\n            this.object.zoom *= dollyScale;\n            this.object.updateProjectionMatrix();\n        } else {\n            scale /= dollyScale;\n        }\n    };\n\n    this.dollyOut = function(dollyScale) {\n        if (dollyScale === undefined) {\n            dollyScale = getZoomScale();\n        }\n        if (scope.object.top !== undefined) {\n            this.object.zoom /= dollyScale;\n            this.object.updateProjectionMatrix();\n        } else {\n            scale *= dollyScale;\n        }\n    };\n\n    this.update = function() {\n\n        var position = this.object.position;\n\n        offset.copy(position).sub(this.target);\n\n        // rotate offset to \"y-axis-is-up\" space\n        offset.applyQuaternion(quat);\n\n        // angle from z-axis around y-axis\n\n        theta = Math.atan2(offset.x, offset.z);\n\n        // angle from y-axis\n\n        phi = Math.atan2(Math.sqrt(offset.x * offset.x + offset.z * offset.z), offset.y);\n\n        if (this.autoRotate && state === STATE.NONE) {\n\n            this.rotateLeft(getAutoRotationAngle());\n\n        }\n\n        theta += thetaDelta;\n        phi += phiDelta;\n\n        // restrict theta to be between desired limits\n        theta = Math.max(this.minAzimuthAngle, Math.min(this.maxAzimuthAngle, theta));\n\n        // restrict phi to be between desired limits\n        phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, phi));\n\n        // restrict phi to be betwee EPS and PI-EPS\n        phi = Math.max(EPS, Math.min(Math.PI - EPS, phi));\n\n        var radius = offset.length() * scale;\n\n        // restrict radius to be between desired limits\n        radius = Math.max(this.minDistance, Math.min(this.maxDistance, radius));\n\n        // move target to panned location\n        this.target.add(pan);\n\n        offset.x = radius * Math.sin(phi) * Math.sin(theta);\n        offset.y = radius * Math.cos(phi);\n        offset.z = radius * Math.sin(phi) * Math.cos(theta);\n\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        offset.applyQuaternion(quatInverse);\n\n        position.copy(this.target).add(offset);\n\n        this.object.lookAt(this.target);\n\n        thetaDelta = 0;\n        phiDelta = 0;\n        scale = 1;\n        pan.set(0, 0, 0);\n\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (lastPosition.distanceToSquared(this.object.position) > EPS || 8 * (1 - lastQuaternion.dot(this.object.quaternion)) > EPS) {\n\n            this.dispatchEvent(changeEvent);\n\n            lastPosition.copy(this.object.position);\n            lastQuaternion.copy(this.object.quaternion);\n\n        }\n\n    };\n\n\n    this.reset = function() {\n\n        state = STATE.NONE;\n\n        this.target.copy(this.target0);\n        this.object.position.copy(this.position0);\n\n        this.update();\n\n    };\n\n    this.getPolarAngle = function() {\n\n        return phi;\n\n    };\n\n    this.getAzimuthalAngle = function() {\n\n        return theta;\n\n    };\n\n    function getAutoRotationAngle() {\n\n        return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n    }\n\n    function getZoomScale() {\n\n        return Math.pow(0.95, scope.zoomSpeed);\n\n    }\n\n    function onMouseDown(event) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n        event.preventDefault();\n\n        if (event.button === scope.mouseButtons.ORBIT) {\n            if (scope.noRotate === true) {\n                return;\n            }\n\n            state = STATE.ROTATE;\n\n            rotateStart.set(event.clientX, event.clientY);\n\n        } else if (event.button === scope.mouseButtons.ZOOM) {\n            if (scope.noZoom === true) {\n                return;\n            }\n\n            state = STATE.DOLLY;\n\n            dollyStart.set(event.clientX, event.clientY);\n\n        } else if (event.button === scope.mouseButtons.PAN) {\n            if (scope.noPan === true) {\n                return;\n            }\n\n            state = STATE.PAN;\n\n            panStart.set(event.clientX, event.clientY);\n\n        }\n\n        if (state !== STATE.NONE) {\n            document.addEventListener('mousemove', onMouseMove, false);\n            document.addEventListener('mouseup', onMouseUp, false);\n            scope.dispatchEvent(startEvent);\n        }\n\n    }\n\n    function onMouseMove(event) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n\n        event.preventDefault();\n\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n        if (state === STATE.ROTATE) {\n\n            if (scope.noRotate === true) {\n                return;\n            }\n\n            rotateEnd.set(event.clientX, event.clientY);\n            rotateDelta.subVectors(rotateEnd, rotateStart);\n\n            // rotating across whole screen goes 360 degrees around\n            scope.rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\n\n            // rotating up and down along whole screen attempts to go 360, but limited to 180\n            scope.rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n\n            rotateStart.copy(rotateEnd);\n\n        } else if (state === STATE.DOLLY) {\n\n            if (scope.noZoom === true) {\n                return;\n            }\n\n            dollyEnd.set(event.clientX, event.clientY);\n            dollyDelta.subVectors(dollyEnd, dollyStart);\n\n            if (dollyDelta.y > 0) {\n\n                scope.dollyIn();\n\n            } else {\n\n                scope.dollyOut();\n\n            }\n\n            dollyStart.copy(dollyEnd);\n\n        } else if (state === STATE.PAN) {\n\n            if (scope.noPan === true) {\n                return;\n            }\n\n            panEnd.set(event.clientX, event.clientY);\n            panDelta.subVectors(panEnd, panStart);\n\n            scope.pan(panDelta.x, panDelta.y);\n\n            panStart.copy(panEnd);\n\n        }\n\n        if (state !== STATE.NONE) {\n            scope.update();\n        }\n\n    }\n\n    function onMouseUp( /* event */ ) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n\n        document.removeEventListener('mousemove', onMouseMove, false);\n        document.removeEventListener('mouseup', onMouseUp, false);\n        scope.dispatchEvent(endEvent);\n        state = STATE.NONE;\n\n    }\n\n    function onMouseWheel(event) {\n\n        if (scope.enabled === false || scope.noZoom === true || state !== STATE.NONE) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        var delta = 0;\n\n        if (event.wheelDelta !== undefined) { // WebKit / Opera / Explorer 9\n\n            delta = event.wheelDelta;\n\n        } else if (event.detail !== undefined) { // Firefox\n\n            delta = -event.detail;\n\n        }\n\n        if (delta > 0) {\n\n            scope.dollyOut();\n\n        } else {\n\n            scope.dollyIn();\n\n        }\n\n        scope.update();\n        scope.dispatchEvent(startEvent);\n        scope.dispatchEvent(endEvent);\n\n    }\n\n    function onKeyDown(event) {\n\n        if (scope.enabled === false || scope.noKeys === true || scope.noPan === true) {\n            return;\n        }\n\n        switch (event.keyCode) {\n\n            case scope.keys.UP:\n                scope.pan(0, scope.keyPanSpeed);\n                scope.update();\n                break;\n\n            case scope.keys.BOTTOM:\n                scope.pan(0, -scope.keyPanSpeed);\n                scope.update();\n                break;\n\n            case scope.keys.LEFT:\n                scope.pan(scope.keyPanSpeed, 0);\n                scope.update();\n                break;\n\n            case scope.keys.RIGHT:\n                scope.pan(-scope.keyPanSpeed, 0);\n                scope.update();\n                break;\n\n        }\n\n    }\n\n    function touchstart(event) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n\n        switch (event.touches.length) {\n\n            case 1: // one-fingered touch: rotate\n\n                if (scope.noRotate === true) {\n                    return;\n                }\n\n                state = STATE.TOUCH_ROTATE;\n\n                rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n                break;\n\n            case 2: // two-fingered touch: dolly\n\n                if (scope.noZoom === true) {\n                    return;\n                }\n\n                state = STATE.TOUCH_DOLLY;\n\n                var dx = event.touches[0].pageX - event.touches[1].pageX;\n                var dy = event.touches[0].pageY - event.touches[1].pageY;\n                var distance = Math.sqrt(dx * dx + dy * dy);\n                dollyStart.set(0, distance);\n                break;\n\n            case 3: // three-fingered touch: pan\n\n                if (scope.noPan === true) {\n                    return;\n                }\n\n                state = STATE.TOUCH_PAN;\n\n                panStart.set(event.touches[0].pageX, event.touches[0].pageY);\n                break;\n\n            default:\n\n                state = STATE.NONE;\n\n        }\n\n        if (state !== STATE.NONE) {\n            scope.dispatchEvent(startEvent);\n        }\n\n    }\n\n    function touchmove(event) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n        switch (event.touches.length) {\n\n            case 1: // one-fingered touch: rotate\n\n                if (scope.noRotate === true) {\n                    return;\n                }\n                if (state !== STATE.TOUCH_ROTATE) {\n                    return;\n                }\n\n                rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n                rotateDelta.subVectors(rotateEnd, rotateStart);\n\n                // rotating across whole screen goes 360 degrees around\n                scope.rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\n                // rotating up and down along whole screen attempts to go 360, but limited to 180\n                scope.rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n\n                rotateStart.copy(rotateEnd);\n\n                scope.update();\n                break;\n\n            case 2: // two-fingered touch: dolly\n\n                if (scope.noZoom === true) {\n                    return;\n                }\n                if (state !== STATE.TOUCH_DOLLY) {\n                    return;\n                }\n\n                var dx = event.touches[0].pageX - event.touches[1].pageX;\n                var dy = event.touches[0].pageY - event.touches[1].pageY;\n                var distance = Math.sqrt(dx * dx + dy * dy);\n\n                dollyEnd.set(0, distance);\n                dollyDelta.subVectors(dollyEnd, dollyStart);\n\n                if (dollyDelta.y > 0) {\n\n                    scope.dollyOut();\n\n                } else {\n\n                    scope.dollyIn();\n\n                }\n\n                dollyStart.copy(dollyEnd);\n\n                scope.update();\n                break;\n\n            case 3: // three-fingered touch: pan\n\n                if (scope.noPan === true) {\n                    return;\n                }\n                if (state !== STATE.TOUCH_PAN) {\n                    return;\n                }\n\n                panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n                panDelta.subVectors(panEnd, panStart);\n\n                scope.pan(panDelta.x, panDelta.y);\n\n                panStart.copy(panEnd);\n\n                scope.update();\n                break;\n\n            default:\n\n                state = STATE.NONE;\n\n        }\n\n    }\n\n    function touchend( /* event */ ) {\n\n        if (scope.enabled === false) {\n            return;\n        }\n\n        scope.dispatchEvent(endEvent);\n        state = STATE.NONE;\n\n    }\n\n    this.domElement.addEventListener('contextmenu', function(event) {\n        event.preventDefault();\n    }, false);\n    this.domElement.addEventListener('mousedown', onMouseDown, false);\n    this.domElement.addEventListener('mousewheel', onMouseWheel, false);\n    this.domElement.addEventListener('DOMMouseScroll', onMouseWheel, false); // firefox\n\n    this.domElement.addEventListener('touchstart', touchstart, false);\n    this.domElement.addEventListener('touchend', touchend, false);\n    this.domElement.addEventListener('touchmove', touchmove, false);\n\n    window.addEventListener('keydown', onKeyDown, false);\n\n    // force an update at start\n    this.update();\n\n};\n\nTHREE.OrbitControls2D.prototype = Object.create(THREE.EventDispatcher.prototype);\nTHREE.OrbitControls2D.prototype.constructor = THREE.OrbitControls2D;\n\n// export the frame module\nmodule.exports = THREE.OrbitControls2D;\n","'use strict';\n\nvar VJS = VJS || {};\nVJS.core = VJS.core || {};\n\n/**\n * @constructor\n * @class\n * @memberOf VJS.core\n * @public\n*/\nVJS.core.intersections = VJS.core.intersections || {};\n\n/**\n * Compute intersection between oriented bounding box and a plane.\n * Returns intersection in plane's space (toOBBSpaceInvert applied).\n * Should return at least 3 intersections. If not, the plane and the box do not\n * intersect.\n *\n * @memberOf VJS.core.intersections\n * @public\n *\n * @param {Object} obb - Oriented Bounding Box representation.\n * @param {THREE.Vector3} obb.halfDimensions - Half dimensions of the box.\n * @param {THREE.Vector3<THREE.Vector3>} obb.orientation - Orientation of the edges of the box.\n * @param {THREE.Vector3} obb.center - Center of the box.\n * @param {THREE.Matrix4} obb.toOBBSpace - Transform to go from plane space to box space.\n * @param {THREE.Matrix4} obb.toOBBSpaceInvert - Transform to go from box space to plane space.\n * @param {Object} plane - Plane representation\n * @param {THREE.Vector3} plane.position - position of normal which describes the plane.\n * @param {THREE.Vector3} plane.direction - Direction of normal which describes the plane.\n *\n * @returns {Array<THREE.Vector3>} List of all intersections, in plane's space.\n *\n * @todo toOBBSpace and toOBBSpaceInvert might be redundent.\n * @todo find best way to deal with different spaces.\n */\n\nVJS.core.intersections.obbPlane = function(obb, plane) {\n\n  //\n  // obb = { halfDimensions, orientation, center, toOBBSpace }\n  // plane = { position, direction }\n  //\n  //\n  // LOGIC:\n  //\n  // Test intersection of each edge of the Oriented Bounding Box with the Plane\n  // \n  // ALL EDGES \n  //\n  //      .+-------+  \n  //    .' |     .'|  \n  //   +---+---+'  |  \n  //   |   |   |   |  \n  //   |  ,+---+---+  \n  //   |.'     | .'   \n  //   +-------+'     \n  //\n  // SPACE ORIENTATION\n  //\n  //       +\n  //     j |\n  //       |\n  //       |   i \n  //   k  ,+-------+  \n  //    .'\n  //   +\n  //\n  //\n  // 1- Move Plane position and orientation in IJK space\n  // 2- Test Edges/ IJK Plane intersections\n  // 3- Return intersection Edge/ IJK Plane if it touches the Oriented BBox\n\n  var intersections = [];\n\n  var t1 = plane.direction.clone().applyMatrix4(obb.toOBBSpace);\n  var t0 = new THREE.Vector3(0, 0, 0).applyMatrix4(obb.toOBBSpace);\n\n  var planeOBB = {\n    position: plane.position.clone().applyMatrix4(obb.toOBBSpace),\n    direction: new THREE.Vector3(t1.x - t0.x, t1.y - t0.y, t1.z - t0.z).normalize()\n  };\n\n  var bboxMin = new THREE.Vector3(\n      obb.center.x - obb.halfDimensions.x,\n      obb.center.y - obb.halfDimensions.y,\n      obb.center.z - obb.halfDimensions.z);\n  var bboxMax = new THREE.Vector3(\n      obb.center.x + obb.halfDimensions.x,\n      obb.center.y + obb.halfDimensions.y,\n      obb.center.z + obb.halfDimensions.z);\n\n  // 12 edges (i.e. ray)/plane intersection tests\n\n  // RAYS STARTING FROM THE FIRST CORNER (0, 0, 0)\n  //\n  //       +\n  //       |\n  //       |\n  //       | \n  //      ,+---+---+\n  //    .'   \n  //   +   \n\n  var ray = {\n    'position': new THREE.Vector3(obb.center.x - obb.halfDimensions.x, obb.center.y - obb.halfDimensions.y, obb.center.z - obb.halfDimensions.z),\n    'direction': obb.orientation.x\n  };\n\n  var intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.y;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.z;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  // RAYS STARTING FROM THE LAST CORNER\n  //\n  //               +\n  //             .'\n  //   +-------+'\n  //           |\n  //           |\n  //           |\n  //           +\n  //\n\n  ray = {\n    'position': new THREE.Vector3(obb.center.x + obb.halfDimensions.x, obb.center.y + obb.halfDimensions.y, obb.center.z + obb.halfDimensions.z),\n    'direction': obb.orientation.x\n  };\n\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.y;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.z;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  // RAYS STARTING FROM THE SECOND CORNER\n  //\n  //               +\n  //               |\n  //               |\n  //               |\n  //               +\n  //             .'\n  //           +'\n\n  ray = {\n    'position': new THREE.Vector3(obb.center.x + obb.halfDimensions.x, obb.center.y - obb.halfDimensions.y, obb.center.z - obb.halfDimensions.z),\n    'direction': obb.orientation.y\n  };\n\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.z;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  // RAYS STARTING FROM THE THIRD CORNER\n  //\n  //      .+-------+  \n  //    .'\n  //   +\n  //   \n  //   \n  //   \n  //   \n\n  ray = {\n    'position': new THREE.Vector3(obb.center.x - obb.halfDimensions.x, obb.center.y + obb.halfDimensions.y, obb.center.z - obb.halfDimensions.z),\n    'direction': obb.orientation.x\n  };\n\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.z;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  // RAYS STARTING FROM THE FOURTH CORNER\n  //\n  //   \n  //   \n  //   +\n  //   |\n  //   |  \n  //   |\n  //   +-------+\n\n  ray = {\n    'position': new THREE.Vector3(obb.center.x - obb.halfDimensions.x, obb.center.y - obb.halfDimensions.y, obb.center.z + obb.halfDimensions.z),\n    'direction': obb.orientation.x\n  };\n\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  ray.direction = obb.orientation.y;\n  intersection = this.rayPlane(ray, planeOBB);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection.applyMatrix4(obb.toOBBSpaceInvert));\n  }\n\n  return intersections;\n};\n\n/**\n * Compute intersection between a ray and a plane.\n *\n * @memberOf VJS.core.intersections\n * @public\n *\n * @param {Object} ray - Ray representation.\n * @param {THREE.Vector3} ray.position - position of normal which describes the ray.\n * @param {THREE.Vector3} ray.direction - Direction of normal which describes the ray.\n * @param {Object} plane - Plane representation\n * @param {THREE.Vector3} plane.position - position of normal which describes the plane.\n * @param {THREE.Vector3} plane.direction - Direction of normal which describes the plane.\n *\n * @returns {THREE.Vector3|null} Intersection between ray and plane or null.\n */\nVJS.core.intersections.rayPlane = function(ray, plane) {\n  // ray: {position, direction}\n  // plane: {position, direction}\n\n  if (ray.direction.dot(plane.direction) !== 0) {\n    //\n    // not parallel, move forward\n    //\n    // LOGIC:\n    //\n    // Ray equation: P = P0 + tV\n    // P = <Px, Py, Pz>\n    // P0 = <ray.position.x, ray.position.y, ray.position.z>\n    // V = <ray.direction.x, ray.direction.y, ray.direction.z>\n    //\n    // Therefore:\n    // Px = ray.position.x + t*ray.direction.x\n    // Py = ray.position.y + t*ray.direction.y\n    // Pz = ray.position.z + t*ray.direction.z\n    //\n    //\n    //\n    // Plane equation: ax + by + cz + d = 0\n    // a = plane.direction.x\n    // b = plane.direction.y\n    // c = plane.direction.z\n    // d = -( plane.direction.x*plane.position.x +\n    //        plane.direction.y*plane.position.y +\n    //        plane.direction.z*plane.position.z )\n    //\n    //\n    // 1- in the plane equation, we replace x, y and z by Px, Py and Pz\n    // 2- find t\n    // 3- replace t in Px, Py and Pz to get the coordinate of the intersection\n    //\n    var t = (plane.direction.x * (plane.position.x - ray.position.x) + plane.direction.y * (plane.position.y - ray.position.y) + plane.direction.z * (plane.position.z - ray.position.z)) /\n        (plane.direction.x * ray.direction.x + plane.direction.y * ray.direction.y + plane.direction.z * ray.direction.z);\n\n    var intersection = new THREE.Vector3(\n        ray.position.x + t * ray.direction.x,\n        ray.position.y + t * ray.direction.y,\n        ray.position.z + t * ray.direction.z);\n\n    return intersection;\n\n  }\n\n  return null;\n\n};\n\nVJS.core.intersections.rayBox = function(ray, box) {\n  // ray: {position, direction}\n  // box: {halfDimensions, center}\n\n  var intersections = [];\n  var plane = {\n    position: null,\n    direction: null\n  };\n\n  var bboxMin = new THREE.Vector3(\n    box.center.x - box.halfDimensions.x,\n    box.center.y - box.halfDimensions.y,\n    box.center.z - box.halfDimensions.z);\n  var bboxMax = new THREE.Vector3(\n      box.center.x + box.halfDimensions.x,\n      box.center.y + box.halfDimensions.y,\n      box.center.z + box.halfDimensions.z);\n\n  // X min\n  plane.direction = new THREE.Vector3(-1, 0, 0);\n  plane.position = new THREE.Vector3(\n    bboxMin.x,\n    box.center.y,\n    box.center.z);\n  var intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n\n  // X max\n  plane.direction = new THREE.Vector3(1, 0, 0);\n  plane.position = new THREE.Vector3(\n    bboxMax.x,\n    box.center.y,\n    box.center.z);\n  intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n\n  // Y min\n  plane.direction = new THREE.Vector3(0, -1, 0);\n  plane.position = new THREE.Vector3(\n    box.center.x,\n    bboxMin.y,\n    box.center.z);\n  intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n\n  // Y max\n  plane.direction = new THREE.Vector3(0, 1, 0);\n  plane.position = new THREE.Vector3(\n    box.center.x,\n    bboxMax.y,\n    box.center.z);\n  intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n\n  // Z min\n  plane.direction = new THREE.Vector3(0, 0, -1);\n  plane.position = new THREE.Vector3(\n    box.center.x,\n    box.center.y,\n    bboxMin.z);\n  intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n\n  // Z max\n  plane.direction = new THREE.Vector3(0, 0, 1);\n  plane.position = new THREE.Vector3(\n    box.center.x,\n    box.center.y,\n    bboxMax.z);\n  intersection = this.rayPlane(ray, plane);\n  if (this.inBBox(intersection, bboxMin, bboxMax)) {\n    intersections.push(intersection);\n  }\n  \n  return intersections;\n};\n\nVJS.core.intersections.inBBox = function(point, bboxMin, bboxMax) {\n  if (point &&\n  point.x >= bboxMin.x && point.y >= bboxMin.y && point.z >= bboxMin.z &&\n  point.x <= bboxMax.x && point.y <= bboxMax.y && point.z <= bboxMax.z) {\n    return true;\n  }\n  return false;\n};\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n  module.exports = VJS.core.intersections;\n}\n","'use strict';\n\nvar VJS = VJS || {};\nVJS.geometries = VJS.geometries || {};\n\n/*** Imports ***/\n\nVJS.core = VJS.core || {};\nVJS.core.intersections = VJS.core.intersections || require('../core/core.intersections');\n\n\n/**\n *\n * It is typically used for creating an irregular 3D planar shape given a box and the cut-plane.\n *\n * Demo: {@link https://fnndsc.github.io/vjs#geometry_slice}\n *\n * @constructor\n * @class\n * @memberOf VJS.geometries\n * @public\n *\n * @param {THREE.Vector3} halfDimensions - Half-dimensions of the box to be sliced.\n * @param {THREE.Vector3} center - Center of the box to be sliced.\n * @param {THREE.Vector3<THREE.Vector3>} orientation - Orientation of the box to be sliced. (might not be necessary..?)\n * @param {THREE.Vector3} position - Position of the cutting plane.\n * @param {THREE.Vector3} direction - Cross direction of the cutting plane.\n *\n * @example\n * // Define box to be sliced\n * var halfDimensions = new THREE.Vector(123, 45, 67);\n * var center = new THREE.Vector3(0, 0, 0);\n * var orientation = new THREE.Vector3(\n *   new THREE.Vector3(1, 0, 0),\n *   new THREE.Vector3(0, 1, 0),\n *   new THREE.Vector3(0, 0, 1)\n * );\n *\n * // Define slice plane\n * var position = center.clone();\n * var direction = new THREE.Vector3(-0.2, 0.5, 0.3);\n *\n * // Create the slice geometry & materials\n * var sliceGeometry = new VJS.geometries.slice(halfDimensions, center, orientation, position, direction);\n * var sliceMaterial = new THREE.MeshBasicMaterial({\n *   'side': THREE.DoubleSide,\n *   'color': 0xFF5722\n * });\n *\n *  // Create mesh and add it to the scene\n *  var slice = new THREE.Mesh(sliceGeometry, sliceMaterial);\n *  scene.add(slice);\n */\nVJS.geometries.slice = function(halfDimensions, center, orientation, position, direction) {\n\n    //\n    // prepare data for the shape!\n    //\n    var obb = {\n        'halfDimensions': halfDimensions,\n        'center': center,\n        'orientation': orientation,\n        'toOBBSpace': new THREE.Matrix4(), // not necessary\n        'toOBBSpaceInvert': new THREE.Matrix4() // not necessary\n    };\n\n    var plane = {\n        'position': position,\n        'direction': direction\n    };\n\n    // BOOM!\n    var intersections = VJS.core.intersections.obbPlane(obb, plane);\n\n    if (intersections.length < 3) {\n        window.console.log('WARNING: Less than 3 intersections between OBB and Plane.');\n        window.console.log('OBB');\n        window.console.log(obb);\n        window.console.log('Plane');\n        window.console.log(plane);\n        window.console.log('exiting...');\n    }\n\n    var centerOfMass = this.centerOfMass(intersections);\n    var orderedIntersections = this.orderIntersections(intersections, centerOfMass, direction);\n\n    // split for convenience\n    var formatIntersections = [];\n    var formatIntersectionsXY = [];\n    for (var k = 0; k < orderedIntersections.length; k++) {\n        formatIntersections.push(orderedIntersections[k].point);\n        formatIntersectionsXY.push(orderedIntersections[k].xy);\n    }\n\n    //\n    // Create Shape\n    //\n    var sliceShape = new THREE.Shape();\n    // move to first point!\n    sliceShape.moveTo(formatIntersectionsXY[0].x, formatIntersectionsXY[0].y);\n\n    // loop through all points!\n    for (var l = 1; l < formatIntersectionsXY.length; l++) {\n        // project each on plane!\n        sliceShape.lineTo(formatIntersectionsXY[l].x, formatIntersectionsXY[l].y);\n    }\n\n    // close the shape!\n    sliceShape.lineTo(formatIntersectionsXY[0].x, formatIntersectionsXY[0].y);\n\n    //\n    // Generate Geometry from shape\n    // It does triangulation for us!\n    //\n    THREE.ShapeGeometry.call(this, sliceShape);\n    this.type = 'SliceGeometry';\n\n    // update real position of each vertex! (not in 2d)\n    this.vertices = formatIntersections;\n    this.verticesNeedUpdate = true;\n};\n\nVJS.geometries.slice.prototype = Object.create(THREE.ShapeGeometry.prototype);\nVJS.geometries.slice.prototype.constructor = VJS.geometries.slice;\n\n/**\n *\n * Convenience function to extract center of mass from list of points.\n *\n * @private\n *\n * @param {Array<THREE.Vector3>} points - Set of points from which we want to extract the center of mass.\n *\n * @returns {THREE.Vector3} Center of mass from given points.\n */\nVJS.geometries.slice.prototype.centerOfMass = function(points) {\n    var centerOfMass = new THREE.Vector3(0, 0, 0);\n    for (var i = 0; i < points.length; i++) {\n        centerOfMass.x += points[i].x;\n        centerOfMass.y += points[i].y;\n        centerOfMass.z += points[i].z;\n    }\n    centerOfMass.divideScalar(points.length);\n\n    return centerOfMass;\n};\n\n/**\n *\n * Order 3D planar points around a refence point.\n *\n * @private\n *\n * @param {Array<THREE.Vector3>} points - Set of planar 3D points to be ordered.\n * @param {THREE.Vector3} reference - Reference point for ordering.\n * @param {THREE.Vector3} direction - Direction of the plane in which points and reference are sitting.\n *\n * @returns {Array<Object>} Set of object representing the ordered points.\n */\nVJS.geometries.slice.prototype.orderIntersections = function(points, reference, direction) {\n\n    var a0 = points[0].x;\n    var b0 = points[0].y;\n    var c0 = points[0].z;\n    var x0 = points[0].x - reference.x;\n    var y0 = points[0].y - reference.y;\n    var z0 = points[0].z - reference.z;\n    var l0 = {\n        origin: new THREE.Vector3(a0, b0, c0),\n        direction: new THREE.Vector3(x0, y0, z0).normalize()\n    };\n\n    var base = new THREE.Vector3(0, 0, 0)\n        .crossVectors(l0.direction, direction)\n        .normalize();\n\n    var orderedpoints = [];\n\n    // other lines // if inter, return location + angle\n    for (var j = 0; j < points.length; j++) {\n\n        var a1 = points[j].x;\n        var b1 = points[j].y;\n        var c1 = points[j].z;\n        var x1 = points[j].x - reference.x;\n        var y1 = points[j].y - reference.y;\n        var z1 = points[j].z - reference.z;\n\n        var l1 = {\n            origin: new THREE.Vector3(a1, b1, c1),\n            direction: new THREE.Vector3(x1, y1, z1).normalize()\n        };\n\n        var x = l0.direction.dot(l1.direction);\n        var y = base.dot(l1.direction);\n\n        var thetaAngle = Math.atan2(y, x);\n        var theta = thetaAngle * (180 / Math.PI);\n        orderedpoints.push({\n            'angle': theta,\n            'point': l1.origin,\n            'xy': {\n                'x': x,\n                'y': y\n            }\n        });\n    }\n\n    orderedpoints.sort(function(a, b) {\n        return a.angle - b.angle;\n    });\n\n    return orderedpoints;\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.geometries.slice;\n}\n","'use strict';\n\nvar VJS = VJS || {};\nVJS.helpers = VJS.helpers || {};\n\n/*** Imports ***/\n\nVJS.geometries = VJS.geometries || {};\nVJS.geometries.slice = VJS.geometries.slice || require('../geometries/geometries.slice');\n\nVJS.shaders = VJS.shaders || {};\nVJS.shaders.data = VJS.shaders.data || require('../shaders/shaders.data');\n\n\n\n\n\n//\n// https://en.wikipedia.org/wiki/Immediately-invoked_function_expression\nVJS.helpers.slice = function() {\n\n  THREE.Object3D.call(this);\n\n  // ...\n  this._series = null;\n  this._uniforms = null;\n  this._frameIndex = null;\n  this._slice = null;\n  this._border = null;\n\n  //\n  this._autoWindowLevel = false;\n\n};\n\nVJS.helpers.slice.prototype = Object.create(THREE.Object3D.prototype);\n\nVJS.helpers.slice.prototype.constructor = VJS.helpers.slice;\n\nVJS.helpers.slice.prototype.merge = function(seriesHelper) {\n  return this._series.merge(seriesHelper._series);\n};\n\nVJS.helpers.slice.prototype.addSeries = function(series) {\n  this._series = series;\n};\n\nVJS.helpers.slice.prototype.getStack = function(stackIndex) {\n  return stackIndex;\n};\n\nVJS.helpers.slice.prototype.prepare = function() {\n\n  window.console.log('helpers Series Prepare!!!');\n  if (this._series) {\n\n    // get first stack!\n    var stack = this._series._stack[0];\n    stack.prepare();\n    window.console.log(stack);\n\n    // Convenience function\n    var dimensions = stack._dimensions;\n    var halfDimensions = stack._halfDimensions;\n\n    // voxel offset\n    var offset = new THREE.Vector3(-0.5, -0.5, -0.5);\n\n    // Bounding Box\n    var geometry = new THREE.BoxGeometry(\n        dimensions.x, dimensions.y, dimensions.z);\n    geometry.applyMatrix(new THREE.Matrix4().makeTranslation(\n        halfDimensions.x + offset.x, halfDimensions.y + offset.y, halfDimensions.z + offset.z));\n    geometry.applyMatrix(stack._ijk2LPS);\n    var material = new THREE.MeshBasicMaterial({\n      wireframe: true,\n      color: 0x61F2F3\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    this.add(cube);\n\n    // Slice\n    // Geometry\n    //\n\n    // Define the bouding box used to generate the slice geometry\n    // center\n    // orientation\n    // and half-dimensions\n    var center = new THREE.Vector3(0, 0, 0);\n    var orientation = new THREE.Vector3(\n        new THREE.Vector3(1, 0, 0),\n        new THREE.Vector3(0, 1, 0),\n        new THREE.Vector3(0, 0, 1));\n\n    var position = new THREE.Vector3(\n      Math.floor(stack._halfDimensions.x),\n      Math.floor(stack._halfDimensions.y),\n      Math.floor(stack._halfDimensions.z) + 0.5 - stack._halfDimensions.z\n    );\n\n    var direction = new THREE.Vector3(0, 0, 1);\n\n    var sliceGeometry = new VJS.geometries.slice(\n        halfDimensions, center, orientation,\n        position, direction);\n    sliceGeometry.applyMatrix(new THREE.Matrix4().makeTranslation(\n        halfDimensions.x + offset.x, halfDimensions.y + offset.y, halfDimensions.z + offset.z));\n    sliceGeometry.applyMatrix(stack._ijk2LPS);\n\n    // update _framIndex\n    this._frameIndex = Math.floor(halfDimensions.z);\n\n    // Slice\n    // Material\n    var textures = [];\n    for (var m = 0; m < stack._nbTextures; m++) {\n      var tex = new THREE.DataTexture(stack._rawData[m], stack._textureSize, stack._textureSize, THREE.RGBAFormat, THREE.UnsignedByteType, THREE.UVMapping, THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping, THREE.NearestFilter, THREE.NearestFilter);\n      tex.needsUpdate = true;\n      textures.push(tex);\n    }\n\n    var sliceMaterial = new THREE.ShaderMaterial({\n      // 'wireframe': true,\n      'side': THREE.DoubleSide,\n      'transparency': true,\n      'uniforms': VJS.shaders.data.parameters.uniforms,\n      'vertexShader': \"#define GLSLIFY 1\\nvarying vec4 vPos;\\n\\n//\\n// main\\n//\\nvoid main() {\\n\\n  vPos = modelMatrix * vec4(position, 1.0 );\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0 );\\n\\n}\",\n      'fragmentShader': \"#define GLSLIFY 1\\nuniform float uTextureSize;\\nuniform float uWindowLevel[2];\\nuniform sampler2D uTextureContainer[7];\\nuniform vec3 uDataDimensions;\\nuniform mat4 uWorldToData;\\nuniform int uNumberOfChannels;\\nuniform int uBitsAllocated;\\nuniform int uInvert;\\n\\n// hack because can not pass arrays if too big\\n// best would be to pass texture but have to deal with 16bits\\nuniform int uLut;\\nuniform float uLutI[16]; // 16 * 4 (intesity - r- g - b)\\nuniform float uLutR[16];\\nuniform float uLutG[16];\\nuniform float uLutB[16];\\n\\nvarying vec4 vPos;\\n\\nvec4 sampleAs3DTexture(in vec3 textureCoordinate) {\\n\\n  float slicePixelSize = 1.0 / uTextureSize;\\n  // Model coordinate (IJK) to data index\\n  float index = textureCoordinate.x * uDataDimensions.x + textureCoordinate.y * uDataDimensions.y * uDataDimensions.x + textureCoordinate.z * uDataDimensions.z * uDataDimensions.y * uDataDimensions.x;\\n\\n  // Map data index to right sampler2D texture\\n  float textureIndex = floor(index / (uTextureSize*uTextureSize));\\n  float inTextureIndex = mod(index, uTextureSize*uTextureSize);\\n\\n  // Get row and column in the texture\\n  float rowIndex = floor(inTextureIndex/uTextureSize);\\n  float colIndex = mod(inTextureIndex, uTextureSize);\\n\\n  // Map row and column to uv\\n  vec2 uv = vec2(0,0);\\n  uv.x = slicePixelSize * 0.5 + colIndex * slicePixelSize;\\n  uv.y = 1.0 - (slicePixelSize * 0.5 + rowIndex * slicePixelSize);\\n\\n  vec4 dataValue = vec4(0, 0, 0, 1);\\n  if(textureIndex == 0.0){\\n    dataValue = texture2D(uTextureContainer[0], uv);\\n  }\\n  else if(textureIndex == 1.0){\\n    dataValue = texture2D(uTextureContainer[1], uv);\\n  }\\n  else if(textureIndex == 2.0){\\n    dataValue = texture2D(uTextureContainer[2], uv);\\n  }\\n  else if(textureIndex == 3.0){\\n    dataValue = texture2D(uTextureContainer[3], uv);\\n  }\\n  else if(textureIndex == 4.0){\\n    dataValue = texture2D(uTextureContainer[4], uv);\\n  }\\n  else if(textureIndex == 5.0){\\n    dataValue = texture2D(uTextureContainer[5], uv);\\n  }\\n  else if(textureIndex == 6.0){\\n    dataValue = texture2D(uTextureContainer[6], uv);\\n  }\\n  // else if(textureIndex == 7.0){\\n  //   dataValue = texture2D(uTextureContainer[7], uv);\\n  // }\\n  // else if(textureIndex == 8.0){\\n  //   dataValue = texture2D(uTextureContainer[8], uv);\\n  // }\\n  // else if(textureIndex == 9.0){\\n  //   dataValue = texture2D(uTextureContainer[9], uv);\\n  // }\\n  // else if(textureIndex == 10.0){\\n  //   dataValue = texture2D(uTextureContainer[10], uv);\\n  // }\\n  // else if(textureIndex == 11.0){\\n  //   dataValue = texture2D(uTextureContainer[11], uv);\\n  // }\\n  // else if(textureIndex == 12.0){\\n  //   dataValue = texture2D(uTextureContainer[12], uv);\\n  // }\\n  // else if(textureIndex == 13.0){\\n  //   dataValue = texture2D(uTextureContainer[13], uv);\\n  // }\\n  // else if(textureIndex == 14.0){\\n  //   dataValue = texture2D(uTextureContainer[14], uv);\\n  // }\\n  // else if(textureIndex == 15.0){\\n  //   dataValue = texture2D(uTextureContainer[15], uv);\\n  // }\\n  // else {\\n  //   discard;\\n  // }\\n\\n  return dataValue;\\n}\\n\\nvoid main(void) {\\n\\n  // get texture coordinates of current pixel\\n  // might not be the right way to do it:\\n  // precision issues ar voxels limits\\n  // need to add machine epsilon?\\n  vec4 dataCoordinateRaw = uWorldToData * vPos;\\n  dataCoordinateRaw += 0.5;\\n  vec3 dataCoordinate = vec3(floor(dataCoordinateRaw.x), floor(dataCoordinateRaw.y), floor(dataCoordinateRaw.z));\\n\\n\\n  // if data in range, look it up in the texture!\\n  if(dataCoordinate.x >= 0.0\\n  && dataCoordinate.y >= 0.0\\n  && dataCoordinate.z >= 0.0\\n  && dataCoordinate.x < uDataDimensions.x\\n  && dataCoordinate.y < uDataDimensions.y\\n  && dataCoordinate.z < uDataDimensions.z\\n  ){\\n    vec3 textureCoordinate = dataCoordinate/uDataDimensions;\\n    vec4 dataValue = sampleAs3DTexture(textureCoordinate);\\n    //vec4(1.0, 0.5, 0.5, 1.0);//\\n    \\n\\n    // Threshold? to copr intensities out?\\n\\n    if(uNumberOfChannels == 1){\\n      // reconstruct 16bits data if any\\n      float rawValue = dataValue.r * 255.0 * 256.0 + dataValue.g * 255.0;\\n      float windowMin = uWindowLevel[0] - uWindowLevel[1]/2.0;\\n      float windowMax = uWindowLevel[0] + uWindowLevel[1]/2.0;\\n      float combined = ( rawValue - windowMin ) / uWindowLevel[1];\\n\\n      dataValue.r = dataValue.g = dataValue.b = combined;\\n    }\\n\\n    // Apply LUT table...\\n    // will pass it through a texture...\\n\\n    if(uLut == 1){\\n    // if uApplyLUT\\n    // if LUT Gradation? Interpolation\\n    // get LUT from texture\\n    for(int i=0; i<16; i++){\\n      if(dataValue.r < uLutI[i]){\\n        // i and i-1\\n        float dataValuePosition = dataValue.r - uLutI[i-1];\\n        float lutRange = uLutI[i] - uLutI[i-1];\\n        float lutWeight = dataValuePosition/lutRange;\\n        // use gradation or not??\\n        // color distance\\n        float colorDistanceR = uLutR[i] - uLutR[i-1];\\n        float colorDistanceG = uLutG[i] - uLutG[i-1];\\n        float colorDistanceB = uLutB[i] - uLutB[i-1];\\n\\n        // by weight\\n        float colorIncrementR = lutWeight * colorDistanceR;\\n        float colorIncrementG = lutWeight * colorDistanceG;\\n        float colorIncrementB = lutWeight * colorDistanceB;\\n\\n        // add it\\n        dataValue.r = uLutR[i-1] + colorIncrementR;\\n        dataValue.g = uLutG[i-1] + colorIncrementG;\\n        dataValue.b = uLutB[i-1] + colorIncrementB;\\n        // dataValue.r += colorIncrementR;\\n        // dataValue.g += colorIncrementG;\\n        // dataValue.b += colorIncrementB;\\n       break;\\n     }\\n    }\\n    }\\n\\n    // Apply label map...?\\n    // target specific intensity\\n\\n    if(uInvert == 1){\\n      dataValue = vec4(1, 1, 1, 1) - dataValue;\\n      dataValue.a = 1.0;\\n    }\\n\\n    gl_FragColor = dataValue;\\n  }\\n  else{\\n    // should be able to choose what we want to do if not in range:\\n    // discard or specific color\\n    //discard;\\n    gl_FragColor = vec4(0.011, 0.662, 0.956, 1.0);\\n  }\\n}\"\n    });\n\n    // important so uniforms are not overwritten!\n    // clone it!\n    var mySliceMaterial = sliceMaterial.clone();\n    this._uniforms = mySliceMaterial.uniforms;\n    this._uniforms.uTextureSize.value = stack._textureSize;\n    this._uniforms.uTextureContainer.value = textures;\n    // texture dimensions\n    this._uniforms.uDataDimensions.value = stack._dimensions;\n    // world to model\n    this._uniforms.uWorldToData.value = stack._lps2IJK;\n    // window level\n    this._uniforms.uWindowLevel.value = stack._windowLevel;\n    this._uniforms.uNumberOfChannels.value = stack._numberOfChannels;\n    this._uniforms.uBitsAllocated.value = stack._bitsAllocated;\n    this._uniforms.uInvert.value = stack._invert;\n\n    this._slice = new THREE.Mesh(sliceGeometry, mySliceMaterial);\n    this.add(this._slice);\n\n    // Border of the slice\n    var borderMaterial = new THREE.LineBasicMaterial({\n      color: 0xff0000,\n      polygonOffset: true,\n      polygonOffsetFactor: -0.1\n    });\n    var borderGeometry = new THREE.Geometry();\n    for (var i = 0; i < sliceGeometry.vertices.length; i++) {\n      borderGeometry.vertices.push(sliceGeometry.vertices[i]);\n    }\n    borderGeometry.vertices.push(sliceGeometry.vertices[0]);\n\n    // borderGeometry.vertices = sliceGeometry.vertices;\n    this._border = new THREE.Line(borderGeometry, borderMaterial);\n    this.add(this._border);\n\n  } else {\n    window.console.log('no series to be prepared...');\n  }\n};\n\nVJS.helpers.slice.prototype.updateSliceGeometry = function() {\n  var stack = this._series._stack[0];\n  var halfDimensions = stack._halfDimensions;\n  // voxel offset\n  var offset = new THREE.Vector3(-0.5, -0.5, -0.5);\n\n  var center = new THREE.Vector3(0, 0, 0);\n  var orientation = new THREE.Vector3(\n      new THREE.Vector3(1, 0, 0),\n      new THREE.Vector3(0, 1, 0),\n      new THREE.Vector3(0, 0, 1));\n\n  var position = new THREE.Vector3(\n    0,\n    0,\n    this._frameIndex + 0.5 - stack._halfDimensions.z\n    );\n\n  var direction = new THREE.Vector3(0, 0, 1);\n\n  var sliceGeometry = new VJS.geometries.slice(\n      halfDimensions, center, orientation,\n      position, direction);\n  sliceGeometry.applyMatrix(new THREE.Matrix4().makeTranslation(\n      halfDimensions.x + offset.x, halfDimensions.y + offset.y, halfDimensions.z + offset.z));\n  sliceGeometry.applyMatrix(stack._ijk2LPS);\n\n  // helper - update Geometry\n  //is memory leaking???\n\n  this._slice.geometry = sliceGeometry;\n  this._slice.geometry.verticesNeedUpdate = true;\n};\n\nVJS.helpers.slice.prototype.updateBorderGeometry = function() {\n\n  var borderGeometry = new THREE.Geometry();\n  for (var i = 0; i < this._slice.geometry.vertices.length; i++) {\n    borderGeometry.vertices.push(this._slice.geometry.vertices[i]);\n  }\n  borderGeometry.vertices.push(this._slice.geometry.vertices[0]);\n\n  this._border.geometry.vertices = borderGeometry.vertices;\n  this._border.geometry.verticesNeedUpdate = true;\n};\n\n// a delete method too!\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.helpers.slice;\n}","'use strict';\n\nvar VJS = VJS || {};\nVJS.loaders = VJS.loaders || {};\n\n/*** Imports ***/\n\nVJS.parsers = VJS.parsers || {};\nVJS.parsers.dicom = VJS.parsers.dicom || require('../parsers/parsers.dicom');\n\nVJS.models = VJS.models || {};\nVJS.models.series = VJS.models.series || require('../models/models.series');\nVJS.models.stack = VJS.models.stack || require('../models/models.stack');\nVJS.models.frame = VJS.models.frame || require('../models/models.frame');\n\nVJS.helpers = VJS.helpers || {};\nVJS.helpers.slice = VJS.helpers.slice || require('../helpers/helpers.slice');\n\n\n/**\n *\n * It is typically used to load a DICOM image. Use loading manager for\n * advanced usage, such as multiple files handling.\n *\n * Demo: {@link https://fnndsc.github.io/vjs#loader_dicom}\n *\n * @constructor\n * @class\n * @memberOf VJS.loaders\n * @public\n *\n * @param {THREE.DefaultLoadingManager=} manager - Manager for advanced users.\n *\n * @example\n * var files = ['/data/dcm/fruit'];\n *\n * // Instantiate a dicom loader\n * var dicomLoader = new VJS.loaders.dicom();\n *\n * // load a resource\n * loader.load(\n *   // resource URL\n *   files[0],\n *   // Function when resource is loaded\n *   function(object) {\n *     //scene.add( object );\n *     window.console.log(object);\n *   }\n * );\n */\nVJS.loaders.dicom = function(manager) {\n\n  this.manager =\n      (manager !== undefined) ? manager : THREE.DefaultLoadingManager;\n  this.crossOrigin = true;\n  this.responseType = 'arraybuffer';\n  this._imageHelper = null;\n  this._image = null;\n\n};\nVJS.loaders.dicom.prototype.constructor = VJS.loaders.dicom;\n\n/**\n *\n * Load target file and attach necessary callbacks.\n *\n * @todo Might want to implement onError extra layer like for \"onLoad\".\n * @public\n *\n * @param {string} url - Url of the file to be pulled.\n * @param {function} onLoad - On load callback, after response has been parsed by VJS.loaders.dicom.parse.\n * @param {function} onProgress - On progress callback.\n * @param {function} onError - On error callback.\n *\n * @returns {Array<Promise>} Loading sequence for each file.\n *\n */\nVJS.loaders.dicom.prototype.load = function(file, onLoad, onProgress, onError) {\n  // no more promises...!\n  //\n\n  var scope = this;\n\n  // scope._imageHelper = new Array(files.length);\n  // scope._image = new Array(files.length);\n\n  var loader = new THREE.XHRLoader(scope.manager);\n  loader.setCrossOrigin(this.crossOrigin);\n  loader.setResponseType(this.responseType);\n  loader.load(file, function(response) {\n\n    onLoad(scope.parse(response));\n\n  }, onProgress, onError);\n\n  // Build the promise sequence for each file\n  // return files.map(function(url, i) {\n\n  //   var loader = new VJS.loader.xhrpromise(scope.manager);\n  //   loader.setCrossOrigin(scope.crossOrigin);\n  //   loader.setResponseType(scope.responseType);\n\n  //   // 1- get the data\n  //   // return an array buffer\n  //   return loader.load(url, onProgress)\n  //     .catch(function(error) {\n  //       window.console.log(error);\n  //       if (onError) {\n  //         onError(error);\n  //       }\n  //     })\n  //   // 2- parse the array buffer\n  //   // return an image model\n  //     .then(function(response) {\n  //       var imageHelper = new VJS.helpers.image();\n  //       scope._imageHelper[i] = imageHelper;\n  //       var dicomParser = new VJS.parsers.dicom(response, imageHelper.id);\n  //       return dicomParser.parse();\n  //     })\n  //   // 3- create helper with image\n  //   // return the image helper\n  //     .then(function(image) {\n  //       scope._imageHelper[i].addImage(image);\n  //       scope._image[i] = image;\n\n  //       // a helper is an object we can directly add to the scene and visualize\n  //       window.console.log('ALL SET');\n\n  //       return scope._imageHelper[i];\n  //     })\n  //   // 4- run onLoad callback\n  //   // input is imageHelper\n  //   // (should it be the image?)\n  //     .then(function(imageHelper) {\n  //       if (onLoad) {\n  //         window.console.log('onLoad callback (i.e. add to scene or play with helper)');\n  //         onLoad(imageHelper);\n  //       }\n\n  //       return imageHelper;\n  //     });\n  // });\n};\n\n/**\n *\n * Parse the response and returned a well formatted VJS Image Helper;\n *\n * @public\n *\n * @param {arraybuffer} response - Data to be parsed.\n *\n * @returns {VJS.Helper.Image}\n *\n */\nVJS.loaders.dicom.prototype.parse = function(response) {\n  window.console.log(response);\n  window.console.log('file downloaded yay!');\n\n  // series helper with lot of goodies\n  var seriesHelper = new VJS.helpers.slice();\n\n  // parse DICOM\n  var dicomParser = null;\n  try {\n    dicomParser = new VJS.parsers.dicom(response, seriesHelper.id);\n  }\n  catch (e) {\n    window.console.log('error cought in dicom loader');\n    window.console.log(e);\n    return null;\n  }\n\n// throw new Error('My message')\n  \n    \n  // create a series\n  var series = new VJS.models.series();\n  series._seriesInstanceUID = dicomParser.seriesInstanceUID();\n  series._numberOfFrames = dicomParser.numberOfFrames();\n  if(!series._numberOfFrames){\n    series._numberOfFrames = 1;\n  }\n  series._numberOfChannels = dicomParser.numberOfChannels();\n\n  // just create 1 dummy stack for now\n  var stack = new VJS.models.stack();\n  stack._numberOfChannels = dicomParser.numberOfChannels();\n\n  series._stack.push(stack);\n\n  // loop through all the frames!\n  for (var i = 0; i < series._numberOfFrames; i++) {\n    // shoud check for target stack\n    // should check if frame was already added in stack\n    // etc.\n    var frame = new VJS.models.frame();\n    frame._rows = dicomParser.rows(i);\n    frame._columns = dicomParser.columns(i);\n    frame._pixelData = dicomParser.extractPixelData(i);\n    frame._pixelSpacing = dicomParser.pixelSpacing(i);\n    frame._sliceThickness = dicomParser.sliceThickness(i);\n    frame._imageOrientation = dicomParser.imageOrientation(i);\n    frame._imagePosition = dicomParser.imagePosition(i);\n    frame._dimensionIndexValues = dicomParser.dimensionIndexValues(i);\n    frame._bitsAllocated = dicomParser.bitsAllocated(i);\n    frame._instanceNumber = dicomParser.instanceNumber(i);\n    frame._windowCenter = dicomParser.windowCenter(i);\n    frame._windowWidth = dicomParser.windowWidth(i);\n    // should pass frame index for consistency...\n    frame._minMax = dicomParser.minMaxPixelData(frame._pixelData);\n\n    stack._frame.push(frame);\n  }\n\n  // var image = dicomParser.parse();\n\n  // add image to image helper\n  // image helper is a 3D object image wherease image is a general JS Object\n  seriesHelper.addSeries(series);\n  return seriesHelper;\n  //var self = this;\n\n  //return new Promise(function(resolve) {\n\n  // console.time('LoaderDicom');\n  // // use response as input to image helper.\n  // // can provide an image or not...\n  // var imageHelper = new VJS.helpers.image();\n  // var dicomParser = new VJS.parsers.dicom(response, imageHelper.id);\n\n  // //var image = dicomParser.parse();\n  // var sequence = Promise.resolve();\n  // sequence\n  //   .then(function() {\n  //     return dicomParser.parse();\n  //   })\n  //   .then(function(image) {\n  //     imageHelper.add(image);\n  //     console.timeEnd('LoaderDicom');\n  //     return (imageHelper);\n  //   });\n\n  // return sequence;\n\n  //imageHelper.add(dicomParser.parse());\n\n  //\n  //  Create A dicom parser to help us fill the Image Helper!\n  //\n\n  // var dicomParser = new VJS.parsers.dicom(name, jQueryDom);\n\n  // var object, objects = [];\n  // var geometry, material;\n\n  // for ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n  //   object = objects[ i ];\n  //   geometry = object.geometry;\n\n  //   var buffergeometry = new THREE.BufferGeometry();\n\n  //   buffergeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( geometry.vertices ), 3 ) );\n\n  //   if ( geometry.normals.length > 0 ) {\n  //     buffergeometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( geometry.normals ), 3 ) );\n  //   }\n\n  //   if ( geometry.uvs.length > 0 ) {\n  //     buffergeometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( geometry.uvs ), 2 ) );\n  //   }\n\n  //   material = new THREE.MeshLambertMaterial();\n  //   material.name = object.material.name;\n\n  //   var mesh = new THREE.Mesh( buffergeometry, material );\n  //   mesh.name = object.name;\n\n  //   container.add( mesh );\n\n  // }\n\n  //resolve(imageHelper);\n  //});\n\n// VJS.parsers.dicom.prototype.parsePromise = function() {\n//   var self = this;\n//   console.time('Parsing Dicom');\n//   var imageNameFS = 'image_' + self._id;\n//   var frameNameFS = imageNameFS + '-raw.8b';\n//   //\n//   // Promises in action!\n//   //\n//   var sequence = Promise.resolve();\n//   return sequence\n//         .then(function() {\n//           // same image to Virtual FS\n//           return self.fileToFS(imageNameFS, self._arrayBuffer);\n//         })\n//         .then(function() {\n//           // extract frames from image and save it on Vistual FS\n//           return self.framesToFS(imageNameFS, frameNameFS);\n//         })\n//         .then(function() {\n//           // extract dicom header from image and convert it to XML\n//           return self.dumpToXML(imageNameFS);\n//         })\n//         .then(function(xml) {\n//           // parse XML Header and build VJS objects\n//           var $dicomDom = $.parseXML(xml);\n//           //window.console.log($dicomDom);\n//           var image = self.domToImage($dicomDom, frameNameFS);\n//           //resolve(self.domToImage($dicomDom, frameNameFS));\n\n//           // Dom to image it!\n//           return image;\n//         });\n// };\n};\n\n\n\n/** Exports **/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.loaders.dicom;\n}\n","'use strict';\n\nvar VJS = VJS || {};\nVJS.models = VJS.models || {};\n\n/**\n * Base frame object.\n *\n * @constructor\n * @class\n * @memberOf VJS.models\n */\nVJS.models.frame = function() {\n    /**\n     * @member\n     * @type {string}\n     */\n    this._id = '-1';\n    /**\n     * @member\n     * @type {number}\n     */\n    this._stackID = -1;\n    /**\n     * @member\n     * @type {number}\n     */\n    this._rows = 0;\n    /**\n     * @member\n     * @type {number}\n     */\n    this._columns = 0;\n    /**\n     * @member\n     * @type {Array.number}\n     */\n    this._dimensionIndexValues = [];\n    /**\n     * @member\n     * @type {Object}\n     * @property {number} x\n     * @property {number} y\n     * @property {number} z\n     */\n    this._imagePositionPatient = {\n        'x': 0,\n        'y': 0,\n        'z': 0\n    };\n    /**\n     * @member\n     * @type {Object}\n     * @property {Object} row\n     * @property {number} row.x\n     * @property {number} row.y\n     * @property {number} row.z\n     * @property {Object} column\n     * @property {number} column.x\n     * @property {number} column.y\n     * @property {number} column.z\n     */\n    this._imageOrientationPatient = {\n        'row': {\n            'x': 0,\n            'y': 0,\n            'z': 0\n        },\n        'column': {\n            'x': 0,\n            'y': 0,\n            'z': 0\n        }\n    };\n    /**\n     * @member\n     * @type {number}\n     */\n    this._sliceThickness = 1;\n    /**\n     * @member\n     * @type {Object}\n     * @property {number} row\n     * @property {number} column\n     */\n    this._pixelSpacing = {\n        'row': 1,\n        'column': 1\n    };\n    this._spacingBetweenSlices = null;\n    /**\n     * @member\n     * @type {Array}\n     */\n    this._pixelData = null;\n\n    this._instanceNumber = null;\n    this._windowCenter = null;\n    this._windowWidth = null;\n\n    this._minMax = null;\n};\n\nVJS.models.frame.prototype.constructor = VJS.models.frame;\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.models.frame;\n}\n","'use strict';\n\nvar VJS = VJS || {};\nVJS.models = VJS.models || {};\n\n/**\n * Define the series object here\n *\n * @constructor\n * @class\n * @memberOf VJS.models\n * @public\n */\nVJS.models.series = function() {\n    this._id = -1; // Always good to have an ID\n    this._concatenationUID = -1;\n    this._seriesInstanceUID = -1;\n    this._seriesNumber = -1;\n    this._dimensionIndexSequence = [];\n\n    // should probably not be there\n    this._rows = 0;\n    this._columns = 0;\n    this._photometricInterpretation = '';\n\n    this._numberOfFrames = 0;\n    this._numberOfChannels = 1;\n    this._instanceNumber = 0;\n\n    this._stack = [];\n};\n\n// it is a helper!\nVJS.models.series.prototype.merge = function(series) {\n    // try to merge seriesHelper with current series.\n    // same series if same Series UID?\n    // could use concatenation if available, to already know if series is complete!\n    var sameSeriesUID = false;\n    if (this._seriesInstanceUID === series._seriesInstanceUID) {\n        window.console.log('stacks belong to same series!');\n        sameSeriesUID = true;\n\n        // Make sure series information is consisent?\n        // re-compute it?\n        var stack = series._stack;\n        // Merge Stacks (N against N)\n        // try to match all stack to current stacks, if not add it to stacks list!\n        for (var i = 0; i < stack.length; i++) {\n            // test stack against existing stack\n            for (var j = 0; j < this._stack.length; j++) {\n                window.console.log(this._stack[j], stack[i]);\n                if (this._stack[j].merge(stack[i])) {\n                    // merged successfully\n                    window.console.log('stacks merged successfully!');\n                    break;\n                } else if (j === this._stack.length - 1) {\n                    // last merge was not successful\n                    // this is a new stack\n                    window.console.log('stacks added to the list!');\n                    this._stack.push(stack[i]);\n                }\n            }\n\n        }\n    }\n\n    return sameSeriesUID;\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.models.series;\n}","'use strict';\n\nvar VJS = VJS || {};\nVJS.models = VJS.models || {};\n\n/**\n * Define the stack object here\n *\n * @constructor\n * @class\n * @memberOf VJS.models\n * @public\n */\nVJS.models.stack = function() {\n  /**\n   * @member\n   * @type {string}\n   */\n  this._id = '-1';\n  /**\n   * @member\n   * @type {string}\n   */\n  this._uid = null; // first stack ID -> (0020, 9056)\n  /**\n   * @member\n   * @type {number}\n   */\n  this._stackID = -1;\n  /**\n   * @member\n   * @type {Array.<VJS.frame.model>}\n   */\n  this._frame = [];\n  /**\n   * @member\n   * @type {number}\n   */\n  this._rows = 0;\n  /**\n   * @member\n   * @type {number}\n   */\n  this._columns = 0;\n  /**\n   * @member\n   * @type {number}\n   */\n  this._numberOfFrames = 0;\n  /**\n   * @member\n   * @type {Object}\n   * @property {number} row\n   * @property {number} column\n   */\n  this._pixelSpacing = {\n    'row': 0,\n    'column': 0\n  };\n  this._spacingBetweenSlices = 0;\n  /**\n   * @member\n   * @type {number}\n   */\n  this._sliceThickness = 0;\n\n  // origin of the first slice of the stack!\n  this._origin = null;\n  this._halfDimensions = null;\n  this._orientation = null;\n\n  this._textureSize = 4096;\n  this._nbTextures = 7; // HIGH RES..\n  this._rawData = [];\n  // this._windowCenter = 0;\n  // this._windowWidth = 0;\n  this._windowLevel = [0, 0];\n  this._windowCenter = 0;\n  this._windowWidth = 0;\n  this._minMax = [65535, -32768];\n  this._invert = false;\n\n  this._ijk2LPS = null;\n  this._lps2IJK = null;\n\n  // Slicer values\n  this._dimensions = null;\n  this._spacing = null;\n  this._origin = null;\n  this._direction = null;\n};\n\n/**\n * here me make sure eveything is ready for visualization.\n * might also have a switch to say what we can view and what we can not view with current stack\n *\n * @public\n */\nVJS.models.stack.prototype.prepare = function() {\n\n  // dimensions of the stack\n  this._numberOfFrames = this._frame.length;\n\n  window.console.log(this);\n  this.orderFrames();\n  var zSpacing = this.zSpacing();\n\n  // prepare the frame\n  if (this._frame[0]._pixelSpacing) {\n    this._pixelSpacing.row = this._frame[0]._pixelSpacing[0];\n    this._pixelSpacing.column = this._frame[0]._pixelSpacing[1];\n  } else if (this._frame[0]._pixelAspectRatio) {\n    this._pixelSpacing.row = 1.0;\n    this._pixelSpacing.column = 1.0 * this._frame[0]._pixelAspectRatio[1] / this._frame[0]._pixelAspectRatio[0];\n  } else {\n    this._pixelSpacing.row = 1.0;\n    this._pixelSpacing.column = 1.0;\n  }\n\n  if (!this._frame[0]._imagePosition) {\n    this._frame[0]._imagePosition = [0, 0, 0];\n  }\n\n  if (!this._frame[0]._imageOrientation) {\n    this._frame[0]._imageOrientation = [1, 0, 0, 0, 1, 0];\n  }\n\n  this._rows = this._frame[0]._rows;\n  this._columns = this._frame[0]._columns;\n  this._dimensions = new THREE.Vector3(this._columns, this._rows, this._numberOfFrames);\n\n  this._spacingBetweenSlices = this._frame[0]._spacingBetweenSlices;\n  this._sliceThickness = this._frame[0]._sliceThickness;\n\n  for (var i = 0; i < this._frame.length; i++) {\n\n    // check rows consistency\n    if (this._rows !== this._frame[i]._rows) {\n      // send an error message...\n      window.console.log('Numbers of rows in stack\\'s frames is not consistent.');\n      window.console.log(this);\n      window.console.log('First frame had: ', this._rows, ' rows');\n      window.console.log('Frame index: ', i, ' has: ', this._frame[i]._rows, ' rows.');\n    }\n\n    // check columns consitency\n    if (this._columns !== this._frame[i]._columns) {\n      // send an error message...\n      window.console.log('Numbers of columns in stack\\'s frames is not consistent.');\n      window.console.log(this);\n      window.console.log('First frame had: ', this._columns, ' columns.');\n      window.console.log('Frame index: ', i, ' has: ', this.frame[i]._columns, ' columns.');\n    }\n\n    // // check for spacing consistency\n    // if (this._pixelSpacing.row !== this._frame[i]._pixelSpacing[0] || this._pixelSpacing.column !== this._frame[i]._pixelSpacing[1]) {\n    //   // send an error message...\n    //   window.console.log('Spacing in stack\\'s frames is not consistent.');\n    //   window.console.log(this);\n    //   window.console.log('First frame had : ', this._pixelSpacing.row, ' x ', this._pixelSpacing.column, ' spacing.');\n    //   window.console.log('Frame index : ', i, ' has: ', this._frame[i]._pixelSpacing[0], ' x ', this._frame[i]._pixelSpacing[1], ' spacing.');\n    // }\n\n    // // check slice spacing consitency\n    // if (this._spacingBetweenSlices !== this._frame[i]._spacingBetweenSlices) {\n    //   // send an error message...\n    //   window.console.log('Spacing betwen slices in stack\\'s frames is not consistent.');\n    //   window.console.log(this);\n    //   window.console.log('First frame had: ', this._spacingBetweenSlices, ' spacing betwen slices.');\n    //   window.console.log('Frame index: ', i, ' has: ', this.frame[i]._spacingBetweenSlices, ' spacing betwen slices.');\n    // }\n\n    // // check for slice thickness consistency\n    // if (this._sliceThickness !== this._frame[i]._sliceThickness) {\n    //   window.console.log('Slice thickness in stack\\'s frames is not consistent.');\n    //   window.console.log(this);\n    //   window.console.log('First frame had: ', this._sliceThickness, ' sliceThickness.');\n    //   window.console.log('Frame index: ', i, ' has: ', this._frame[i]._sliceThickness, ' sliceThickness.');\n    // }\n\n    // get min/max\n    this._minMax[0] = Math.min(this._minMax[0], this._frame[i]._minMax[0]);\n    this._minMax[1] = Math.max(this._minMax[1], this._frame[i]._minMax[1]);\n  }\n\n  // Origin\n  this._origin = new THREE.Vector3(\n      this._frame[0]._imagePosition[0],\n      this._frame[0]._imagePosition[1],\n      this._frame[0]._imagePosition[2]\n      );\n\n  // Direction\n  window.console.log('first frame value!');\n  window.console.log(this._frame[0]._imageOrientation[0]);\n  var xCosine = new THREE.Vector3(\n      this._frame[0]._imageOrientation[0],\n      this._frame[0]._imageOrientation[1],\n      this._frame[0]._imageOrientation[2]\n  );\n  window.console.log(xCosine);\n\n  var yCosine = new THREE.Vector3(\n      this._frame[0]._imageOrientation[3],\n      this._frame[0]._imageOrientation[4],\n      this._frame[0]._imageOrientation[5]\n  );\n  var zCosine = new THREE.Vector3(0, 0, 0).crossVectors(xCosine, yCosine).normalize();\n  this._direction = new THREE.Matrix4();\n  this._direction.set(\n      xCosine.x, yCosine.x, zCosine.x, 0,\n      xCosine.y, yCosine.y, zCosine.y, 0,\n      xCosine.z, yCosine.z, zCosine.z, 0,\n      0, 0, 0, 1);\n\n  window.console.log(this._direction);\n\n  this._spacing = new THREE.Vector3(\n      this._pixelSpacing.row,\n      this._pixelSpacing.column,\n      zSpacing);\n\n  window.console.log(this._spacing);\n\n  // half dimensions are useful for faster computations of intersection.\n  this._halfDimensions = new THREE.Vector3(\n      this._dimensions.x / 2, this._dimensions.y / 2, this._dimensions.z / 2);\n\n  // orientation needed to compute stack BBox interection against slice.\n  // always same, might want to remove it.\n  var baseX = new THREE.Vector3(1, 0, 0);\n  var baseY = new THREE.Vector3(0, 1, 0);\n  var baseZ = new THREE.Vector3(0, 0, 1);\n  this._orientation = new THREE.Vector3(baseX, baseY, baseZ);\n\n  // IJK to LPS transform.\n  // and inverse.\n  this._ijk2LPS = new THREE.Matrix4();\n  this._ijk2LPS.set(\n      xCosine.x * this._spacing.x, yCosine.x * this._spacing.y, zCosine.x * this._spacing.z, this._origin.x,\n      xCosine.y * this._spacing.x, yCosine.y * this._spacing.y, zCosine.y * this._spacing.z, this._origin.y,\n      xCosine.z * this._spacing.x, yCosine.z * this._spacing.y, zCosine.z * this._spacing.z, this._origin.z,\n      0, 0, 0, 1);\n\n  this._lps2IJK = new THREE.Matrix4();\n  this._lps2IJK.getInverse(this._ijk2LPS);\n\n  window.console.log(this._lps2IJK, this._ijk2LPS, this._direction);\n\n  // only works with 1 channel for now...\n  var nbVoxels = this._dimensions.x * this._dimensions.y * this._dimensions.z;\n  window.console.log(this._dimensions);\n\n  // create 16 rgba textures\n  for (var ii = 0; ii < this._nbTextures; ii++) {\n    // *3 because always create RGB\n    this._rawData.push(new Uint8Array(this._textureSize * this._textureSize * 4));\n  }\n\n  // http://stackoverflow.com/questions/6413744/looking-to-access-16-bit-image-data-in-javascript-webgl\n\n  // Can not just use subarray because we have to normalize the values (Uint* 0<x<255)\n  //var prevFrame = -1;\n  //var prevTexture = -1;\n\n  // ADD WARNING IF DATA TO BIG TO FIT IN MEMORY...!\n\n  var frameDimension = this._dimensions.x * this._dimensions.y;\n  var textureDimension = this._textureSize * this._textureSize;\n\n  console.time('arrangeDataForWebgl');\n\n  for (var jj = 0; jj < nbVoxels; jj++) {\n\n    var frameIndex = Math.floor(jj / frameDimension);\n    var inFrameIndex = jj % (frameDimension);\n\n    var textureIndex = Math.floor(jj / textureDimension);\n    var inTextureIndex = jj % (textureDimension);\n    if (this._numberOfChannels === 3) {\n\n      this._rawData[textureIndex][4 * inTextureIndex] = this._frame[frameIndex]._pixelData[4 * inFrameIndex];\n      this._rawData[textureIndex][4 * inTextureIndex + 1] = this._frame[frameIndex]._pixelData[4 * inFrameIndex + 1];\n      this._rawData[textureIndex][4 * inTextureIndex + 2] = this._frame[frameIndex]._pixelData[4 * inFrameIndex + 2];\n      this._rawData[textureIndex][4 * inTextureIndex + 3] = this._frame[frameIndex]._pixelData[4 * inFrameIndex + 3];\n\n    } else {\n      //\n\n      var rawValue = this._frame[frameIndex]._pixelData[inFrameIndex];\n\n      // get most significant (msb) and less significant (lsb) bytes\n      // deal with sign?\n      // deal with number of channels\n      // deal with image type (single/multi channel)\n      // >> or >>> ?\n      // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Unsigned_right_shift\n\n      /*jshint bitwise: false*/\n      var lsb = rawValue & 0xFF;\n      var msb = (rawValue >> 8) & 0xFF;\n\n      // add \n      this._rawData[textureIndex][4 * inTextureIndex] = msb;\n      this._rawData[textureIndex][4 * inTextureIndex + 1] = lsb;\n\n      // can we add next msb/lsb to b/a - yes!\n      // or just forbid it?\n\n      this._rawData[textureIndex][4 * inTextureIndex + 2] = frameIndex;\n      this._rawData[textureIndex][4 * inTextureIndex + 3] = frameIndex;\n\n    }\n\n  }\n\n  // default window level based on min/max for now...\n  // could use the frame's windowWidth and center...\n  var width = this._minMax[1] - this._minMax[0];\n  var center = this._minMax[0] + width / 2;\n\n  this._windowWidth = width;\n  this._windowCenter = center;\n  this._windowLevel = [center, width];\n\n  // need to pass min/max\n  this._bitsAllocated = this._frame[0]._bitsAllocated;\n\n  window.console.log('window level: ', this._windowLevel);\n};\n\n/**\n * Order frames based on theirs dimensionIndexValues\n */\nVJS.models.stack.prototype.orderFrameOnDimensionIndices = function(a, b) {\n\n  if ('_dimensionIndexValues' in a && Object.prototype.toString.call(a._dimensionIndexValues) === '[object Array]' && '_dimensionIndexValues' in b && Object.prototype.toString.call(b._dimensionIndexValues) === '[object Array]') {\n    for (var i = 0; i < a._dimensionIndexValues.length; i++) {\n      if (parseInt(a._dimensionIndexValues[i]) > parseInt(b._dimensionIndexValues[i])) {\n        //window.console.log(a._dimensionIndexValues[i] + ' > ' + b._dimensionIndexValues[i]);\n        //window.console.log(typeof a._dimensionIndexValues[i] + ' > ' + typeof b._dimensionIndexValues[i]);\n        return 1;\n      }\n      if (parseInt(a._dimensionIndexValues[i]) < parseInt(b._dimensionIndexValues[i])) {\n        //window.console.log(a._dimensionIndexValues[i] + ' < ' + b._dimensionIndexValues[i]);\n        //window.console.log(typeof a._dimensionIndexValues[i] + ' < ' + typeof b._dimensionIndexValues[i]);\n        return -1;\n      }\n    }\n  } else {\n    window.console.log('One of the frames doesn\\'t have a _dimensionIndexValues array.');\n    window.console.log(a);\n    window.console.log(b);\n  }\n\n  return 0;\n};\n\nVJS.models.stack.prototype.orderFrames = function() {\n  // order the frames based on theirs dimension indices\n  // first index is the most important.\n  // 1,1,1,1 willl be first\n  // 1,1,2,1 will be next\n  // 1,1,2,3 will be next\n  // 1,1,3,1 wil be next\n  window.console.log(this);\n  if (this._frame[0]._dimensionIndexValues) {\n    this._frame.sort(VJS.models.stack.prototype.orderFrameOnDimensionIndices);\n  } else if (this._frame[0]._imagePosition && this._frame[0]._imageOrientation) {\n    // ORDERING BASED ON IMAGE POSITION\n    var xCosine = new THREE.Vector3(\n      this._frame[0]._imageOrientation[0],\n      this._frame[0]._imageOrientation[1],\n      this._frame[0]._imageOrientation[2]\n      );\n\n    var yCosine = new THREE.Vector3(\n      this._frame[0]._imageOrientation[3],\n      this._frame[0]._imageOrientation[4],\n      this._frame[0]._imageOrientation[5]\n    );\n\n    var zCosine = new THREE.Vector3(0, 0, 0).crossVectors(xCosine, yCosine).normalize();\n\n    // compute and sort by dist in this series\n    this._frame.map(this._computeDistance.bind(null, zCosine));\n    this._frame.sort(this._sortDistance);\n\n  } else {\n    // else slice location\n    // image number\n    // ORDERING BASED ON instance number\n    // _ordering = 'instance_number';\n    // first_image.sort(function(a,b){return a[\"instance_number\"]-b[\"instance_number\"]});\n  }\n};\n\nVJS.models.stack.prototype._computeDistance = function(normal, frame) {\n  frame._dist = frame._imagePosition[0] * normal.x +\n  frame._imagePosition[1] * normal.y +\n  frame._imagePosition[2] * normal.z;\n  return frame;\n};\n\nVJS.models.stack.prototype._sortDistance = function(a, b) {return a._dist - b._dist;};\n\nVJS.models.stack.prototype.zSpacing = function() {\n  // Spacing\n  // can not be 0 if not matrix can not be inverted.\n  var zSpacing = 1;\n  window.console.log(this._frame[0]);\n\n  if (this._numberOfFrames > 1) {\n    if (this._spacingBetweenSlices) {\n      zSpacing = this._spacingBetweenSlices;\n    } else if (this._frame[0]._sliceThickness) {\n      zSpacing = this._frame[0]._sliceThickness;\n    } else {\n      var xCosine = new THREE.Vector3(\n        this._frame[0]._imageOrientation[0],\n        this._frame[0]._imageOrientation[1],\n        this._frame[0]._imageOrientation[2]\n      );\n\n      var yCosine = new THREE.Vector3(\n        this._frame[0]._imageOrientation[3],\n        this._frame[0]._imageOrientation[4],\n        this._frame[0]._imageOrientation[5]\n      );\n\n      var zCosine = new THREE.Vector3(0, 0, 0).crossVectors(xCosine, yCosine).normalize();\n\n      // compute and sort by dist in this series\n      this._frame.map(this._computeDistance.bind(null, zCosine));\n      this._frame.sort(this._sortDistance);\n\n      zSpacing = this._frame[1]._dist - this._frame[0]._dist;\n    }\n  }\n\n  if (zSpacing === 0) {\n    zSpacing = 1;\n  }\n\n  return zSpacing;\n};\n\nVJS.models.stack.prototype.merge = function(stack) {\n  // try to merge imageHelper with current image.\n  // same image if same Series UID?\n  // could use concatenation if available, to already know if image is complete!\n  var sameStackID = false;\n  if (this._stackID === stack._stackID) {\n    sameStackID = true;\n\n    // Make sure image information is consisent?\n    // re-compute it?\n    var frame = stack._frame;\n    // Merge Stacks (N against N)\n    // try to match all stack to current stacks, if not add it to stacks list!\n    for (var i = 0; i < frame.length; i++) {\n      // test stack against existing stack\n      for (var j = 0; j < this._frame.length; j++) {\n        // test dimension\n        // dimension index value not defined!\n        if (\n          \n          // dimension index is unique\n          (this._frame[j]._dimensionIndexValues &&\n            frame[i]._dimensionIndexValues &&\n            this._frame[j]._dimensionIndexValues.join() === frame[i]._dimensionIndexValues.join()) ||\n          \n          // instance number is unique?\n          (this._frame[j]._instanceNumber &&\n            frame[i]._instanceNumber &&\n            this._frame[j]._instanceNumber === frame[i]._instanceNumber) ||\n          \n          // imagePosition + imageOrientation is unique\n          (this._frame[j]._imagePosition &&\n            frame[i]._imagePosition &&\n            this._frame[j]._imagePosition.join() === frame[i]._imagePosition.join() &&\n            this._frame[j]._imageOrientation &&\n            frame[i]._imageOrientation &&\n            this._frame[j]._imageOrientation.join() === frame[i]._imageOrientation.join() &&\n            // FOR DIFFUSION.. same position but different instance numbers...\n            this._frame[j]._instanceNumber &&\n            frame[i]._instanceNumber &&\n            this._frame[j]._instanceNumber === frame[i]._instanceNumber) //||\n\n          // _pixelData length is unique...? imageSOP?\n          // (this._frame[j]._pixelData &&\n          //   frame[i]._pixelData &&\n          //   this._frame[j]._pixelData.length === frame[i]._pixelData.length)\n\n          ) {\n\n          window.console.log('BREAKING!');\n          window.console.log(frame[i], this._frame[j]);\n          break;\n         \n        } else if (j === this._frame.length - 1) {\n\n          window.console.log('PUSHING FRAME TO STACK!');\n          this._frame.push(frame[i]);\n          break;\n\n        }\n\n      }\n\n    }\n  }\n\n  window.console.log(this);\n\n  return sameStackID;\n};\n\n\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.models.stack;\n}\n","/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals ArithmeticDecoder, globalScope, log2, readUint16, readUint32,\n           info, warn */\n\n'use strict';\n\nvar JpxImage = (function JpxImageClosure() {\n  // Table E.1\n  var SubbandsGainLog2 = {\n    'LL': 0,\n    'LH': 1,\n    'HL': 1,\n    'HH': 2\n  };\n  function JpxImage() {\n    this.failOnCorruptedImage = false;\n  }\n  JpxImage.prototype = {\n    parse: function JpxImage_parse(data) {\n\n      var head = readUint16(data, 0);\n      // No box header, immediate start of codestream (SOC)\n      if (head === 0xFF4F) {\n        this.parseCodestream(data, 0, data.length);\n        return;\n      }\n\n      var position = 0, length = data.length;\n      while (position < length) {\n        var headerSize = 8;\n        var lbox = readUint32(data, position);\n        var tbox = readUint32(data, position + 4);\n        position += headerSize;\n        if (lbox === 1) {\n          // XLBox: read UInt64 according to spec.\n          // JavaScript's int precision of 53 bit should be sufficient here.\n          lbox = readUint32(data, position) * 4294967296 +\n                 readUint32(data, position + 4);\n          position += 8;\n          headerSize += 8;\n        }\n        if (lbox === 0) {\n          lbox = length - position + headerSize;\n        }\n        if (lbox < headerSize) {\n          throw new Error('JPX Error: Invalid box field size');\n        }\n        var dataLength = lbox - headerSize;\n        var jumpDataLength = true;\n        switch (tbox) {\n          case 0x6A703268: // 'jp2h'\n            jumpDataLength = false; // parsing child boxes\n            break;\n          case 0x636F6C72: // 'colr'\n            // Colorspaces are not used, the CS from the PDF is used.\n            var method = data[position];\n            var precedence = data[position + 1];\n            var approximation = data[position + 2];\n            if (method === 1) {\n              // enumerated colorspace\n              var colorspace = readUint32(data, position + 3);\n              switch (colorspace) {\n                case 16: // this indicates a sRGB colorspace\n                case 17: // this indicates a grayscale colorspace\n                case 18: // this indicates a YUV colorspace\n                  break;\n                default:\n                  warn('Unknown colorspace ' + colorspace);\n                  break;\n              }\n            } else if (method === 2) {\n              info('ICC profile not supported');\n            }\n            break;\n          case 0x6A703263: // 'jp2c'\n            this.parseCodestream(data, position, position + dataLength);\n            break;\n          case 0x6A502020: // 'jP\\024\\024'\n            if (0x0d0a870a !== readUint32(data, position)) {\n              warn('Invalid JP2 signature');\n            }\n            break;\n          // The following header types are valid but currently not used:\n          case 0x6A501A1A: // 'jP\\032\\032'\n          case 0x66747970: // 'ftyp'\n          case 0x72726571: // 'rreq'\n          case 0x72657320: // 'res '\n          case 0x69686472: // 'ihdr'\n            break;\n          default:\n            var headerType = String.fromCharCode((tbox >> 24) & 0xFF,\n                                                 (tbox >> 16) & 0xFF,\n                                                 (tbox >> 8) & 0xFF,\n                                                 tbox & 0xFF);\n            warn('Unsupported header type ' + tbox + ' (' + headerType + ')');\n            break;\n        }\n        if (jumpDataLength) {\n          position += dataLength;\n        }\n      }\n    },\n    parseImageProperties: function JpxImage_parseImageProperties(stream) {\n      var newByte = stream.getByte();\n      while (newByte >= 0) {\n        var oldByte = newByte;\n        newByte = stream.getByte();\n        var code = (oldByte << 8) | newByte;\n        // Image and tile size (SIZ)\n        if (code === 0xFF51) {\n          stream.skip(4);\n          var Xsiz = stream.getInt32() >>> 0; // Byte 4\n          var Ysiz = stream.getInt32() >>> 0; // Byte 8\n          var XOsiz = stream.getInt32() >>> 0; // Byte 12\n          var YOsiz = stream.getInt32() >>> 0; // Byte 16\n          stream.skip(16);\n          var Csiz = stream.getUint16(); // Byte 36\n          this.width = Xsiz - XOsiz;\n          this.height = Ysiz - YOsiz;\n          this.componentsCount = Csiz;\n          // Results are always returned as Uint8Arrays\n          this.bitsPerComponent = 8;\n          return;\n        }\n      }\n      throw new Error('JPX Error: No size marker found in JPX stream');\n    },\n    parseCodestream: function JpxImage_parseCodestream(data, start, end) {\n      var context = {};\n      try {\n        var doNotRecover = false;\n        var position = start;\n        while (position + 1 < end) {\n          var code = readUint16(data, position);\n          position += 2;\n\n          var length = 0, j, sqcd, spqcds, spqcdSize, scalarExpounded, tile;\n          switch (code) {\n            case 0xFF4F: // Start of codestream (SOC)\n              context.mainHeader = true;\n              break;\n            case 0xFFD9: // End of codestream (EOC)\n              break;\n            case 0xFF51: // Image and tile size (SIZ)\n              length = readUint16(data, position);\n              var siz = {};\n              siz.Xsiz = readUint32(data, position + 4);\n              siz.Ysiz = readUint32(data, position + 8);\n              siz.XOsiz = readUint32(data, position + 12);\n              siz.YOsiz = readUint32(data, position + 16);\n              siz.XTsiz = readUint32(data, position + 20);\n              siz.YTsiz = readUint32(data, position + 24);\n              siz.XTOsiz = readUint32(data, position + 28);\n              siz.YTOsiz = readUint32(data, position + 32);\n              var componentsCount = readUint16(data, position + 36);\n              siz.Csiz = componentsCount;\n              var components = [];\n              j = position + 38;\n              for (var i = 0; i < componentsCount; i++) {\n                var component = {\n                  precision: (data[j] & 0x7F) + 1,\n                  isSigned: !!(data[j] & 0x80),\n                  XRsiz: data[j + 1],\n                  YRsiz: data[j + 1]\n                };\n                calculateComponentDimensions(component, siz);\n                components.push(component);\n              }\n              context.SIZ = siz;\n              context.components = components;\n              calculateTileGrids(context, components);\n              context.QCC = [];\n              context.COC = [];\n              break;\n            case 0xFF5C: // Quantization default (QCD)\n              length = readUint16(data, position);\n              var qcd = {};\n              j = position + 2;\n              sqcd = data[j++];\n              switch (sqcd & 0x1F) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n                default:\n                  throw new Error('JPX Error: Invalid SQcd value ' + sqcd);\n              }\n              qcd.noQuantization = (spqcdSize === 8);\n              qcd.scalarExpounded = scalarExpounded;\n              qcd.guardBits = sqcd >> 5;\n              spqcds = [];\n              while (j < length + position) {\n                var spqcd = {};\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                  j += 2;\n                }\n                spqcds.push(spqcd);\n              }\n              qcd.SPqcds = spqcds;\n              if (context.mainHeader) {\n                context.QCD = qcd;\n              } else {\n                context.currentTile.QCD = qcd;\n                context.currentTile.QCC = [];\n              }\n              break;\n            case 0xFF5D: // Quantization component (QCC)\n              length = readUint16(data, position);\n              var qcc = {};\n              j = position + 2;\n              var cqcc;\n              if (context.SIZ.Csiz < 257) {\n                cqcc = data[j++];\n              } else {\n                cqcc = readUint16(data, j);\n                j += 2;\n              }\n              sqcd = data[j++];\n              switch (sqcd & 0x1F) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n                default:\n                  throw new Error('JPX Error: Invalid SQcd value ' + sqcd);\n              }\n              qcc.noQuantization = (spqcdSize === 8);\n              qcc.scalarExpounded = scalarExpounded;\n              qcc.guardBits = sqcd >> 5;\n              spqcds = [];\n              while (j < (length + position)) {\n                spqcd = {};\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                  j += 2;\n                }\n                spqcds.push(spqcd);\n              }\n              qcc.SPqcds = spqcds;\n              if (context.mainHeader) {\n                context.QCC[cqcc] = qcc;\n              } else {\n                context.currentTile.QCC[cqcc] = qcc;\n              }\n              break;\n            case 0xFF52: // Coding style default (COD)\n              length = readUint16(data, position);\n              var cod = {};\n              j = position + 2;\n              var scod = data[j++];\n              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n              cod.sopMarkerUsed = !!(scod & 2);\n              cod.ephMarkerUsed = !!(scod & 4);\n              cod.progressionOrder = data[j++];\n              cod.layersCount = readUint16(data, j);\n              j += 2;\n              cod.multipleComponentTransform = data[j++];\n\n              cod.decompositionLevelsCount = data[j++];\n              cod.xcb = (data[j++] & 0xF) + 2;\n              cod.ycb = (data[j++] & 0xF) + 2;\n              var blockStyle = data[j++];\n              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n              cod.resetContextProbabilities = !!(blockStyle & 2);\n              cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n              cod.verticalyStripe = !!(blockStyle & 8);\n              cod.predictableTermination = !!(blockStyle & 16);\n              cod.segmentationSymbolUsed = !!(blockStyle & 32);\n              cod.reversibleTransformation = data[j++];\n              if (cod.entropyCoderWithCustomPrecincts) {\n                var precinctsSizes = [];\n                while (j < length + position) {\n                  var precinctsSize = data[j++];\n                  precinctsSizes.push({\n                    PPx: precinctsSize & 0xF,\n                    PPy: precinctsSize >> 4\n                  });\n                }\n                cod.precinctsSizes = precinctsSizes;\n              }\n              var unsupported = [];\n              if (cod.selectiveArithmeticCodingBypass) {\n                unsupported.push('selectiveArithmeticCodingBypass');\n              }\n              if (cod.resetContextProbabilities) {\n                unsupported.push('resetContextProbabilities');\n              }\n              if (cod.terminationOnEachCodingPass) {\n                unsupported.push('terminationOnEachCodingPass');\n              }\n              if (cod.verticalyStripe) {\n                unsupported.push('verticalyStripe');\n              }\n              if (cod.predictableTermination) {\n                unsupported.push('predictableTermination');\n              }\n              if (unsupported.length > 0) {\n                doNotRecover = true;\n                throw new Error('JPX Error: Unsupported COD options (' +\n                                unsupported.join(', ') + ')');\n              }\n              if (context.mainHeader) {\n                context.COD = cod;\n              } else {\n                context.currentTile.COD = cod;\n                context.currentTile.COC = [];\n              }\n              break;\n            case 0xFF90: // Start of tile-part (SOT)\n              length = readUint16(data, position);\n              tile = {};\n              tile.index = readUint16(data, position + 2);\n              tile.length = readUint32(data, position + 4);\n              tile.dataEnd = tile.length + position - 2;\n              tile.partIndex = data[position + 8];\n              tile.partsCount = data[position + 9];\n\n              context.mainHeader = false;\n              if (tile.partIndex === 0) {\n                // reset component specific settings\n                tile.COD = context.COD;\n                tile.COC = context.COC.slice(0); // clone of the global COC\n                tile.QCD = context.QCD;\n                tile.QCC = context.QCC.slice(0); // clone of the global COC\n              }\n              context.currentTile = tile;\n              break;\n            case 0xFF93: // Start of data (SOD)\n              tile = context.currentTile;\n              if (tile.partIndex === 0) {\n                initializeTile(context, tile.index);\n                buildPackets(context);\n              }\n\n              // moving to the end of the data\n              length = tile.dataEnd - position;\n              parseTilePackets(context, data, position, length);\n              break;\n            case 0xFF55: // Tile-part lengths, main header (TLM)\n            case 0xFF57: // Packet length, main header (PLM)\n            case 0xFF58: // Packet length, tile-part header (PLT)\n            case 0xFF64: // Comment (COM)\n              length = readUint16(data, position);\n              // skipping content\n              break;\n            case 0xFF53: // Coding style component (COC)\n              throw new Error('JPX Error: Codestream code 0xFF53 (COC) is ' +\n                              'not implemented');\n            default:\n              throw new Error('JPX Error: Unknown codestream code: ' +\n                              code.toString(16));\n          }\n          position += length;\n        }\n      } catch (e) {\n        if (doNotRecover || this.failOnCorruptedImage) {\n          throw e;\n        } else {\n          warn('Trying to recover from ' + e.message);\n        }\n      }\n      this.tiles = transformComponents(context);\n      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n      this.componentsCount = context.SIZ.Csiz;\n    }\n  };\n  function calculateComponentDimensions(component, siz) {\n    // Section B.2 Component mapping\n    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n    component.width = component.x1 - component.x0;\n    component.height = component.y1 - component.y0;\n  }\n  function calculateTileGrids(context, components) {\n    var siz = context.SIZ;\n    // Section B.3 Division into tile and tile-components\n    var tile, tiles = [];\n    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n    for (var q = 0; q < numYtiles; q++) {\n      for (var p = 0; p < numXtiles; p++) {\n        tile = {};\n        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n        tile.width = tile.tx1 - tile.tx0;\n        tile.height = tile.ty1 - tile.ty0;\n        tile.components = [];\n        tiles.push(tile);\n      }\n    }\n    context.tiles = tiles;\n\n    var componentsCount = siz.Csiz;\n    for (var i = 0, ii = componentsCount; i < ii; i++) {\n      var component = components[i];\n      for (var j = 0, jj = tiles.length; j < jj; j++) {\n        var tileComponent = {};\n        tile = tiles[j];\n        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n        tile.components[i] = tileComponent;\n      }\n    }\n  }\n  function getBlocksDimensions(context, component, r) {\n    var codOrCoc = component.codingStyleParameters;\n    var result = {};\n    if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n      result.PPx = 15;\n      result.PPy = 15;\n    } else {\n      result.PPx = codOrCoc.precinctsSizes[r].PPx;\n      result.PPy = codOrCoc.precinctsSizes[r].PPy;\n    }\n    // calculate codeblock size as described in section B.7\n    result.xcb_ = (r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) :\n                   Math.min(codOrCoc.xcb, result.PPx));\n    result.ycb_ = (r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) :\n                   Math.min(codOrCoc.ycb, result.PPy));\n    return result;\n  }\n  function buildPrecincts(context, resolution, dimensions) {\n    // Section B.6 Division resolution to precincts\n    var precinctWidth = 1 << dimensions.PPx;\n    var precinctHeight = 1 << dimensions.PPy;\n    // Jasper introduces codeblock groups for mapping each subband codeblocks\n    // to precincts. Precinct partition divides a resolution according to width\n    // and height parameters. The subband that belongs to the resolution level\n    // has a different size than the level, unless it is the zero resolution.\n\n    // From Jasper documentation: jpeg2000.pdf, section K: Tier-2 coding:\n    // The precinct partitioning for a particular subband is derived from a\n    // partitioning of its parent LL band (i.e., the LL band at the next higher\n    // resolution level)... The LL band associated with each resolution level is\n    // divided into precincts... Each of the resulting precinct regions is then\n    // mapped into its child subbands (if any) at the next lower resolution\n    // level. This is accomplished by using the coordinate transformation\n    // (u, v) = (ceil(x/2), ceil(y/2)) where (x, y) and (u, v) are the\n    // coordinates of a point in the LL band and child subband, respectively.\n    var isZeroRes = resolution.resLevel === 0;\n    var precinctWidthInSubband = 1 << (dimensions.PPx + (isZeroRes ? 0 : -1));\n    var precinctHeightInSubband = 1 << (dimensions.PPy + (isZeroRes ? 0 : -1));\n    var numprecinctswide = (resolution.trx1 > resolution.trx0 ?\n      Math.ceil(resolution.trx1 / precinctWidth) -\n      Math.floor(resolution.trx0 / precinctWidth) : 0);\n    var numprecinctshigh = (resolution.try1 > resolution.try0 ?\n      Math.ceil(resolution.try1 / precinctHeight) -\n      Math.floor(resolution.try0 / precinctHeight) : 0);\n    var numprecincts = numprecinctswide * numprecinctshigh;\n\n    resolution.precinctParameters = {\n      precinctWidth: precinctWidth,\n      precinctHeight: precinctHeight,\n      numprecinctswide: numprecinctswide,\n      numprecinctshigh: numprecinctshigh,\n      numprecincts: numprecincts,\n      precinctWidthInSubband: precinctWidthInSubband,\n      precinctHeightInSubband: precinctHeightInSubband\n    };\n  }\n  function buildCodeblocks(context, subband, dimensions) {\n    // Section B.7 Division sub-band into code-blocks\n    var xcb_ = dimensions.xcb_;\n    var ycb_ = dimensions.ycb_;\n    var codeblockWidth = 1 << xcb_;\n    var codeblockHeight = 1 << ycb_;\n    var cbx0 = subband.tbx0 >> xcb_;\n    var cby0 = subband.tby0 >> ycb_;\n    var cbx1 = (subband.tbx1 + codeblockWidth - 1) >> xcb_;\n    var cby1 = (subband.tby1 + codeblockHeight - 1) >> ycb_;\n    var precinctParameters = subband.resolution.precinctParameters;\n    var codeblocks = [];\n    var precincts = [];\n    var i, j, codeblock, precinctNumber;\n    for (j = cby0; j < cby1; j++) {\n      for (i = cbx0; i < cbx1; i++) {\n        codeblock = {\n          cbx: i,\n          cby: j,\n          tbx0: codeblockWidth * i,\n          tby0: codeblockHeight * j,\n          tbx1: codeblockWidth * (i + 1),\n          tby1: codeblockHeight * (j + 1)\n        };\n\n        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n\n        // Calculate precinct number for this codeblock, codeblock position\n        // should be relative to its subband, use actual dimension and position\n        // See comment about codeblock group width and height\n        var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) /\n          precinctParameters.precinctWidthInSubband);\n        var pj = Math.floor((codeblock.tby0_ - subband.tby0) /\n          precinctParameters.precinctHeightInSubband);\n        precinctNumber = pi + (pj * precinctParameters.numprecinctswide);\n\n        codeblock.precinctNumber = precinctNumber;\n        codeblock.subbandType = subband.type;\n        codeblock.Lblock = 3;\n\n        if (codeblock.tbx1_ <= codeblock.tbx0_ ||\n            codeblock.tby1_ <= codeblock.tby0_) {\n          continue;\n        }\n        codeblocks.push(codeblock);\n        // building precinct for the sub-band\n        var precinct = precincts[precinctNumber];\n        if (precinct !== undefined) {\n          if (i < precinct.cbxMin) {\n            precinct.cbxMin = i;\n          } else if (i > precinct.cbxMax) {\n            precinct.cbxMax = i;\n          }\n          if (j < precinct.cbyMin) {\n            precinct.cbxMin = j;\n          } else if (j > precinct.cbyMax) {\n            precinct.cbyMax = j;\n          }\n        } else {\n          precincts[precinctNumber] = precinct = {\n            cbxMin: i,\n            cbyMin: j,\n            cbxMax: i,\n            cbyMax: j\n          };\n        }\n        codeblock.precinct = precinct;\n      }\n    }\n    subband.codeblockParameters = {\n      codeblockWidth: xcb_,\n      codeblockHeight: ycb_,\n      numcodeblockwide: cbx1 - cbx0 + 1,\n      numcodeblockhigh: cby1 - cby0 + 1\n    };\n    subband.codeblocks = codeblocks;\n    subband.precincts = precincts;\n  }\n  function createPacket(resolution, precinctNumber, layerNumber) {\n    var precinctCodeblocks = [];\n    // Section B.10.8 Order of info in packet\n    var subbands = resolution.subbands;\n    // sub-bands already ordered in 'LL', 'HL', 'LH', and 'HH' sequence\n    for (var i = 0, ii = subbands.length; i < ii; i++) {\n      var subband = subbands[i];\n      var codeblocks = subband.codeblocks;\n      for (var j = 0, jj = codeblocks.length; j < jj; j++) {\n        var codeblock = codeblocks[j];\n        if (codeblock.precinctNumber !== precinctNumber) {\n          continue;\n        }\n        precinctCodeblocks.push(codeblock);\n      }\n    }\n    return {\n      layerNumber: layerNumber,\n      codeblocks: precinctCodeblocks\n    };\n  }\n  function LayerResolutionComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,\n        tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var l = 0, r = 0, i = 0, k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.1 Layer-resolution-component-position\n      for (; l < layersCount; l++) {\n        for (; r <= maxDecompositionLevelsCount; r++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n            k = 0;\n          }\n          i = 0;\n        }\n        r = 0;\n      }\n    };\n  }\n  function ResolutionLayerComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,\n        tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var r = 0, l = 0, i = 0, k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.2 Resolution-layer-component-position\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; l < layersCount; l++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n            k = 0;\n          }\n          i = 0;\n        }\n        l = 0;\n      }\n    };\n  }\n  function ResolutionPositionComponentLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var l, r, c, p;\n    var maxDecompositionLevelsCount = 0;\n    for (c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount,\n        component.codingStyleParameters.decompositionLevelsCount);\n    }\n    var maxNumPrecinctsInLevel = new Int32Array(\n      maxDecompositionLevelsCount + 1);\n    for (r = 0; r <= maxDecompositionLevelsCount; ++r) {\n      var maxNumPrecincts = 0;\n      for (c = 0; c < componentsCount; ++c) {\n        var resolutions = tile.components[c].resolutions;\n        if (r < resolutions.length) {\n          maxNumPrecincts = Math.max(maxNumPrecincts,\n            resolutions[r].precinctParameters.numprecincts);\n        }\n      }\n      maxNumPrecinctsInLevel[r] = maxNumPrecincts;\n    }\n    l = 0;\n    r = 0;\n    c = 0;\n    p = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.3 Resolution-position-component-layer\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; p < maxNumPrecinctsInLevel[r]; p++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n            if (p >= numprecincts) {\n              continue;\n            }\n            for (; l < layersCount;) {\n              var packet = createPacket(resolution, p, l);\n              l++;\n              return packet;\n            }\n            l = 0;\n          }\n          c = 0;\n        }\n        p = 0;\n      }\n    };\n  }\n  function PositionComponentResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var precinctsIterationSizes = precinctsSizes;\n    var l = 0, r = 0, c = 0, px = 0, py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.4 Position-component-resolution-layer\n      for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n        for (; px < precinctsIterationSizes.maxNumWide; px++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n            var decompositionLevelsCount =\n              component.codingStyleParameters.decompositionLevelsCount;\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale =\n                precinctsSizes.components[c].resolutions[r];\n              var k = getPrecinctIndexIfExist(\n                px,\n                py,\n                sizeInImageScale,\n                precinctsIterationSizes,\n                resolution);\n              if (k === null) {\n                continue;\n              }\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n              l = 0;\n            }\n            r = 0;\n          }\n          c = 0;\n        }\n        px = 0;\n      }\n    };\n  }\n  function ComponentPositionResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var l = 0, r = 0, c = 0, px = 0, py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      // Section B.12.1.5 Component-position-resolution-layer\n      for (; c < componentsCount; ++c) {\n        var component = tile.components[c];\n        var precinctsIterationSizes = precinctsSizes.components[c];\n        var decompositionLevelsCount =\n          component.codingStyleParameters.decompositionLevelsCount;\n        for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n          for (; px < precinctsIterationSizes.maxNumWide; px++) {\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsIterationSizes.resolutions[r];\n              var k = getPrecinctIndexIfExist(\n                px,\n                py,\n                sizeInImageScale,\n                precinctsIterationSizes,\n                resolution);\n              if (k === null) {\n                continue;\n              }\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n              l = 0;\n            }\n            r = 0;\n          }\n          px = 0;\n        }\n        py = 0;\n      }\n    };\n  }\n  function getPrecinctIndexIfExist(\n    pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {\n    var posX = pxIndex * precinctIterationSizes.minWidth;\n    var posY = pyIndex * precinctIterationSizes.minHeight;\n    if (posX % sizeInImageScale.width !== 0 ||\n        posY % sizeInImageScale.height !== 0) {\n      return null;\n    }\n    var startPrecinctRowIndex =\n      (posY / sizeInImageScale.width) *\n      resolution.precinctParameters.numprecinctswide;\n    return (posX / sizeInImageScale.height) + startPrecinctRowIndex;\n  }\n  function getPrecinctSizesInImageScale(tile) {\n    var componentsCount = tile.components.length;\n    var minWidth = Number.MAX_VALUE;\n    var minHeight = Number.MAX_VALUE;\n    var maxNumWide = 0;\n    var maxNumHigh = 0;\n    var sizePerComponent = new Array(componentsCount);\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount =\n        component.codingStyleParameters.decompositionLevelsCount;\n      var sizePerResolution = new Array(decompositionLevelsCount + 1);\n      var minWidthCurrentComponent = Number.MAX_VALUE;\n      var minHeightCurrentComponent = Number.MAX_VALUE;\n      var maxNumWideCurrentComponent = 0;\n      var maxNumHighCurrentComponent = 0;\n      var scale = 1;\n      for (var r = decompositionLevelsCount; r >= 0; --r) {\n        var resolution = component.resolutions[r];\n        var widthCurrentResolution =\n          scale * resolution.precinctParameters.precinctWidth;\n        var heightCurrentResolution =\n          scale * resolution.precinctParameters.precinctHeight;\n        minWidthCurrentComponent = Math.min(\n          minWidthCurrentComponent,\n          widthCurrentResolution);\n        minHeightCurrentComponent = Math.min(\n          minHeightCurrentComponent,\n          heightCurrentResolution);\n        maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent,\n          resolution.precinctParameters.numprecinctswide);\n        maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent,\n          resolution.precinctParameters.numprecinctshigh);\n        sizePerResolution[r] = {\n          width: widthCurrentResolution,\n          height: heightCurrentResolution\n        };\n        scale <<= 1;\n      }\n      minWidth = Math.min(minWidth, minWidthCurrentComponent);\n      minHeight = Math.min(minHeight, minHeightCurrentComponent);\n      maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);\n      maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);\n      sizePerComponent[c] = {\n        resolutions: sizePerResolution,\n        minWidth: minWidthCurrentComponent,\n        minHeight: minHeightCurrentComponent,\n        maxNumWide: maxNumWideCurrentComponent,\n        maxNumHigh: maxNumHighCurrentComponent\n      };\n    }\n    return {\n      components: sizePerComponent,\n      minWidth: minWidth,\n      minHeight: minHeight,\n      maxNumWide: maxNumWide,\n      maxNumHigh: maxNumHigh\n    };\n  }\n  function buildPackets(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var componentsCount = siz.Csiz;\n    // Creating resolutions and sub-bands for each component\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount =\n        component.codingStyleParameters.decompositionLevelsCount;\n      // Section B.5 Resolution levels and sub-bands\n      var resolutions = [];\n      var subbands = [];\n      for (var r = 0; r <= decompositionLevelsCount; r++) {\n        var blocksDimensions = getBlocksDimensions(context, component, r);\n        var resolution = {};\n        var scale = 1 << (decompositionLevelsCount - r);\n        resolution.trx0 = Math.ceil(component.tcx0 / scale);\n        resolution.try0 = Math.ceil(component.tcy0 / scale);\n        resolution.trx1 = Math.ceil(component.tcx1 / scale);\n        resolution.try1 = Math.ceil(component.tcy1 / scale);\n        resolution.resLevel = r;\n        buildPrecincts(context, resolution, blocksDimensions);\n        resolutions.push(resolution);\n\n        var subband;\n        if (r === 0) {\n          // one sub-band (LL) with last decomposition\n          subband = {};\n          subband.type = 'LL';\n          subband.tbx0 = Math.ceil(component.tcx0 / scale);\n          subband.tby0 = Math.ceil(component.tcy0 / scale);\n          subband.tbx1 = Math.ceil(component.tcx1 / scale);\n          subband.tby1 = Math.ceil(component.tcy1 / scale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolution.subbands = [subband];\n        } else {\n          var bscale = 1 << (decompositionLevelsCount - r + 1);\n          var resolutionSubbands = [];\n          // three sub-bands (HL, LH and HH) with rest of decompositions\n          subband = {};\n          subband.type = 'HL';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          subband = {};\n          subband.type = 'LH';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          subband = {};\n          subband.type = 'HH';\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n\n          resolution.subbands = resolutionSubbands;\n        }\n      }\n      component.resolutions = resolutions;\n      component.subbands = subbands;\n    }\n    // Generate the packets sequence\n    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n    switch (progressionOrder) {\n      case 0:\n        tile.packetsIterator =\n          new LayerResolutionComponentPositionIterator(context);\n        break;\n      case 1:\n        tile.packetsIterator =\n          new ResolutionLayerComponentPositionIterator(context);\n        break;\n      case 2:\n        tile.packetsIterator =\n          new ResolutionPositionComponentLayerIterator(context);\n        break;\n      case 3:\n        tile.packetsIterator =\n          new PositionComponentResolutionLayerIterator(context);\n        break;\n      case 4:\n        tile.packetsIterator =\n          new ComponentPositionResolutionLayerIterator(context);\n        break;\n      default:\n        throw new Error('JPX Error: Unsupported progression order ' +\n                        progressionOrder);\n    }\n  }\n  function parseTilePackets(context, data, offset, dataLength) {\n    var position = 0;\n    var buffer, bufferSize = 0, skipNextBit = false;\n    function readBits(count) {\n      while (bufferSize < count) {\n        var b = data[offset + position];\n        position++;\n        if (skipNextBit) {\n          buffer = (buffer << 7) | b;\n          bufferSize += 7;\n          skipNextBit = false;\n        } else {\n          buffer = (buffer << 8) | b;\n          bufferSize += 8;\n        }\n        if (b === 0xFF) {\n          skipNextBit = true;\n        }\n      }\n      bufferSize -= count;\n      return (buffer >>> bufferSize) & ((1 << count) - 1);\n    }\n    function skipMarkerIfEqual(value) {\n      if (data[offset + position - 1] === 0xFF &&\n          data[offset + position] === value) {\n        skipBytes(1);\n        return true;\n      } else if (data[offset + position] === 0xFF &&\n                 data[offset + position + 1] === value) {\n        skipBytes(2);\n        return true;\n      }\n      return false;\n    }\n    function skipBytes(count) {\n      position += count;\n    }\n    function alignToByte() {\n      bufferSize = 0;\n      if (skipNextBit) {\n        position++;\n        skipNextBit = false;\n      }\n    }\n    function readCodingpasses() {\n      if (readBits(1) === 0) {\n        return 1;\n      }\n      if (readBits(1) === 0) {\n        return 2;\n      }\n      var value = readBits(2);\n      if (value < 3) {\n        return value + 3;\n      }\n      value = readBits(5);\n      if (value < 31) {\n        return value + 6;\n      }\n      value = readBits(7);\n      return value + 37;\n    }\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var sopMarkerUsed = context.COD.sopMarkerUsed;\n    var ephMarkerUsed = context.COD.ephMarkerUsed;\n    var packetsIterator = tile.packetsIterator;\n    while (position < dataLength) {\n      alignToByte();\n      if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {\n        // Skip also marker segment length and packet sequence ID\n        skipBytes(4);\n      }\n      var packet = packetsIterator.nextPacket();\n      if (packet === undefined) {\n        //No more packets. Stream is probably truncated.\n        return;\n      }\n      if (!readBits(1)) {\n        continue;\n      }\n      var layerNumber = packet.layerNumber;\n      var queue = [], codeblock;\n      for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n        codeblock = packet.codeblocks[i];\n        var precinct = codeblock.precinct;\n        var codeblockColumn = codeblock.cbx - precinct.cbxMin;\n        var codeblockRow = codeblock.cby - precinct.cbyMin;\n        var codeblockIncluded = false;\n        var firstTimeInclusion = false;\n        var valueReady;\n        if (codeblock['included'] !== undefined) {\n          codeblockIncluded = !!readBits(1);\n        } else {\n          // reading inclusion tree\n          precinct = codeblock.precinct;\n          var inclusionTree, zeroBitPlanesTree;\n          if (precinct['inclusionTree'] !== undefined) {\n            inclusionTree = precinct.inclusionTree;\n          } else {\n            // building inclusion and zero bit-planes trees\n            var width = precinct.cbxMax - precinct.cbxMin + 1;\n            var height = precinct.cbyMax - precinct.cbyMin + 1;\n            inclusionTree = new InclusionTree(width, height);\n            zeroBitPlanesTree = new TagTree(width, height);\n            precinct.inclusionTree = inclusionTree;\n            precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n          }\n\n          inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber);\n          while (true) {\n            if (position >= data.length) {\n              return;\n            }\n            if (inclusionTree.isAboveThreshold()){\n              break;\n            }\n            if (inclusionTree.isKnown()) {\n                inclusionTree.nextLevel();\n                continue;\n            }\n            if (readBits(1)) {\n              inclusionTree.setKnown();\n              if (inclusionTree.isLeaf()) {\n                codeblock.included = true;\n                codeblockIncluded = firstTimeInclusion = true;\n                break;\n              } else {\n                inclusionTree.nextLevel();\n              }\n            } else {\n              inclusionTree.incrementValue();\n            }\n          }\n        }\n        if (!codeblockIncluded) {\n          continue;\n        }\n        if (firstTimeInclusion) {\n          zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n          zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n          while (true) {\n            if (position >= data.length) {\n              return;\n            }\n            if (readBits(1)) {\n              valueReady = !zeroBitPlanesTree.nextLevel();\n              if (valueReady) {\n                break;\n              }\n            } else {\n              zeroBitPlanesTree.incrementValue();\n            }\n          }\n          codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n        }\n        var codingpasses = readCodingpasses();\n        while (readBits(1)) {\n          codeblock.Lblock++;\n        }\n        var codingpassesLog2 = log2(codingpasses);\n        // rounding down log2\n        var bits = ((codingpasses < (1 << codingpassesLog2)) ?\n          codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;\n        var codedDataLength = readBits(bits);\n        queue.push({\n          codeblock: codeblock,\n          codingpasses: codingpasses,\n          dataLength: codedDataLength\n        });\n      }\n      alignToByte();\n      if (ephMarkerUsed) {\n        skipMarkerIfEqual(0x92);\n      }\n      while (queue.length > 0) {\n        var packetItem = queue.shift();\n        codeblock = packetItem.codeblock;\n        if (codeblock['data'] === undefined) {\n          codeblock.data = [];\n        }\n        codeblock.data.push({\n          data: data,\n          start: offset + position,\n          end: offset + position + packetItem.dataLength,\n          codingpasses: packetItem.codingpasses\n        });\n        position += packetItem.dataLength;\n      }\n    }\n    return position;\n  }\n  function copyCoefficients(coefficients, levelWidth, levelHeight, subband,\n                            delta, mb, reversible, segmentationSymbolUsed) {\n    var x0 = subband.tbx0;\n    var y0 = subband.tby0;\n    var width = subband.tbx1 - subband.tbx0;\n    var codeblocks = subband.codeblocks;\n    var right = subband.type.charAt(0) === 'H' ? 1 : 0;\n    var bottom = subband.type.charAt(1) === 'H' ? levelWidth : 0;\n\n    for (var i = 0, ii = codeblocks.length; i < ii; ++i) {\n      var codeblock = codeblocks[i];\n      var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n      var blockHeight = codeblock.tby1_ - codeblock.tby0_;\n      if (blockWidth === 0 || blockHeight === 0) {\n        continue;\n      }\n      if (codeblock['data'] === undefined) {\n        continue;\n      }\n\n      var bitModel, currentCodingpassType;\n      bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType,\n                              codeblock.zeroBitPlanes, mb);\n      currentCodingpassType = 2; // first bit plane starts from cleanup\n\n      // collect data\n      var data = codeblock.data, totalLength = 0, codingpasses = 0;\n      var j, jj, dataItem;\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        totalLength += dataItem.end - dataItem.start;\n        codingpasses += dataItem.codingpasses;\n      }\n      var encodedData = new Int16Array(totalLength);\n      var position = 0;\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n        encodedData.set(chunk, position);\n        position += chunk.length;\n      }\n      // decoding the item\n      var decoder = new ArithmeticDecoder(encodedData, 0, totalLength);\n      bitModel.setDecoder(decoder);\n\n      for (j = 0; j < codingpasses; j++) {\n        switch (currentCodingpassType) {\n          case 0:\n            bitModel.runSignificancePropogationPass();\n            break;\n          case 1:\n            bitModel.runMagnitudeRefinementPass();\n            break;\n          case 2:\n            bitModel.runCleanupPass();\n            if (segmentationSymbolUsed) {\n              bitModel.checkSegmentationSymbol();\n            }\n            break;\n        }\n        currentCodingpassType = (currentCodingpassType + 1) % 3;\n      }\n\n      var offset = (codeblock.tbx0_ - x0) + (codeblock.tby0_ - y0) * width;\n      var sign = bitModel.coefficentsSign;\n      var magnitude = bitModel.coefficentsMagnitude;\n      var bitsDecoded = bitModel.bitsDecoded;\n      var magnitudeCorrection = reversible ? 0 : 0.5;\n      var k, n, nb;\n      position = 0;\n      // Do the interleaving of Section F.3.3 here, so we do not need\n      // to copy later. LL level is not interleaved, just copied.\n      var interleave = (subband.type !== 'LL');\n      for (j = 0; j < blockHeight; j++) {\n        var row = (offset / width) | 0; // row in the non-interleaved subband\n        var levelOffset = 2 * row * (levelWidth - width) + right + bottom;\n        for (k = 0; k < blockWidth; k++) {\n          n = magnitude[position];\n          if (n !== 0) {\n            n = (n + magnitudeCorrection) * delta;\n            if (sign[position] !== 0) {\n              n = -n;\n            }\n            nb = bitsDecoded[position];\n            var pos = interleave ? (levelOffset + (offset << 1)) : offset;\n            if (reversible && (nb >= mb)) {\n              coefficients[pos] = n;\n            } else {\n              coefficients[pos] = n * (1 << (mb - nb));\n            }\n          }\n          offset++;\n          position++;\n        }\n        offset += width - blockWidth;\n      }\n    }\n  }\n  function transformTile(context, tile, c) {\n    var component = tile.components[c];\n    var codingStyleParameters = component.codingStyleParameters;\n    var quantizationParameters = component.quantizationParameters;\n    var decompositionLevelsCount =\n      codingStyleParameters.decompositionLevelsCount;\n    var spqcds = quantizationParameters.SPqcds;\n    var scalarExpounded = quantizationParameters.scalarExpounded;\n    var guardBits = quantizationParameters.guardBits;\n    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n    var precision = context.components[c].precision;\n\n    var reversible = codingStyleParameters.reversibleTransformation;\n    var transform = (reversible ? new ReversibleTransform() :\n                                  new IrreversibleTransform());\n\n    var subbandCoefficients = [];\n    var b = 0;\n    for (var i = 0; i <= decompositionLevelsCount; i++) {\n      var resolution = component.resolutions[i];\n\n      var width = resolution.trx1 - resolution.trx0;\n      var height = resolution.try1 - resolution.try0;\n      // Allocate space for the whole sublevel.\n      var coefficients = new Float32Array(width * height);\n\n      for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {\n        var mu, epsilon;\n        if (!scalarExpounded) {\n          // formula E-5\n          mu = spqcds[0].mu;\n          epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n        } else {\n          mu = spqcds[b].mu;\n          epsilon = spqcds[b].epsilon;\n          b++;\n        }\n\n        var subband = resolution.subbands[j];\n        var gainLog2 = SubbandsGainLog2[subband.type];\n\n        // calulate quantization coefficient (Section E.1.1.1)\n        var delta = (reversible ? 1 :\n          Math.pow(2, precision + gainLog2 - epsilon) * (1 + mu / 2048));\n        var mb = (guardBits + epsilon - 1);\n\n        // In the first resolution level, copyCoefficients will fill the\n        // whole array with coefficients. In the succeding passes,\n        // copyCoefficients will consecutively fill in the values that belong\n        // to the interleaved positions of the HL, LH, and HH coefficients.\n        // The LL coefficients will then be interleaved in Transform.iterate().\n        copyCoefficients(coefficients, width, height, subband, delta, mb,\n                         reversible, segmentationSymbolUsed);\n      }\n      subbandCoefficients.push({\n        width: width,\n        height: height,\n        items: coefficients\n      });\n    }\n\n    var result = transform.calculate(subbandCoefficients,\n                                     component.tcx0, component.tcy0);\n    return {\n      left: component.tcx0,\n      top: component.tcy0,\n      width: result.width,\n      height: result.height,\n      items: result.items\n    };\n  }\n  function transformComponents(context) {\n    var siz = context.SIZ;\n    var components = context.components;\n    var componentsCount = siz.Csiz;\n    var resultImages = [];\n    for (var i = 0, ii = context.tiles.length; i < ii; i++) {\n      var tile = context.tiles[i];\n      var transformedTiles = [];\n      var c;\n      for (c = 0; c < componentsCount; c++) {\n        transformedTiles[c] = transformTile(context, tile, c);\n      }\n      var tile0 = transformedTiles[0];\n      var isSigned = components[0].isSigned;\n      if (isSigned) {\n        var out = new Int16Array(tile0.items.length * componentsCount);\n      } else {\n        var out = new Uint16Array(tile0.items.length * componentsCount);\n      }\n      var result = {\n        left: tile0.left,\n        top: tile0.top,\n        width: tile0.width,\n        height: tile0.height,\n        items: out\n      };\n\n      // Section G.2.2 Inverse multi component transform\n      var shift, offset, max, min, maxK;\n      var pos = 0, j, jj, y0, y1, y2, r, g, b, k, val;\n      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n        var fourComponents = componentsCount === 4;\n        var y0items = transformedTiles[0].items;\n        var y1items = transformedTiles[1].items;\n        var y2items = transformedTiles[2].items;\n        var y3items = fourComponents ? transformedTiles[3].items : null;\n\n        // HACK: The multiple component transform formulas below assume that\n        // all components have the same precision. With this in mind, we\n        // compute shift and offset only once.\n        shift = components[0].precision - 8;\n        offset = (128 << shift) + 0.5;\n        max = 255 * (1 << shift);\n        maxK = max * 0.5;\n        min = -maxK;\n\n        var component0 = tile.components[0];\n        var alpha01 = componentsCount - 3;\n        jj = y0items.length;\n        if (!component0.codingStyleParameters.reversibleTransformation) {\n          // inverse irreversible multiple component transform\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            r = y0 + 1.402 * y2;\n            g = y0 - 0.34413 * y1 - 0.71414 * y2;\n            b = y0 + 1.772 * y1;\n            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;\n            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;\n            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;\n          }\n        } else {\n          // inverse reversible multiple component transform\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            g = y0 - ((y2 + y1) >> 2);\n            r = g + y2;\n            b = g + y1;\n            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;\n            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;\n            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;\n          }\n        }\n        if (fourComponents) {\n          for (j = 0, pos = 3; j < jj; j++, pos += 4) {\n            k = y3items[j];\n            out[pos] = k <= min ? 0 : k >= maxK ? 255 : (k + offset) >> shift;\n          }\n        }\n      } else { // no multi-component transform\n        for (c = 0; c < componentsCount; c++) {\n          if (components[c].precision === 8){\n            var items = transformedTiles[c].items;\n            shift = components[c].precision - 8;\n            offset = (128 << shift) + 0.5;\n            max = (127.5 * (1 << shift));\n            min = -max;\n            for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n              val = items[j];\n              out[pos] = val <= min ? 0 :\n                         val >= max ? 255 : (val + offset) >> shift;\n              pos += componentsCount;\n            }\n          }else{\n            var isSigned = components[c].isSigned;\n            var items = transformedTiles[c].items;\n\n            if(isSigned){\n              for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n                out[pos] = items[j];\n                pos += componentsCount;\n              }\n            }else{\n              shift = components[c].precision - 8;\n              offset = (128 << shift) + 0.5;\n              var precisionMax = Math.pow(2,components[c].precision)-1;\n              for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n                val = items[j];\n                out[pos] = Math.max(Math.min((val + offset),precisionMax),0);\n                pos += componentsCount;\n              }\n            }\n          }\n        }\n      }\n      resultImages.push(result);\n    }\n    return resultImages;\n  }\n  function initializeTile(context, tileIndex) {\n    var siz = context.SIZ;\n    var componentsCount = siz.Csiz;\n    var tile = context.tiles[tileIndex];\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var qcdOrQcc = (context.currentTile.QCC[c] !== undefined ?\n        context.currentTile.QCC[c] : context.currentTile.QCD);\n      component.quantizationParameters = qcdOrQcc;\n      var codOrCoc = (context.currentTile.COC[c] !== undefined  ?\n        context.currentTile.COC[c] : context.currentTile.COD);\n      component.codingStyleParameters = codOrCoc;\n    }\n    tile.codingStyleDefaultParameters = context.currentTile.COD;\n  }\n\n  // Section B.10.2 Tag trees\n  var TagTree = (function TagTreeClosure() {\n    function TagTree(width, height) {\n      var levelsLength = log2(Math.max(width, height)) + 1;\n      this.levels = [];\n      for (var i = 0; i < levelsLength; i++) {\n        var level = {\n          width: width,\n          height: height,\n          items: []\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n    TagTree.prototype = {\n      reset: function TagTree_reset(i, j) {\n        var currentLevel = 0, value = 0, level;\n        while (currentLevel < this.levels.length) {\n          level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          if (level.items[index] !== undefined) {\n            value = level.items[index];\n            break;\n          }\n          level.index = index;\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n        currentLevel--;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        this.currentLevel = currentLevel;\n        delete this.value;\n      },\n      incrementValue: function TagTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index]++;\n      },\n      nextLevel: function TagTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        currentLevel--;\n        if (currentLevel < 0) {\n          this.value = value;\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return TagTree;\n  })();\n\n  var InclusionTree = (function InclusionTreeClosure() {\n    function InclusionTree(width, height) {\n      var levelsLength = log2(Math.max(width, height)) + 1;\n      this.levels = [];\n      for (var i = 0; i < levelsLength; i++) {\n        var items = new Uint8Array(width * height);\n        var status = new Uint8Array(width * height);\n        for (var j = 0, jj = items.length; j < jj; j++) {\n          items[j] = 0;\n          status[j] = 0;\n        }\n\n        var level = {\n          width: width,\n          height: height,\n          items: items,\n          status: status\n        };\n        this.levels.push(level);\n\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n    InclusionTree.prototype = {\n      reset: function InclusionTree_reset(i, j, stopValue) {\n        this.currentStopValue = stopValue;\n        var currentLevel = 0;\n        while (currentLevel < this.levels.length) {\n          var level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          level.index = index;\n\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n\n        this.currentLevel = this.levels.length - 1;\n        this.minValue =this.levels[this.currentLevel].items[0];\n        return;\n      },\n      incrementValue: function InclusionTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index] = level.items[level.index] + 1;\n        if(level.items[level.index] > this.minValue) {\n          this.minValue = level.items[level.index];\n        }\n      },\n      nextLevel: function InclusionTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        currentLevel--;\n        if (currentLevel < 0) {\n          return false;\n        } else {\n          this.currentLevel = currentLevel;\n          var level = this.levels[currentLevel];\n          if(level.items[level.index] < this.minValue) {\n            level.items[level.index] = this.minValue;\n          }else if (level.items[level.index] > this.minValue) {\n            this.minValue = level.items[level.index];\n          }\n          return true;\n        }\n      },\n    isLeaf: function InclusionTree_isLeaf(){\n      return (this.currentLevel === 0);\n    },\n    isAboveThreshold: function InclusionTree_isAboveThreshold(){\n      var levelindex = this.currentLevel;\n      var level = this.levels[levelindex];\n      return (level.items[level.index] > this.currentStopValue);\n    },\n    isKnown: function InclusionTree_isKnown(){\n      var levelindex = this.currentLevel;\n      var level = this.levels[levelindex];\n      return (level.status[level.index] > 0);\n    },\n    setKnown: function InclusionTree_setKnown(){\n      var levelindex = this.currentLevel;\n      var level = this.levels[levelindex];\n      level.status[level.index] = 1;\n      return;\n    }\n\n    };\n    return InclusionTree;\n  })();\n\n  // Section D. Coefficient bit modeling\n  var BitModel = (function BitModelClosure() {\n    var UNIFORM_CONTEXT = 17;\n    var RUNLENGTH_CONTEXT = 18;\n    // Table D-1\n    // The index is binary presentation: 0dddvvhh, ddd - sum of Di (0..4),\n    // vv - sum of Vi (0..2), and hh - sum of Hi (0..2)\n    var LLAndLHContextsLabel = new Uint8Array([\n      0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4,\n      7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6,\n      8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8\n    ]);\n    var HLContextLabel = new Uint8Array([\n      0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8,\n      8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3,\n      4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8\n    ]);\n    var HHContextLabel = new Uint8Array([\n      0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5,\n      5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8,\n      8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8\n    ]);\n\n    function BitModel(width, height, subband, zeroBitPlanes, mb) {\n      this.width = width;\n      this.height = height;\n\n      this.contextLabelTable = (subband === 'HH' ? HHContextLabel :\n        (subband === 'HL' ? HLContextLabel : LLAndLHContextsLabel));\n\n      var coefficientCount = width * height;\n\n      // coefficients outside the encoding region treated as insignificant\n      // add border state cells for significanceState\n      this.neighborsSignificance = new Uint8Array(coefficientCount);\n      this.coefficentsSign = new Uint8Array(coefficientCount);\n      this.coefficentsMagnitude = mb > 14 ? new Uint32Array(coefficientCount) :\n                                  mb > 6 ? new Uint16Array(coefficientCount) :\n                                  new Uint8Array(coefficientCount);\n      this.processingFlags = new Uint8Array(coefficientCount);\n\n      var bitsDecoded = new Uint8Array(coefficientCount);\n      if (zeroBitPlanes !== 0) {\n        for (var i = 0; i < coefficientCount; i++) {\n          bitsDecoded[i] = zeroBitPlanes;\n        }\n      }\n      this.bitsDecoded = bitsDecoded;\n\n      this.reset();\n    }\n\n    BitModel.prototype = {\n      setDecoder: function BitModel_setDecoder(decoder) {\n        this.decoder = decoder;\n      },\n      reset: function BitModel_reset() {\n        // We have 17 contexts that are accessed via context labels,\n        // plus the uniform and runlength context.\n        this.contexts = new Int8Array(19);\n\n        // Contexts are packed into 1 byte:\n        // highest 7 bits carry the index, lowest bit carries mps\n        this.contexts[0] = (4 << 1) | 0;\n        this.contexts[UNIFORM_CONTEXT] = (46 << 1) | 0;\n        this.contexts[RUNLENGTH_CONTEXT] = (3 << 1) | 0;\n      },\n      setNeighborsSignificance:\n        function BitModel_setNeighborsSignificance(row, column, index) {\n        var neighborsSignificance = this.neighborsSignificance;\n        var width = this.width, height = this.height;\n        var left = (column > 0);\n        var right = (column + 1 < width);\n        var i;\n\n        if (row > 0) {\n          i = index - width;\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (row + 1 < height) {\n          i = index + width;\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (left) {\n          neighborsSignificance[index - 1] += 0x01;\n        }\n        if (right) {\n          neighborsSignificance[index + 1] += 0x01;\n        }\n        neighborsSignificance[index] |= 0x80;\n      },\n      runSignificancePropogationPass:\n        function BitModel_runSignificancePropogationPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var neighborsSignificance = this.neighborsSignificance;\n        var processingFlags = this.processingFlags;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processedInverseMask = ~1;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n\n        for (var i0 = 0; i0 < height; i0 += 4) {\n          for (var j = 0; j < width; j++) {\n            var index = i0 * width + j;\n            for (var i1 = 0; i1 < 4; i1++, index += width) {\n              var i = i0 + i1;\n              if (i >= height) {\n                break;\n              }\n              // clear processed flag first\n              processingFlags[index] &= processedInverseMask;\n\n              if (coefficentsMagnitude[index] ||\n                  !neighborsSignificance[index]) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n              if (decision) {\n                var sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      decodeSignBit: function BitModel_decodeSignBit(row, column, index) {\n        var width = this.width, height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contribution, sign0, sign1, significance1;\n        var contextLabel, decoded;\n\n        // calculate horizontal contribution\n        significance1 = (column > 0 && coefficentsMagnitude[index - 1] !== 0);\n        if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {\n          sign1 = coefficentsSign[index + 1];\n          if (significance1) {\n            sign0 = coefficentsSign[index - 1];\n            contribution = 1 - sign1 - sign0;\n          } else {\n            contribution = 1 - sign1 - sign1;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - 1];\n          contribution = 1 - sign0 - sign0;\n        } else {\n          contribution = 0;\n        }\n        var horizontalContribution = 3 * contribution;\n\n        // calculate vertical contribution and combine with the horizontal\n        significance1 = (row > 0 && coefficentsMagnitude[index - width] !== 0);\n        if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {\n          sign1 = coefficentsSign[index + width];\n          if (significance1) {\n            sign0 = coefficentsSign[index - width];\n            contribution = 1 - sign1 - sign0 + horizontalContribution;\n          } else {\n            contribution = 1 - sign1 - sign1 + horizontalContribution;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - width];\n          contribution = 1 - sign0 - sign0 + horizontalContribution;\n        } else {\n          contribution = horizontalContribution;\n        }\n\n        if (contribution >= 0) {\n          contextLabel = 9 + contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel);\n        } else {\n          contextLabel = 9 - contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;\n        }\n        return decoded;\n      },\n      runMagnitudeRefinementPass:\n        function BitModel_runMagnitudeRefinementPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var neighborsSignificance = this.neighborsSignificance;\n        var contexts = this.contexts;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var length = width * height;\n        var width4 = width * 4;\n\n        for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {\n          indexNext = Math.min(length, index0 + width4);\n          for (var j = 0; j < width; j++) {\n            for (var index = index0 + j; index < indexNext; index += width) {\n\n              // significant but not those that have just become\n              if (!coefficentsMagnitude[index] ||\n                (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = 16;\n              if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {\n                processingFlags[index] ^= firstMagnitudeBitMask;\n                // first refinement\n               var significance = neighborsSignificance[index] & 127;\n               contextLabel = significance === 0 ? 15 : 14;\n              }\n\n              var bit = decoder.readBit(contexts, contextLabel);\n              coefficentsMagnitude[index] =\n                (coefficentsMagnitude[index] << 1) | bit;\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      runCleanupPass: function BitModel_runCleanupPass() {\n        var decoder = this.decoder;\n        var width = this.width, height = this.height;\n        var neighborsSignificance = this.neighborsSignificance;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var oneRowDown = width;\n        var twoRowsDown = width * 2;\n        var threeRowsDown = width * 3;\n        var iNext;\n        for (var i0 = 0; i0 < height; i0 = iNext) {\n          iNext = Math.min(i0 + 4, height);\n          var indexBase = i0 * width;\n          var checkAllEmpty = i0 + 3 < height;\n          for (var j = 0; j < width; j++) {\n            var index0 = indexBase + j;\n            // using the property: labels[neighborsSignificance[index]] === 0\n            // when neighborsSignificance[index] === 0\n            var allEmpty = (checkAllEmpty &&\n              processingFlags[index0] === 0 &&\n              processingFlags[index0 + oneRowDown] === 0 &&\n              processingFlags[index0 + twoRowsDown] === 0 &&\n              processingFlags[index0 + threeRowsDown] === 0 &&\n              neighborsSignificance[index0] === 0 &&\n              neighborsSignificance[index0 + oneRowDown] === 0 &&\n              neighborsSignificance[index0 + twoRowsDown] === 0 &&\n              neighborsSignificance[index0 + threeRowsDown] === 0);\n            var i1 = 0, index = index0;\n            var i = i0, sign;\n            if (allEmpty) {\n              var hasSignificantCoefficent =\n                decoder.readBit(contexts, RUNLENGTH_CONTEXT);\n              if (!hasSignificantCoefficent) {\n                bitsDecoded[index0]++;\n                bitsDecoded[index0 + oneRowDown]++;\n                bitsDecoded[index0 + twoRowsDown]++;\n                bitsDecoded[index0 + threeRowsDown]++;\n                continue; // next column\n              }\n              i1 = (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |\n                    decoder.readBit(contexts, UNIFORM_CONTEXT);\n              if (i1 !== 0) {\n                i = i0 + i1;\n                index += i1 * width;\n              }\n\n              sign = this.decodeSignBit(i, j, index);\n              coefficentsSign[index] = sign;\n              coefficentsMagnitude[index] = 1;\n              this.setNeighborsSignificance(i, j, index);\n              processingFlags[index] |= firstMagnitudeBitMask;\n\n              index = index0;\n              for (var i2 = i0; i2 <= i; i2++, index += width) {\n                bitsDecoded[index]++;\n              }\n\n              i1++;\n            }\n            for (i = i0 + i1; i < iNext; i++, index += width) {\n              if (coefficentsMagnitude[index] ||\n                (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n              if (decision === 1) {\n                sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n              bitsDecoded[index]++;\n            }\n          }\n        }\n      },\n      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {\n        var decoder = this.decoder;\n        var contexts = this.contexts;\n        var symbol = (decoder.readBit(contexts, UNIFORM_CONTEXT) << 3) |\n                     (decoder.readBit(contexts, UNIFORM_CONTEXT) << 2) |\n                     (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |\n                      decoder.readBit(contexts, UNIFORM_CONTEXT);\n        if (symbol !== 0xA) {\n          throw new Error('JPX Error: Invalid segmentation symbol');\n        }\n      }\n    };\n\n    return BitModel;\n  })();\n\n  // Section F, Discrete wavelet transformation\n  var Transform = (function TransformClosure() {\n    function Transform() {}\n\n    Transform.prototype.calculate =\n      function transformCalculate(subbands, u0, v0) {\n      var ll = subbands[0];\n      for (var i = 1, ii = subbands.length; i < ii; i++) {\n        ll = this.iterate(ll, subbands[i], u0, v0);\n      }\n      return ll;\n    };\n    Transform.prototype.extend = function extend(buffer, offset, size) {\n      // Section F.3.7 extending... using max extension of 4\n      var i1 = offset - 1, j1 = offset + 1;\n      var i2 = offset + size - 2, j2 = offset + size;\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1] = buffer[j1];\n      buffer[j2] = buffer[i2];\n    };\n    Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh,\n                                                             u0, v0) {\n      var llWidth = ll.width, llHeight = ll.height, llItems = ll.items;\n      var width = hl_lh_hh.width;\n      var height = hl_lh_hh.height;\n      var items = hl_lh_hh.items;\n      var i, j, k, l, u, v;\n\n      // Interleave LL according to Section F.3.3\n      for (k = 0, i = 0; i < llHeight; i++) {\n        l = i * 2 * width;\n        for (j = 0; j < llWidth; j++, k++, l += 2) {\n          items[l] = llItems[k];\n        }\n      }\n      // The LL band is not needed anymore.\n      llItems = ll.items = null;\n\n      var bufferPadding = 4;\n      var rowBuffer = new Float32Array(width + 2 * bufferPadding);\n\n      // Section F.3.4 HOR_SR\n      if (width === 1) {\n        // if width = 1, when u0 even keep items as is, when odd divide by 2\n        if ((u0 & 1) !== 0) {\n          for (v = 0, k = 0; v < height; v++, k += width) {\n            items[k] *= 0.5;\n          }\n        }\n      } else {\n        for (v = 0, k = 0; v < height; v++, k += width) {\n          rowBuffer.set(items.subarray(k, k + width), bufferPadding);\n\n          this.extend(rowBuffer, bufferPadding, width);\n          this.filter(rowBuffer, bufferPadding, width);\n\n          items.set(\n            rowBuffer.subarray(bufferPadding, bufferPadding + width),\n            k);\n        }\n      }\n\n      // Accesses to the items array can take long, because it may not fit into\n      // CPU cache and has to be fetched from main memory. Since subsequent\n      // accesses to the items array are not local when reading columns, we\n      // have a cache miss every time. To reduce cache misses, get up to\n      // 'numBuffers' items at a time and store them into the individual\n      // buffers. The colBuffers should be small enough to fit into CPU cache.\n      var numBuffers = 16;\n      var colBuffers = [];\n      for (i = 0; i < numBuffers; i++) {\n        colBuffers.push(new Float32Array(height + 2 * bufferPadding));\n      }\n      var b, currentBuffer = 0;\n      ll = bufferPadding + height;\n\n      // Section F.3.5 VER_SR\n      if (height === 1) {\n          // if height = 1, when v0 even keep items as is, when odd divide by 2\n        if ((v0 & 1) !== 0) {\n          for (u = 0; u < width; u++) {\n            items[u] *= 0.5;\n          }\n        }\n      } else {\n        for (u = 0; u < width; u++) {\n          // if we ran out of buffers, copy several image columns at once\n          if (currentBuffer === 0) {\n            numBuffers = Math.min(width - u, numBuffers);\n            for (k = u, l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                colBuffers[b][l] = items[k + b];\n              }\n            }\n            currentBuffer = numBuffers;\n          }\n\n          currentBuffer--;\n          var buffer = colBuffers[currentBuffer];\n          this.extend(buffer, bufferPadding, height);\n          this.filter(buffer, bufferPadding, height);\n\n          // If this is last buffer in this group of buffers, flush all buffers.\n          if (currentBuffer === 0) {\n            k = u - numBuffers + 1;\n            for (l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                items[k + b] = colBuffers[b][l];\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        width: width,\n        height: height,\n        items: items\n      };\n    };\n    return Transform;\n  })();\n\n  // Section 3.8.2 Irreversible 9-7 filter\n  var IrreversibleTransform = (function IrreversibleTransformClosure() {\n    function IrreversibleTransform() {\n      Transform.call(this);\n    }\n\n    IrreversibleTransform.prototype = Object.create(Transform.prototype);\n    IrreversibleTransform.prototype.filter =\n      function irreversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n, current, next;\n\n      var alpha = -1.586134342059924;\n      var beta = -0.052980118572961;\n      var gamma = 0.882911075530934;\n      var delta = 0.443506852043971;\n      var K = 1.230174104914001;\n      var K_ = 1 / K;\n\n      // step 1 is combined with step 3\n\n      // step 2\n      j = offset - 3;\n      for (n = len + 4; n--; j += 2) {\n        x[j] *= K_;\n      }\n\n      // step 1 & 3\n      j = offset - 2;\n      current = delta * x[j -1];\n      for (n = len + 3; n--; j += 2) {\n        next = delta * x[j + 1];\n        x[j] = K * x[j] - current - next;\n        if (n--) {\n          j += 2;\n          current = delta * x[j + 1];\n          x[j] = K * x[j] - current - next;\n        } else {\n          break;\n        }\n      }\n\n      // step 4\n      j = offset - 1;\n      current = gamma * x[j - 1];\n      for (n = len + 2; n--; j += 2) {\n        next = gamma * x[j + 1];\n        x[j] -= current + next;\n        if (n--) {\n          j += 2;\n          current = gamma * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      // step 5\n      j = offset;\n      current = beta * x[j - 1];\n      for (n = len + 1; n--; j += 2) {\n        next = beta * x[j + 1];\n        x[j] -= current + next;\n        if (n--) {\n          j += 2;\n          current = beta * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      // step 6\n      if (len !== 0) {\n        j = offset + 1;\n        current = alpha * x[j - 1];\n        for (n = len; n--; j += 2) {\n          next = alpha * x[j + 1];\n          x[j] -= current + next;\n          if (n--) {\n            j += 2;\n            current = alpha * x[j + 1];\n            x[j] -= current + next;\n          } else {\n            break;\n          }\n        }\n      }\n    };\n\n    return IrreversibleTransform;\n  })();\n\n  // Section 3.8.1 Reversible 5-3 filter\n  var ReversibleTransform = (function ReversibleTransformClosure() {\n    function ReversibleTransform() {\n      Transform.call(this);\n    }\n\n    ReversibleTransform.prototype = Object.create(Transform.prototype);\n    ReversibleTransform.prototype.filter =\n      function reversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n;\n\n      for (j = offset, n = len + 1; n--; j += 2) {\n        x[j] -= (x[j - 1] + x[j + 1] + 2) >> 2;\n      }\n\n      for (j = offset + 1, n = len; n--; j += 2) {\n        x[j] += (x[j - 1] + x[j + 1]) >> 1;\n      }\n    };\n\n    return ReversibleTransform;\n  })();\n\n  return JpxImage;\n})();\n\n\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\n/* This class implements the QM Coder decoding as defined in\n *   JPEG 2000 Part I Final Committee Draft Version 1.0\n *   Annex C.3 Arithmetic decoding procedure \n * available at http://www.jpeg.org/public/fcd15444-1.pdf\n * \n * The arithmetic decoder is used in conjunction with context models to decode\n * JPEG2000 and JBIG2 streams.\n */\nvar ArithmeticDecoder = (function ArithmeticDecoderClosure() {\n  // Table C-2\n  var QeTable = [\n    {qe: 0x5601, nmps: 1, nlps: 1, switchFlag: 1},\n    {qe: 0x3401, nmps: 2, nlps: 6, switchFlag: 0},\n    {qe: 0x1801, nmps: 3, nlps: 9, switchFlag: 0},\n    {qe: 0x0AC1, nmps: 4, nlps: 12, switchFlag: 0},\n    {qe: 0x0521, nmps: 5, nlps: 29, switchFlag: 0},\n    {qe: 0x0221, nmps: 38, nlps: 33, switchFlag: 0},\n    {qe: 0x5601, nmps: 7, nlps: 6, switchFlag: 1},\n    {qe: 0x5401, nmps: 8, nlps: 14, switchFlag: 0},\n    {qe: 0x4801, nmps: 9, nlps: 14, switchFlag: 0},\n    {qe: 0x3801, nmps: 10, nlps: 14, switchFlag: 0},\n    {qe: 0x3001, nmps: 11, nlps: 17, switchFlag: 0},\n    {qe: 0x2401, nmps: 12, nlps: 18, switchFlag: 0},\n    {qe: 0x1C01, nmps: 13, nlps: 20, switchFlag: 0},\n    {qe: 0x1601, nmps: 29, nlps: 21, switchFlag: 0},\n    {qe: 0x5601, nmps: 15, nlps: 14, switchFlag: 1},\n    {qe: 0x5401, nmps: 16, nlps: 14, switchFlag: 0},\n    {qe: 0x5101, nmps: 17, nlps: 15, switchFlag: 0},\n    {qe: 0x4801, nmps: 18, nlps: 16, switchFlag: 0},\n    {qe: 0x3801, nmps: 19, nlps: 17, switchFlag: 0},\n    {qe: 0x3401, nmps: 20, nlps: 18, switchFlag: 0},\n    {qe: 0x3001, nmps: 21, nlps: 19, switchFlag: 0},\n    {qe: 0x2801, nmps: 22, nlps: 19, switchFlag: 0},\n    {qe: 0x2401, nmps: 23, nlps: 20, switchFlag: 0},\n    {qe: 0x2201, nmps: 24, nlps: 21, switchFlag: 0},\n    {qe: 0x1C01, nmps: 25, nlps: 22, switchFlag: 0},\n    {qe: 0x1801, nmps: 26, nlps: 23, switchFlag: 0},\n    {qe: 0x1601, nmps: 27, nlps: 24, switchFlag: 0},\n    {qe: 0x1401, nmps: 28, nlps: 25, switchFlag: 0},\n    {qe: 0x1201, nmps: 29, nlps: 26, switchFlag: 0},\n    {qe: 0x1101, nmps: 30, nlps: 27, switchFlag: 0},\n    {qe: 0x0AC1, nmps: 31, nlps: 28, switchFlag: 0},\n    {qe: 0x09C1, nmps: 32, nlps: 29, switchFlag: 0},\n    {qe: 0x08A1, nmps: 33, nlps: 30, switchFlag: 0},\n    {qe: 0x0521, nmps: 34, nlps: 31, switchFlag: 0},\n    {qe: 0x0441, nmps: 35, nlps: 32, switchFlag: 0},\n    {qe: 0x02A1, nmps: 36, nlps: 33, switchFlag: 0},\n    {qe: 0x0221, nmps: 37, nlps: 34, switchFlag: 0},\n    {qe: 0x0141, nmps: 38, nlps: 35, switchFlag: 0},\n    {qe: 0x0111, nmps: 39, nlps: 36, switchFlag: 0},\n    {qe: 0x0085, nmps: 40, nlps: 37, switchFlag: 0},\n    {qe: 0x0049, nmps: 41, nlps: 38, switchFlag: 0},\n    {qe: 0x0025, nmps: 42, nlps: 39, switchFlag: 0},\n    {qe: 0x0015, nmps: 43, nlps: 40, switchFlag: 0},\n    {qe: 0x0009, nmps: 44, nlps: 41, switchFlag: 0},\n    {qe: 0x0005, nmps: 45, nlps: 42, switchFlag: 0},\n    {qe: 0x0001, nmps: 45, nlps: 43, switchFlag: 0},\n    {qe: 0x5601, nmps: 46, nlps: 46, switchFlag: 0}\n  ];\n\n  // C.3.5 Initialisation of the decoder (INITDEC)\n  function ArithmeticDecoder(data, start, end) {\n    this.data = data;\n    this.bp = start;\n    this.dataEnd = end;\n\n    this.chigh = data[start];\n    this.clow = 0;\n\n    this.byteIn();\n\n    this.chigh = ((this.chigh << 7) & 0xFFFF) | ((this.clow >> 9) & 0x7F);\n    this.clow = (this.clow << 7) & 0xFFFF;\n    this.ct -= 7;\n    this.a = 0x8000;\n  }\n\n  ArithmeticDecoder.prototype = {\n    // C.3.4 Compressed data input (BYTEIN)\n    byteIn: function ArithmeticDecoder_byteIn() {\n      var data = this.data;\n      var bp = this.bp;\n      if (data[bp] === 0xFF) {\n        var b1 = data[bp + 1];\n        if (b1 > 0x8F) {\n          this.clow += 0xFF00;\n          this.ct = 8;\n        } else {\n          bp++;\n          this.clow += (data[bp] << 9);\n          this.ct = 7;\n          this.bp = bp;\n        }\n      } else {\n        bp++;\n        this.clow += bp < this.dataEnd ? (data[bp] << 8) : 0xFF00;\n        this.ct = 8;\n        this.bp = bp;\n      }\n      if (this.clow > 0xFFFF) {\n        this.chigh += (this.clow >> 16);\n        this.clow &= 0xFFFF;\n      }\n    },\n    // C.3.2 Decoding a decision (DECODE)\n    readBit: function ArithmeticDecoder_readBit(contexts, pos) {\n      // contexts are packed into 1 byte:\n      // highest 7 bits carry cx.index, lowest bit carries cx.mps\n      var cx_index = contexts[pos] >> 1, cx_mps = contexts[pos] & 1;\n      var qeTableIcx = QeTable[cx_index];\n      var qeIcx = qeTableIcx.qe;\n      var d;\n      var a = this.a - qeIcx;\n\n      if (this.chigh < qeIcx) {\n        // exchangeLps\n        if (a < qeIcx) {\n          a = qeIcx;\n          d = cx_mps;\n          cx_index = qeTableIcx.nmps;\n        } else {\n          a = qeIcx;\n          d = 1 ^ cx_mps;\n          if (qeTableIcx.switchFlag === 1) {\n            cx_mps = d;\n          }\n          cx_index = qeTableIcx.nlps;\n        }\n      } else {\n        this.chigh -= qeIcx;\n        if ((a & 0x8000) !== 0) {\n          this.a = a;\n          return cx_mps;\n        }\n        // exchangeMps\n        if (a < qeIcx) {\n          d = 1 ^ cx_mps;\n          if (qeTableIcx.switchFlag === 1) {\n            cx_mps = d;\n          }\n          cx_index = qeTableIcx.nlps;\n        } else {\n          d = cx_mps;\n          cx_index = qeTableIcx.nmps;\n        }\n      }\n      // C.3.3 renormD;\n      do {\n        if (this.ct === 0) {\n          this.byteIn();\n        }\n\n        a <<= 1;\n        this.chigh = ((this.chigh << 1) & 0xFFFF) | ((this.clow >> 15) & 1);\n        this.clow = (this.clow << 1) & 0xFFFF;\n        this.ct--;\n      } while ((a & 0x8000) === 0);\n      this.a = a;\n\n      contexts[pos] = cx_index << 1 | cx_mps;\n      return d;\n    }\n  };\n\n  return ArithmeticDecoder;\n})();\n\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals Cmd, ColorSpace, Dict, MozBlobBuilder, Name, PDFJS, Ref, URL,\n           Promise */\n\n'use strict';\n\nvar globalScope = (typeof window === 'undefined') ? this : window;\n\nvar isWorker = (typeof window === 'undefined');\n\nvar FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\nvar TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4\n};\n\nvar ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3\n};\n\nvar AnnotationType = {\n  WIDGET: 1,\n  TEXT: 2,\n  LINK: 3\n};\n\nvar StreamType = {\n  UNKNOWN: 0,\n  FLATE: 1,\n  LZW: 2,\n  DCT: 3,\n  JPX: 4,\n  JBIG: 5,\n  A85: 6,\n  AHX: 7,\n  CCF: 8,\n  RL: 9\n};\n\nvar FontType = {\n  UNKNOWN: 0,\n  TYPE1: 1,\n  TYPE1C: 2,\n  CIDFONTTYPE0: 3,\n  CIDFONTTYPE0C: 4,\n  TRUETYPE: 5,\n  CIDFONTTYPE2: 6,\n  TYPE3: 7,\n  OPENTYPE: 8,\n  TYPE0: 9,\n  MMTYPE1: 10\n};\n\n// The global PDFJS object exposes the API\n// In production, it will be declared outside a global wrapper\n// In development, it will be declared here\nif (!globalScope.PDFJS) {\n  globalScope.PDFJS = {};\n}\n\nglobalScope.PDFJS.pdfBug = false;\n\nPDFJS.VERBOSITY_LEVELS = {\n  errors: 0,\n  warnings: 1,\n  infos: 5\n};\n\n// All the possible operations for an operator list.\nvar OPS = PDFJS.OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91\n};\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (PDFJS.verbosity >= PDFJS.VERBOSITY_LEVELS.infos) {\n    console.log('Info: ' + msg);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (PDFJS.verbosity >= PDFJS.VERBOSITY_LEVELS.warnings) {\n    console.log('Warning: ' + msg);\n  }\n}\n\n// Fatal errors that should trigger the fallback UI and halt execution by\n// throwing an exception.\nfunction error(msg) {\n  // If multiple arguments were passed, pass them all to the log function.\n  if (arguments.length > 1) {\n    var logArguments = ['Error:'];\n    logArguments.push.apply(logArguments, arguments);\n    console.log.apply(console, logArguments);\n    // Join the arguments into a single string for the lines below.\n    msg = [].join.call(arguments, ' ');\n  } else {\n    console.log('Error: ' + msg);\n  }\n  console.log(backtrace());\n  UnsupportedManager.notify(UNSUPPORTED_FEATURES.unknown);\n  throw new Error(msg);\n}\n\nfunction backtrace() {\n  try {\n    throw new Error();\n  } catch (e) {\n    return e.stack ? e.stack.split('\\n').slice(2).join('\\n') : '';\n  }\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    error(msg);\n  }\n}\n\nvar UNSUPPORTED_FEATURES = PDFJS.UNSUPPORTED_FEATURES = {\n  unknown: 'unknown',\n  forms: 'forms',\n  javaScript: 'javaScript',\n  smask: 'smask',\n  shadingPattern: 'shadingPattern',\n  font: 'font'\n};\n\nvar UnsupportedManager = PDFJS.UnsupportedManager =\n  (function UnsupportedManagerClosure() {\n  var listeners = [];\n  return {\n    listen: function (cb) {\n      listeners.push(cb);\n    },\n    notify: function (featureId) {\n      warn('Unsupported feature \"' + featureId + '\"');\n      for (var i = 0, ii = listeners.length; i < ii; i++) {\n        listeners[i](featureId);\n      }\n    }\n  };\n})();\n\n// Combines two URLs. The baseUrl shall be absolute URL. If the url is an\n// absolute URL, it will be returned as is.\nfunction combineUrl(baseUrl, url) {\n  if (!url) {\n    return baseUrl;\n  }\n  if (/^[a-z][a-z0-9+\\-.]*:/i.test(url)) {\n    return url;\n  }\n  var i;\n  if (url.charAt(0) === '/') {\n    // absolute path\n    i = baseUrl.indexOf('://');\n    if (url.charAt(1) === '/') {\n      ++i;\n    } else {\n      i = baseUrl.indexOf('/', i + 3);\n    }\n    return baseUrl.substring(0, i) + url;\n  } else {\n    // relative path\n    var pathLength = baseUrl.length;\n    i = baseUrl.lastIndexOf('#');\n    pathLength = i >= 0 ? i : pathLength;\n    i = baseUrl.lastIndexOf('?', pathLength);\n    pathLength = i >= 0 ? i : pathLength;\n    var prefixLength = baseUrl.lastIndexOf('/', pathLength);\n    return baseUrl.substring(0, prefixLength + 1) + url;\n  }\n}\n\n// Validates if URL is safe and allowed, e.g. to avoid XSS.\nfunction isValidUrl(url, allowRelative) {\n  if (!url) {\n    return false;\n  }\n  // RFC 3986 (http://tools.ietf.org/html/rfc3986#section-3.1)\n  // scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n  var protocol = /^[a-z][a-z0-9+\\-.]*(?=:)/i.exec(url);\n  if (!protocol) {\n    return allowRelative;\n  }\n  protocol = protocol[0].toLowerCase();\n  switch (protocol) {\n    case 'http':\n    case 'https':\n    case 'ftp':\n    case 'mailto':\n    case 'tel':\n      return true;\n    default:\n      return false;\n  }\n}\nPDFJS.isValidUrl = isValidUrl;\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, { value: value,\n                                     enumerable: true,\n                                     configurable: true,\n                                     writable: false });\n  return value;\n}\nPDFJS.shadow = shadow;\n\nvar PasswordResponses = PDFJS.PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2\n};\n\nvar PasswordException = (function PasswordExceptionClosure() {\n  function PasswordException(msg, code) {\n    this.name = 'PasswordException';\n    this.message = msg;\n    this.code = code;\n  }\n\n  PasswordException.prototype = new Error();\n  PasswordException.constructor = PasswordException;\n\n  return PasswordException;\n})();\nPDFJS.PasswordException = PasswordException;\n\nvar UnknownErrorException = (function UnknownErrorExceptionClosure() {\n  function UnknownErrorException(msg, details) {\n    this.name = 'UnknownErrorException';\n    this.message = msg;\n    this.details = details;\n  }\n\n  UnknownErrorException.prototype = new Error();\n  UnknownErrorException.constructor = UnknownErrorException;\n\n  return UnknownErrorException;\n})();\nPDFJS.UnknownErrorException = UnknownErrorException;\n\nvar InvalidPDFException = (function InvalidPDFExceptionClosure() {\n  function InvalidPDFException(msg) {\n    this.name = 'InvalidPDFException';\n    this.message = msg;\n  }\n\n  InvalidPDFException.prototype = new Error();\n  InvalidPDFException.constructor = InvalidPDFException;\n\n  return InvalidPDFException;\n})();\nPDFJS.InvalidPDFException = InvalidPDFException;\n\nvar MissingPDFException = (function MissingPDFExceptionClosure() {\n  function MissingPDFException(msg) {\n    this.name = 'MissingPDFException';\n    this.message = msg;\n  }\n\n  MissingPDFException.prototype = new Error();\n  MissingPDFException.constructor = MissingPDFException;\n\n  return MissingPDFException;\n})();\nPDFJS.MissingPDFException = MissingPDFException;\n\nvar UnexpectedResponseException =\n    (function UnexpectedResponseExceptionClosure() {\n  function UnexpectedResponseException(msg, status) {\n    this.name = 'UnexpectedResponseException';\n    this.message = msg;\n    this.status = status;\n  }\n\n  UnexpectedResponseException.prototype = new Error();\n  UnexpectedResponseException.constructor = UnexpectedResponseException;\n\n  return UnexpectedResponseException;\n})();\nPDFJS.UnexpectedResponseException = UnexpectedResponseException;\n\nvar NotImplementedException = (function NotImplementedExceptionClosure() {\n  function NotImplementedException(msg) {\n    this.message = msg;\n  }\n\n  NotImplementedException.prototype = new Error();\n  NotImplementedException.prototype.name = 'NotImplementedException';\n  NotImplementedException.constructor = NotImplementedException;\n\n  return NotImplementedException;\n})();\n\nvar MissingDataException = (function MissingDataExceptionClosure() {\n  function MissingDataException(begin, end) {\n    this.begin = begin;\n    this.end = end;\n    this.message = 'Missing data [' + begin + ', ' + end + ')';\n  }\n\n  MissingDataException.prototype = new Error();\n  MissingDataException.prototype.name = 'MissingDataException';\n  MissingDataException.constructor = MissingDataException;\n\n  return MissingDataException;\n})();\n\nvar XRefParseException = (function XRefParseExceptionClosure() {\n  function XRefParseException(msg) {\n    this.message = msg;\n  }\n\n  XRefParseException.prototype = new Error();\n  XRefParseException.prototype.name = 'XRefParseException';\n  XRefParseException.constructor = XRefParseException;\n\n  return XRefParseException;\n})();\n\n\nfunction bytesToString(bytes) {\n  assert(bytes !== null && typeof bytes === 'object' &&\n         bytes.length !== undefined, 'Invalid argument for bytesToString');\n  var length = bytes.length;\n  var MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  var strBuf = [];\n  for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    var chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join('');\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === 'string', 'Invalid argument for stringToBytes');\n  var length = str.length;\n  var bytes = new Uint8Array(length);\n  for (var i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xFF;\n  }\n  return bytes;\n}\n\nfunction string32(value) {\n  return String.fromCharCode((value >> 24) & 0xff, (value >> 16) & 0xff,\n                             (value >> 8) & 0xff, value & 0xff);\n}\n\nfunction log2(x) {\n  var n = 1, i = 0;\n  while (x > n) {\n    n <<= 1;\n    i++;\n  }\n  return i;\n}\n\nfunction readInt8(data, start) {\n  return (data[start] << 24) >> 24;\n}\n\nfunction readUint16(data, offset) {\n  return (data[offset] << 8) | data[offset + 1];\n}\n\nfunction readUint32(data, offset) {\n  return ((data[offset] << 24) | (data[offset + 1] << 16) |\n         (data[offset + 2] << 8) | data[offset + 3]) >>> 0;\n}\n\n// Lazy test the endianness of the platform\n// NOTE: This will be 'true' for simulated TypedArrays\nfunction isLittleEndian() {\n  var buffer8 = new Uint8Array(2);\n  buffer8[0] = 1;\n  var buffer16 = new Uint16Array(buffer8.buffer);\n  return (buffer16[0] === 1);\n}\n\nObject.defineProperty(PDFJS, 'isLittleEndian', {\n  configurable: true,\n  get: function PDFJS_isLittleEndian() {\n    return shadow(PDFJS, 'isLittleEndian', isLittleEndian());\n  }\n});\n\n//#if !(FIREFOX || MOZCENTRAL || B2G || CHROME)\n//// Lazy test if the userAgant support CanvasTypedArrays\nfunction hasCanvasTypedArrays() {\n  var canvas = document.createElement('canvas');\n  canvas.width = canvas.height = 1;\n  var ctx = canvas.getContext('2d');\n  var imageData = ctx.createImageData(1, 1);\n  return (typeof imageData.data.buffer !== 'undefined');\n}\n\nObject.defineProperty(PDFJS, 'hasCanvasTypedArrays', {\n  configurable: true,\n  get: function PDFJS_hasCanvasTypedArrays() {\n    return shadow(PDFJS, 'hasCanvasTypedArrays', hasCanvasTypedArrays());\n  }\n});\n\nvar Uint32ArrayView = (function Uint32ArrayViewClosure() {\n\n  function Uint32ArrayView(buffer, length) {\n    this.buffer = buffer;\n    this.byteLength = buffer.length;\n    this.length = length === undefined ? (this.byteLength >> 2) : length;\n    ensureUint32ArrayViewProps(this.length);\n  }\n  Uint32ArrayView.prototype = Object.create(null);\n\n  var uint32ArrayViewSetters = 0;\n  function createUint32ArrayProp(index) {\n    return {\n      get: function () {\n        var buffer = this.buffer, offset = index << 2;\n        return (buffer[offset] | (buffer[offset + 1] << 8) |\n          (buffer[offset + 2] << 16) | (buffer[offset + 3] << 24)) >>> 0;\n      },\n      set: function (value) {\n        var buffer = this.buffer, offset = index << 2;\n        buffer[offset] = value & 255;\n        buffer[offset + 1] = (value >> 8) & 255;\n        buffer[offset + 2] = (value >> 16) & 255;\n        buffer[offset + 3] = (value >>> 24) & 255;\n      }\n    };\n  }\n\n  function ensureUint32ArrayViewProps(length) {\n    while (uint32ArrayViewSetters < length) {\n      Object.defineProperty(Uint32ArrayView.prototype,\n        uint32ArrayViewSetters,\n        createUint32ArrayProp(uint32ArrayViewSetters));\n      uint32ArrayViewSetters++;\n    }\n  }\n\n  return Uint32ArrayView;\n})();\n//#else\n//PDFJS.hasCanvasTypedArrays = true;\n//#endif\n\nvar IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n\nvar Util = PDFJS.Util = (function UtilClosure() {\n  function Util() {}\n\n  var rgbBuf = ['rgb(', 0, ',', 0, ',', 0, ')'];\n\n  // makeCssRgb() can be called thousands of times. Using |rgbBuf| avoids\n  // creating many intermediate strings.\n  Util.makeCssRgb = function Util_makeCssRgb(r, g, b) {\n    rgbBuf[1] = r;\n    rgbBuf[3] = g;\n    rgbBuf[5] = b;\n    return rgbBuf.join('');\n  };\n\n  // Concatenates two transformation matrices together and returns the result.\n  Util.transform = function Util_transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5]\n    ];\n  };\n\n  // For 2d affine transforms\n  Util.applyTransform = function Util_applyTransform(p, m) {\n    var xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    var yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  };\n\n  Util.applyInverseTransform = function Util_applyInverseTransform(p, m) {\n    var d = m[0] * m[3] - m[1] * m[2];\n    var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  };\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  Util.getAxialAlignedBoundingBox =\n    function Util_getAxialAlignedBoundingBox(r, m) {\n\n    var p1 = Util.applyTransform(r, m);\n    var p2 = Util.applyTransform(r.slice(2, 4), m);\n    var p3 = Util.applyTransform([r[0], r[3]], m);\n    var p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1])\n    ];\n  };\n\n  Util.inverseTransform = function Util_inverseTransform(m) {\n    var d = m[0] * m[3] - m[1] * m[2];\n    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n  };\n\n  // Apply a generic 3d matrix M on a 3-vector v:\n  //   | a b c |   | X |\n  //   | d e f | x | Y |\n  //   | g h i |   | Z |\n  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],\n  // with v as [X,Y,Z]\n  Util.apply3dTransform = function Util_apply3dTransform(m, v) {\n    return [\n      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],\n      m[6] * v[0] + m[7] * v[1] + m[8] * v[2]\n    ];\n  };\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  Util.singularValueDecompose2dScale =\n    function Util_singularValueDecompose2dScale(m) {\n\n    var transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    var a = m[0] * transpose[0] + m[1] * transpose[2];\n    var b = m[0] * transpose[1] + m[1] * transpose[3];\n    var c = m[2] * transpose[0] + m[3] * transpose[2];\n    var d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    var first = (a + d) / 2;\n    var second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;\n    var sx = first + second || 1;\n    var sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  };\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  Util.normalizeRect = function Util_normalizeRect(rect) {\n    var r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  };\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'false'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  Util.intersect = function Util_intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    // Order points along the axes\n    var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare),\n        orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare),\n        result = [];\n\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    // X: first and second points belong to different rectangles?\n    if ((orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||\n        (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])) {\n      // Intersection must be between second and third points\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return false;\n    }\n\n    // Y: first and second points belong to different rectangles?\n    if ((orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||\n        (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])) {\n      // Intersection must be between second and third points\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return false;\n    }\n\n    return result;\n  };\n\n  Util.sign = function Util_sign(num) {\n    return num < 0 ? -1 : 1;\n  };\n\n  Util.appendToArray = function Util_appendToArray(arr1, arr2) {\n    Array.prototype.push.apply(arr1, arr2);\n  };\n\n  Util.prependToArray = function Util_prependToArray(arr1, arr2) {\n    Array.prototype.unshift.apply(arr1, arr2);\n  };\n\n  Util.extendObj = function extendObj(obj1, obj2) {\n    for (var key in obj2) {\n      obj1[key] = obj2[key];\n    }\n  };\n\n  Util.getInheritableProperty = function Util_getInheritableProperty(dict,\n                                                                     name) {\n    while (dict && !dict.has(name)) {\n      dict = dict.get('Parent');\n    }\n    if (!dict) {\n      return null;\n    }\n    return dict.get(name);\n  };\n\n  Util.inherit = function Util_inherit(sub, base, prototype) {\n    sub.prototype = Object.create(base.prototype);\n    sub.prototype.constructor = sub;\n    for (var prop in prototype) {\n      sub.prototype[prop] = prototype[prop];\n    }\n  };\n\n  Util.loadScript = function Util_loadScript(src, callback) {\n    var script = document.createElement('script');\n    var loaded = false;\n    script.setAttribute('src', src);\n    if (callback) {\n      script.onload = function() {\n        if (!loaded) {\n          callback();\n        }\n        loaded = true;\n      };\n    }\n    document.getElementsByTagName('head')[0].appendChild(script);\n  };\n\n  return Util;\n})();\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n * @class\n * @alias PDFJS.PageViewport\n */\nvar PageViewport = PDFJS.PageViewport = (function PageViewportClosure() {\n  /**\n   * @constructor\n   * @private\n   * @param viewBox {Array} xMin, yMin, xMax and yMax coordinates.\n   * @param scale {number} scale of the viewport.\n   * @param rotation {number} rotations of the viewport in degrees.\n   * @param offsetX {number} offset X\n   * @param offsetY {number} offset Y\n   * @param dontFlip {boolean} if true, axis Y will not be flipped.\n   */\n  function PageViewport(viewBox, scale, rotation, offsetX, offsetY, dontFlip) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    var centerX = (viewBox[2] + viewBox[0]) / 2;\n    var centerY = (viewBox[3] + viewBox[1]) / 2;\n    var rotateA, rotateB, rotateC, rotateD;\n    rotation = rotation % 360;\n    rotation = rotation < 0 ? rotation + 360 : rotation;\n    switch (rotation) {\n      case 180:\n        rotateA = -1; rotateB = 0; rotateC = 0; rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0; rotateB = 1; rotateC = 1; rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0; rotateB = -1; rotateC = -1; rotateD = 0;\n        break;\n      //case 0:\n      default:\n        rotateA = 1; rotateB = 0; rotateC = 0; rotateD = -1;\n        break;\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC; rotateD = -rotateD;\n    }\n\n    var offsetCanvasX, offsetCanvasY;\n    var width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY\n    ];\n\n    this.width = width;\n    this.height = height;\n    this.fontScale = scale;\n  }\n  PageViewport.prototype = /** @lends PDFJS.PageViewport.prototype */ {\n    /**\n     * Clones viewport with additional properties.\n     * @param args {Object} (optional) If specified, may contain the 'scale' or\n     * 'rotation' properties to override the corresponding properties in\n     * the cloned viewport.\n     * @returns {PDFJS.PageViewport} Cloned viewport.\n     */\n    clone: function PageViewPort_clone(args) {\n      args = args || {};\n      var scale = 'scale' in args ? args.scale : this.scale;\n      var rotation = 'rotation' in args ? args.rotation : this.rotation;\n      return new PageViewport(this.viewBox.slice(), scale, rotation,\n                              this.offsetX, this.offsetY, args.dontFlip);\n    },\n    /**\n     * Converts PDF point to the viewport coordinates. For examples, useful for\n     * converting PDF location into canvas pixel coordinates.\n     * @param x {number} X coordinate.\n     * @param y {number} Y coordinate.\n     * @returns {Object} Object that contains 'x' and 'y' properties of the\n     * point in the viewport coordinate space.\n     * @see {@link convertToPdfPoint}\n     * @see {@link convertToViewportRectangle}\n     */\n    convertToViewportPoint: function PageViewport_convertToViewportPoint(x, y) {\n      return Util.applyTransform([x, y], this.transform);\n    },\n    /**\n     * Converts PDF rectangle to the viewport coordinates.\n     * @param rect {Array} xMin, yMin, xMax and yMax coordinates.\n     * @returns {Array} Contains corresponding coordinates of the rectangle\n     * in the viewport coordinate space.\n     * @see {@link convertToViewportPoint}\n     */\n    convertToViewportRectangle:\n      function PageViewport_convertToViewportRectangle(rect) {\n      var tl = Util.applyTransform([rect[0], rect[1]], this.transform);\n      var br = Util.applyTransform([rect[2], rect[3]], this.transform);\n      return [tl[0], tl[1], br[0], br[1]];\n    },\n    /**\n     * Converts viewport coordinates to the PDF location. For examples, useful\n     * for converting canvas pixel location into PDF one.\n     * @param x {number} X coordinate.\n     * @param y {number} Y coordinate.\n     * @returns {Object} Object that contains 'x' and 'y' properties of the\n     * point in the PDF coordinate space.\n     * @see {@link convertToViewportPoint}\n     */\n    convertToPdfPoint: function PageViewport_convertToPdfPoint(x, y) {\n      return Util.applyInverseTransform([x, y], this.transform);\n    }\n  };\n  return PageViewport;\n})();\n\nvar PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014,\n  0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C,\n  0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160,\n  0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC\n];\n\nfunction stringToPDFString(str) {\n  var i, n = str.length, strBuf = [];\n  if (str[0] === '\\xFE' && str[1] === '\\xFF') {\n    // UTF16BE BOM\n    for (i = 2; i < n; i += 2) {\n      strBuf.push(String.fromCharCode(\n        (str.charCodeAt(i) << 8) | str.charCodeAt(i + 1)));\n    }\n  } else {\n    for (i = 0; i < n; ++i) {\n      var code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n  return strBuf.join('');\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction isEmptyObj(obj) {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n}\n\nfunction isBool(v) {\n  return typeof v === 'boolean';\n}\n\nfunction isInt(v) {\n  return typeof v === 'number' && ((v | 0) === v);\n}\n\nfunction isNum(v) {\n  return typeof v === 'number';\n}\n\nfunction isString(v) {\n  return typeof v === 'string';\n}\n\nfunction isNull(v) {\n  return v === null;\n}\n\nfunction isName(v) {\n  return v instanceof Name;\n}\n\nfunction isCmd(v, cmd) {\n  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);\n}\n\nfunction isDict(v, type) {\n  if (!(v instanceof Dict)) {\n    return false;\n  }\n  if (!type) {\n    return true;\n  }\n  var dictType = v.get('Type');\n  return isName(dictType) && dictType.name === type;\n}\n\nfunction isArray(v) {\n  return v instanceof Array;\n}\n\nfunction isStream(v) {\n  return typeof v === 'object' && v !== null && v.getBytes !== undefined;\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === 'object' && v !== null && v.byteLength !== undefined;\n}\n\nfunction isRef(v) {\n  return v instanceof Ref;\n}\n\n/**\n * Promise Capability object.\n *\n * @typedef {Object} PromiseCapability\n * @property {Promise} promise - A promise object.\n * @property {function} resolve - Fullfills the promise.\n * @property {function} reject - Rejects the promise.\n */\n\n/**\n * Creates a promise capability object.\n * @alias PDFJS.createPromiseCapability\n *\n * @return {PromiseCapability} A capability object contains:\n * - a Promise, resolve and reject methods.\n */\nfunction createPromiseCapability() {\n  var capability = {};\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = resolve;\n    capability.reject = reject;\n  });\n  return capability;\n}\n\nPDFJS.createPromiseCapability = createPromiseCapability;\n\n/**\n * Polyfill for Promises:\n * The following promise implementation tries to generally implement the\n * Promise/A+ spec. Some notable differences from other promise libaries are:\n * - There currently isn't a seperate deferred and promise object.\n * - Unhandled rejections eventually show an error if they aren't handled.\n *\n * Based off of the work in:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=810490\n */\n(function PromiseClosure() {\n  if (globalScope.Promise) {\n    // Promises existing in the DOM/Worker, checking presence of all/resolve\n    if (typeof globalScope.Promise.all !== 'function') {\n      globalScope.Promise.all = function (iterable) {\n        var count = 0, results = [], resolve, reject;\n        var promise = new globalScope.Promise(function (resolve_, reject_) {\n          resolve = resolve_;\n          reject = reject_;\n        });\n        iterable.forEach(function (p, i) {\n          count++;\n          p.then(function (result) {\n            results[i] = result;\n            count--;\n            if (count === 0) {\n              resolve(results);\n            }\n          }, reject);\n        });\n        if (count === 0) {\n          resolve(results);\n        }\n        return promise;\n      };\n    }\n    if (typeof globalScope.Promise.resolve !== 'function') {\n      globalScope.Promise.resolve = function (value) {\n        return new globalScope.Promise(function (resolve) { resolve(value); });\n      };\n    }\n    if (typeof globalScope.Promise.reject !== 'function') {\n      globalScope.Promise.reject = function (reason) {\n        return new globalScope.Promise(function (resolve, reject) {\n          reject(reason);\n        });\n      };\n    }\n    if (typeof globalScope.Promise.prototype.catch !== 'function') {\n      globalScope.Promise.prototype.catch = function (onReject) {\n        return globalScope.Promise.prototype.then(undefined, onReject);\n      };\n    }\n    return;\n  }\n//#if !MOZCENTRAL\n  var STATUS_PENDING = 0;\n  var STATUS_RESOLVED = 1;\n  var STATUS_REJECTED = 2;\n\n  // In an attempt to avoid silent exceptions, unhandled rejections are\n  // tracked and if they aren't handled in a certain amount of time an\n  // error is logged.\n  var REJECTION_TIMEOUT = 500;\n\n  var HandlerManager = {\n    handlers: [],\n    running: false,\n    unhandledRejections: [],\n    pendingRejectionCheck: false,\n\n    scheduleHandlers: function scheduleHandlers(promise) {\n      if (promise._status === STATUS_PENDING) {\n        return;\n      }\n\n      this.handlers = this.handlers.concat(promise._handlers);\n      promise._handlers = [];\n\n      if (this.running) {\n        return;\n      }\n      this.running = true;\n\n      setTimeout(this.runHandlers.bind(this), 0);\n    },\n\n    runHandlers: function runHandlers() {\n      var RUN_TIMEOUT = 1; // ms\n      var timeoutAt = Date.now() + RUN_TIMEOUT;\n      while (this.handlers.length > 0) {\n        var handler = this.handlers.shift();\n\n        var nextStatus = handler.thisPromise._status;\n        var nextValue = handler.thisPromise._value;\n\n        try {\n          if (nextStatus === STATUS_RESOLVED) {\n            if (typeof handler.onResolve === 'function') {\n              nextValue = handler.onResolve(nextValue);\n            }\n          } else if (typeof handler.onReject === 'function') {\n              nextValue = handler.onReject(nextValue);\n              nextStatus = STATUS_RESOLVED;\n\n              if (handler.thisPromise._unhandledRejection) {\n                this.removeUnhandeledRejection(handler.thisPromise);\n              }\n          }\n        } catch (ex) {\n          nextStatus = STATUS_REJECTED;\n          nextValue = ex;\n        }\n\n        handler.nextPromise._updateStatus(nextStatus, nextValue);\n        if (Date.now() >= timeoutAt) {\n          break;\n        }\n      }\n\n      if (this.handlers.length > 0) {\n        setTimeout(this.runHandlers.bind(this), 0);\n        return;\n      }\n\n      this.running = false;\n    },\n\n    addUnhandledRejection: function addUnhandledRejection(promise) {\n      this.unhandledRejections.push({\n        promise: promise,\n        time: Date.now()\n      });\n      this.scheduleRejectionCheck();\n    },\n\n    removeUnhandeledRejection: function removeUnhandeledRejection(promise) {\n      promise._unhandledRejection = false;\n      for (var i = 0; i < this.unhandledRejections.length; i++) {\n        if (this.unhandledRejections[i].promise === promise) {\n          this.unhandledRejections.splice(i);\n          i--;\n        }\n      }\n    },\n\n    scheduleRejectionCheck: function scheduleRejectionCheck() {\n      if (this.pendingRejectionCheck) {\n        return;\n      }\n      this.pendingRejectionCheck = true;\n      setTimeout(function rejectionCheck() {\n        this.pendingRejectionCheck = false;\n        var now = Date.now();\n        for (var i = 0; i < this.unhandledRejections.length; i++) {\n          if (now - this.unhandledRejections[i].time > REJECTION_TIMEOUT) {\n            var unhandled = this.unhandledRejections[i].promise._value;\n            var msg = 'Unhandled rejection: ' + unhandled;\n            if (unhandled.stack) {\n              msg += '\\n' + unhandled.stack;\n            }\n            warn(msg);\n            this.unhandledRejections.splice(i);\n            i--;\n          }\n        }\n        if (this.unhandledRejections.length) {\n          this.scheduleRejectionCheck();\n        }\n      }.bind(this), REJECTION_TIMEOUT);\n    }\n  };\n\n  function Promise(resolver) {\n    this._status = STATUS_PENDING;\n    this._handlers = [];\n    try {\n      resolver.call(this, this._resolve.bind(this), this._reject.bind(this));\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n  /**\n   * Builds a promise that is resolved when all the passed in promises are\n   * resolved.\n   * @param {array} array of data and/or promises to wait for.\n   * @return {Promise} New dependant promise.\n   */\n  Promise.all = function Promise_all(promises) {\n    var resolveAll, rejectAll;\n    var deferred = new Promise(function (resolve, reject) {\n      resolveAll = resolve;\n      rejectAll = reject;\n    });\n    var unresolved = promises.length;\n    var results = [];\n    if (unresolved === 0) {\n      resolveAll(results);\n      return deferred;\n    }\n    function reject(reason) {\n      if (deferred._status === STATUS_REJECTED) {\n        return;\n      }\n      results = [];\n      rejectAll(reason);\n    }\n    for (var i = 0, ii = promises.length; i < ii; ++i) {\n      var promise = promises[i];\n      var resolve = (function(i) {\n        return function(value) {\n          if (deferred._status === STATUS_REJECTED) {\n            return;\n          }\n          results[i] = value;\n          unresolved--;\n          if (unresolved === 0) {\n            resolveAll(results);\n          }\n        };\n      })(i);\n      if (Promise.isPromise(promise)) {\n        promise.then(resolve, reject);\n      } else {\n        resolve(promise);\n      }\n    }\n    return deferred;\n  };\n\n  /**\n   * Checks if the value is likely a promise (has a 'then' function).\n   * @return {boolean} true if value is thenable\n   */\n  Promise.isPromise = function Promise_isPromise(value) {\n    return value && typeof value.then === 'function';\n  };\n\n  /**\n   * Creates resolved promise\n   * @param value resolve value\n   * @returns {Promise}\n   */\n  Promise.resolve = function Promise_resolve(value) {\n    return new Promise(function (resolve) { resolve(value); });\n  };\n\n  /**\n   * Creates rejected promise\n   * @param reason rejection value\n   * @returns {Promise}\n   */\n  Promise.reject = function Promise_reject(reason) {\n    return new Promise(function (resolve, reject) { reject(reason); });\n  };\n\n  Promise.prototype = {\n    _status: null,\n    _value: null,\n    _handlers: null,\n    _unhandledRejection: null,\n\n    _updateStatus: function Promise__updateStatus(status, value) {\n      if (this._status === STATUS_RESOLVED ||\n          this._status === STATUS_REJECTED) {\n        return;\n      }\n\n      if (status === STATUS_RESOLVED &&\n          Promise.isPromise(value)) {\n        value.then(this._updateStatus.bind(this, STATUS_RESOLVED),\n                   this._updateStatus.bind(this, STATUS_REJECTED));\n        return;\n      }\n\n      this._status = status;\n      this._value = value;\n\n      if (status === STATUS_REJECTED && this._handlers.length === 0) {\n        this._unhandledRejection = true;\n        HandlerManager.addUnhandledRejection(this);\n      }\n\n      HandlerManager.scheduleHandlers(this);\n    },\n\n    _resolve: function Promise_resolve(value) {\n      this._updateStatus(STATUS_RESOLVED, value);\n    },\n\n    _reject: function Promise_reject(reason) {\n      this._updateStatus(STATUS_REJECTED, reason);\n    },\n\n    then: function Promise_then(onResolve, onReject) {\n      var nextPromise = new Promise(function (resolve, reject) {\n        this.resolve = resolve;\n        this.reject = reject;\n      });\n      this._handlers.push({\n        thisPromise: this,\n        onResolve: onResolve,\n        onReject: onReject,\n        nextPromise: nextPromise\n      });\n      HandlerManager.scheduleHandlers(this);\n      return nextPromise;\n    },\n\n    catch: function Promise_catch(onReject) {\n      return this.then(undefined, onReject);\n    }\n  };\n\n  globalScope.Promise = Promise;\n//#else\n//throw new Error('DOM Promise is not present');\n//#endif\n})();\n\nvar StatTimer = (function StatTimerClosure() {\n  function rpad(str, pad, length) {\n    while (str.length < length) {\n      str += pad;\n    }\n    return str;\n  }\n  function StatTimer() {\n    this.started = {};\n    this.times = [];\n    this.enabled = true;\n  }\n  StatTimer.prototype = {\n    time: function StatTimer_time(name) {\n      if (!this.enabled) {\n        return;\n      }\n      if (name in this.started) {\n        warn('Timer is already running for ' + name);\n      }\n      this.started[name] = Date.now();\n    },\n    timeEnd: function StatTimer_timeEnd(name) {\n      if (!this.enabled) {\n        return;\n      }\n      if (!(name in this.started)) {\n        warn('Timer has not been started for ' + name);\n      }\n      this.times.push({\n        'name': name,\n        'start': this.started[name],\n        'end': Date.now()\n      });\n      // Remove timer from started so it can be called again.\n      delete this.started[name];\n    },\n    toString: function StatTimer_toString() {\n      var i, ii;\n      var times = this.times;\n      var out = '';\n      // Find the longest name for padding purposes.\n      var longest = 0;\n      for (i = 0, ii = times.length; i < ii; ++i) {\n        var name = times[i]['name'];\n        if (name.length > longest) {\n          longest = name.length;\n        }\n      }\n      for (i = 0, ii = times.length; i < ii; ++i) {\n        var span = times[i];\n        var duration = span.end - span.start;\n        out += rpad(span['name'], ' ', longest) + ' ' + duration + 'ms\\n';\n      }\n      return out;\n    }\n  };\n  return StatTimer;\n})();\n\nPDFJS.createBlob = function createBlob(data, contentType) {\n  if (typeof Blob !== 'undefined') {\n    return new Blob([data], { type: contentType });\n  }\n  // Blob builder is deprecated in FF14 and removed in FF18.\n  var bb = new MozBlobBuilder();\n  bb.append(data);\n  return bb.getBlob(contentType);\n};\n\nPDFJS.createObjectURL = (function createObjectURLClosure() {\n  // Blob/createObjectURL is not available, falling back to data schema.\n  var digits =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  return function createObjectURL(data, contentType) {\n    if (!PDFJS.disableCreateObjectURL &&\n        typeof URL !== 'undefined' && URL.createObjectURL) {\n      var blob = PDFJS.createBlob(data, contentType);\n      return URL.createObjectURL(blob);\n    }\n\n    var buffer = 'data:' + contentType + ';base64,';\n    for (var i = 0, ii = data.length; i < ii; i += 3) {\n      var b1 = data[i] & 0xFF;\n      var b2 = data[i + 1] & 0xFF;\n      var b3 = data[i + 2] & 0xFF;\n      var d1 = b1 >> 2, d2 = ((b1 & 3) << 4) | (b2 >> 4);\n      var d3 = i + 1 < ii ? ((b2 & 0xF) << 2) | (b3 >> 6) : 64;\n      var d4 = i + 2 < ii ? (b3 & 0x3F) : 64;\n      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n    }\n    return buffer;\n  };\n})();\n\nfunction MessageHandler(name, comObj) {\n  this.name = name;\n  this.comObj = comObj;\n  this.callbackIndex = 1;\n  this.postMessageTransfers = true;\n  var callbacksCapabilities = this.callbacksCapabilities = {};\n  var ah = this.actionHandler = {};\n\n  ah['console_log'] = [function ahConsoleLog(data) {\n    console.log.apply(console, data);\n  }];\n  ah['console_error'] = [function ahConsoleError(data) {\n    console.error.apply(console, data);\n  }];\n  ah['_unsupported_feature'] = [function ah_unsupportedFeature(data) {\n    UnsupportedManager.notify(data);\n  }];\n\n  comObj.onmessage = function messageHandlerComObjOnMessage(event) {\n    var data = event.data;\n    if (data.isReply) {\n      var callbackId = data.callbackId;\n      if (data.callbackId in callbacksCapabilities) {\n        var callback = callbacksCapabilities[callbackId];\n        delete callbacksCapabilities[callbackId];\n        if ('error' in data) {\n          callback.reject(data.error);\n        } else {\n          callback.resolve(data.data);\n        }\n      } else {\n        error('Cannot resolve callback ' + callbackId);\n      }\n    } else if (data.action in ah) {\n      var action = ah[data.action];\n      if (data.callbackId) {\n        Promise.resolve().then(function () {\n          return action[0].call(action[1], data.data);\n        }).then(function (result) {\n          comObj.postMessage({\n            isReply: true,\n            callbackId: data.callbackId,\n            data: result\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            isReply: true,\n            callbackId: data.callbackId,\n            error: reason\n          });\n        });\n      } else {\n        action[0].call(action[1], data.data);\n      }\n    } else {\n      error('Unknown action from worker: ' + data.action);\n    }\n  };\n}\n\nMessageHandler.prototype = {\n  on: function messageHandlerOn(actionName, handler, scope) {\n    var ah = this.actionHandler;\n    if (ah[actionName]) {\n      error('There is already an actionName called \"' + actionName + '\"');\n    }\n    ah[actionName] = [handler, scope];\n  },\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {String} actionName Action to call.\n   * @param {JSON} data JSON data to send.\n   * @param {Array} [transfers] Optional list of transfers/ArrayBuffers\n   */\n  send: function messageHandlerSend(actionName, data, transfers) {\n    var message = {\n      action: actionName,\n      data: data\n    };\n    this.postMessage(message, transfers);\n  },\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that other side will callback with the response.\n   * @param {String} actionName Action to call.\n   * @param {JSON} data JSON data to send.\n   * @param {Array} [transfers] Optional list of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise:\n    function messageHandlerSendWithPromise(actionName, data, transfers) {\n    var callbackId = this.callbackIndex++;\n    var message = {\n      action: actionName,\n      data: data,\n      callbackId: callbackId\n    };\n    var capability = createPromiseCapability();\n    this.callbacksCapabilities[callbackId] = capability;\n    try {\n      this.postMessage(message, transfers);\n    } catch (e) {\n      capability.reject(e);\n    }\n    return capability.promise;\n  },\n  /**\n   * Sends raw message to the comObj.\n   * @private\n   * @param message {Object} Raw message.\n   * @param transfers List of transfers/ArrayBuffers, or undefined.\n   */\n  postMessage: function (message, transfers) {\n    if (transfers && this.postMessageTransfers) {\n      this.comObj.postMessage(message, transfers);\n    } else {\n      this.comObj.postMessage(message);\n    }\n  }\n};\n\nfunction loadJpegStream(id, imageUrl, objs) {\n  var img = new Image();\n  img.onload = (function loadJpegStream_onloadClosure() {\n    objs.resolve(id, img);\n  });\n  img.onerror = (function loadJpegStream_onerrorClosure() {\n    objs.resolve(id, null);\n    warn('Error during JPEG image loading');\n  });\n  img.src = imageUrl;\n}\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = JpxImage;\n}","/*global module*/\n\n//ftp://medical.nema.org/MEDICAL/Dicom/2014c/output/chtml/part05/sect_6.2.html/\n\n'use strict';\n\n// imports\nvar dicomParser = require('dicom-parser');\nvar jpx = require('./jpx.js');\n\nvar VJS = VJS || {};\nVJS.parsers = VJS.parsers || {};\n\n/**\n * Dicom parser is a combination of utilities to get a VJS image from dicom files.\n *\n * Relies on dcmjs, jquery, HTML5 fetch API, HTML5 promise API.\n *\n * @constructor\n * @class\n * @memberOf VJS.parsers\n * @public\n *\n * @param arrayBuffer {arraybuffer} - List of files to be parsed. It is urls from which\n * VJS.parsers.dicom can pull the data from.\n */\nVJS.parsers.dicom = function(arrayBuffer, id) {\n  /**\n   * @member\n   * @type {arraybuffer}\n   */\n  this._id = id;\n  this._arrayBuffer = arrayBuffer;\n\n  var byteArray = new Uint8Array(arrayBuffer);\n  // window.console.log(byteArray.length);\n\n  // catch error\n  // throw error if any!\n  try {\n    this._dataSet = dicomParser.parseDicom(byteArray);\n  }\n  catch (e) {\n    window.console.log(e);\n    throw 'VJS.parsers.dicom could not parse the dicom';\n  }\n\n  //window.console.log(dicomParser);\n  // window.console.log(this._dataSet);\n  // this.rescaleIntercept(0);\n};\n\nVJS.parsers.dicom.prototype.seriesInstanceUID =  function() {\n  return this._dataSet.string('x0020000e');\n};\n\nVJS.parsers.dicom.prototype.modality =  function() {\n  return this._dataSet.string('x00080060');\n};\n\n// image/frame specific\nVJS.parsers.dicom.prototype.sopInstanceUID =  function() {\n  return this._dataSet.string('x00200018');\n};\n\nVJS.parsers.dicom.prototype.transferSyntaxUID =  function() {\n  return this._dataSet.string('x00020010');\n};\n\nVJS.parsers.dicom.prototype.photometricInterpretation =  function() {\n  return this._dataSet.string('x00280004');\n};\n\nVJS.parsers.dicom.prototype.planarConfiguration =  function() {\n\n  var planarConfiguration = this._dataSet.uint16('x00280006');\n\n  if (typeof planarConfiguration === 'undefined') {\n    planarConfiguration = null;\n  }\n\n  return planarConfiguration;\n};\n\nVJS.parsers.dicom.prototype.samplesPerPixel =  function() {\n  return this._dataSet.uint16('x00280002');\n};\n\nVJS.parsers.dicom.prototype.numberOfFrames =  function() {\n  var numberOfFrames = this._dataSet.intString('x00280008');\n\n  // need something smarter!\n  if (typeof numberOfFrames === 'undefined') {\n    numberOfFrames = null;\n  }\n\n  // make sure we return a number! (not a string!)\n  return numberOfFrames;\n};\n\nVJS.parsers.dicom.prototype.numberOfChannels =  function() {\n  var numberOfChannels = 1;\n  var photometricInterpretation = this.photometricInterpretation();\n\n  if (photometricInterpretation === 'RGB' ||\n            photometricInterpretation === 'PALETTE COLOR' ||\n            photometricInterpretation === 'YBR_FULL' ||\n            photometricInterpretation === 'YBR_FULL_422' ||\n            photometricInterpretation === 'YBR_PARTIAL_422' ||\n            photometricInterpretation === 'YBR_PARTIAL_420' ||\n            photometricInterpretation === 'YBR_RCT') {\n    numberOfChannels = 3;\n  }\n\n  // make sure we return a number! (not a string!)\n  return numberOfChannels;\n};\n\nVJS.parsers.dicom.prototype.imageOrientation =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var imageOrientation = this._dataSet.string('x00200037');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof imageOrientation === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // plane orientation sequence for Nth element in the sequence\n      var planeOrientationSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00209116.items[0].dataSet;\n      imageOrientation = planeOrientationSequence.string('x00200037');\n    } else {\n      // default orientation\n      // should we default to undefined??\n      imageOrientation = null;\n    }\n  }\n\n  // format image orientation ('1\\0\\0\\0\\1\\0') to array containing 6 numbers\n  if (imageOrientation) {\n    // make sure we return a number! (not a string!)\n    // might not need to split (floatString + index)\n    imageOrientation = imageOrientation.split('\\\\').map(Number);\n  }\n\n  return imageOrientation;\n};\n\nVJS.parsers.dicom.prototype.pixelAspectRatio =  function() {\n  var pixelAspectRatio = [\n    this._dataSet.intString('x00280034', 0),\n    this._dataSet.intString('x00280034', 1)\n    ];\n\n  // need something smarter!\n  if (typeof pixelAspectRatio[0] === 'undefined') {\n    pixelAspectRatio = null;\n  }\n\n  // make sure we return a number! (not a string!)\n  return pixelAspectRatio;\n};\n\nVJS.parsers.dicom.prototype.imagePosition =  function(frameIndex) {\n  var imagePosition = null;\n  // first look for frame!\n  // per frame functionnal group sequence\n  var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n  if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n    // plane orientation sequence for Nth element in the sequence\n    var planeOrientationSequence = perFrameFunctionnalGroupSequence\n      .items[frameIndex].dataSet.elements.x00209113.items[0].dataSet;\n    imagePosition = planeOrientationSequence.string('x00200032');\n  } else {\n    // should we default to undefined??\n    // default orientation\n    imagePosition = this._dataSet.string('x00200032');\n\n    if (typeof imagePosition === 'undefined') {\n      imagePosition = null;\n    }\n  }\n\n  // format image orientation ('1\\0\\0\\0\\1\\0') to array containing 6 numbers\n  if (imagePosition) {\n    // make sure we return a number! (not a string!)\n    imagePosition = imagePosition.split('\\\\').map(Number);\n  }\n\n  return imagePosition;\n};\n\nVJS.parsers.dicom.prototype.instanceNumber =  function(frameIndex) {\n  var instanceNumber = null;\n  // first look for frame!\n  // per frame functionnal group sequence\n  var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n  if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n    // plane orientation sequence for Nth element in the sequence\n    // PHILIPS HACK...\n    if (perFrameFunctionnalGroupSequence\n      .items[frameIndex].dataSet.elements.x2005140f) {\n      var planeOrientationSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x2005140f.items[0].dataSet;\n      instanceNumber = planeOrientationSequence.intString('x00200013');\n    } else {\n      instanceNumber = this._dataSet.intString('x00200013');\n\n      if (typeof instanceNumber === 'undefined') {\n        instanceNumber = null;\n      }\n    }\n\n  } else {\n    // should we default to undefined??\n    // default orientation\n    instanceNumber = this._dataSet.intString('x00200013');\n\n    if (typeof instanceNumber === 'undefined') {\n      instanceNumber = null;\n    }\n  }\n\n  return instanceNumber;\n};\n\nVJS.parsers.dicom.prototype.pixelSpacing =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var pixelSpacing = this._dataSet.string('x00280030');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof pixelSpacing === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // plane orientation sequence for Nth element in the sequence\n      var planeOrientationSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289110.items[0].dataSet;\n      pixelSpacing = planeOrientationSequence.string('x00280030');\n    } else {\n      // default orientation\n      pixelSpacing = null;\n    }\n  }\n\n  // format image orientation ('1\\0\\0\\0\\1\\0') to array containing 6 numbers\n  // should we default to undefined??\n  if (pixelSpacing) {\n\n    // make sure we return array of numbers! (not strings!)\n    pixelSpacing = pixelSpacing.split('\\\\').map(Number);\n  }\n  return pixelSpacing;\n};\n\nVJS.parsers.dicom.prototype.sopInstanceUID =  function(frameIndex) {\n  // expect frame index to start at 0!\n\n  // per frame\n  // philips 2005,140f\n  //\n  var sopInstanceUID = this._dataSet.string('x00080018');\n  return sopInstanceUID;\n};\n\nVJS.parsers.dicom.prototype.sliceThickness =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var sliceThickness = this._dataSet.floatString('x00180050');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof sliceThickness === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // plane orientation sequence for Nth element in the sequence\n      var planeOrientationSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289110.items[0].dataSet;\n      sliceThickness = planeOrientationSequence.floatString('x00180050');\n    } else {\n      // default orientation\n      // should we default to undefined??\n      // print warning at least...\n      sliceThickness = null;\n    }\n  }\n\n  return sliceThickness;\n};\n\nVJS.parsers.dicom.prototype.rows =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var rows = this._dataSet.uint16('x00280010');\n\n  if (typeof rows === 'undefined') {\n    rows = null;\n    // print warning at least...\n  }\n\n  return rows;\n};\n\nVJS.parsers.dicom.prototype.columns =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var columns = this._dataSet.uint16('x00280011');\n\n  if (typeof columns === 'undefined') {\n    columns = null;\n    // print warning at least...\n  }\n\n  return columns;\n};\n\nVJS.parsers.dicom.prototype.pixelRepresentation =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var pixelRepresentation = this._dataSet.uint16('x00280103');\n  return pixelRepresentation;\n};\n\nVJS.parsers.dicom.prototype.bitsAllocated =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var bitsAllocated = this._dataSet.uint16('x00280100');\n  return bitsAllocated;\n};\n\nVJS.parsers.dicom.prototype.highBit =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var highBit = this._dataSet.uint16('x00280102');\n  return highBit;\n};\n\nVJS.parsers.dicom.prototype.rescaleIntercept =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var rescaleIntercept = this._dataSet.floatString('x00281052');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof rescaleIntercept === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // NOT A PHILIPS TRICK!\n      var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289145.items[0].dataSet;\n      rescaleIntercept = philipsPrivateSequence.floatString('x00281052');\n    } else {\n      // default rescaleIntercept\n      rescaleIntercept = null;\n    }\n  }\n\n  return rescaleIntercept;\n};\n\nVJS.parsers.dicom.prototype.rescaleSlope =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var rescaleSlope = this._dataSet.floatString('x00281053');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof rescaleSlope === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // NOT A PHILIPS TRICK!\n      var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289145.items[0].dataSet;\n      rescaleSlope = philipsPrivateSequence.floatString('x00281052');\n    } else {\n      // default rescaleSlope\n      rescaleSlope = null;\n    }\n  }\n\n  return rescaleSlope;\n};\n\nVJS.parsers.dicom.prototype.windowCenter =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var windowCenter = this._dataSet.floatString('x00281050');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof windowCenter === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // NOT A PHILIPS TRICK!.\n      var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289132.items[0].dataSet;\n      windowCenter = philipsPrivateSequence.floatString('x00281050');\n    } else {\n      // default windowCenter\n      // print warning at least...\n      windowCenter = null;\n    }\n  }\n\n  return windowCenter;\n};\n\nVJS.parsers.dicom.prototype.windowWidth =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var windowWidth = this._dataSet.floatString('x00281051');\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group\n  if (typeof windowWidth === 'undefined') {\n    // per frame functionnal group sequence\n    var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n    if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n      // NOT A PHILIPS TRICK!\n      var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n        .items[frameIndex].dataSet.elements.x00289132.items[0].dataSet;\n      windowWidth = philipsPrivateSequence.floatString('x00281051');\n    } else {\n      // default windowWidth\n      // print warning at least...\n      windowWidth = null;\n    }\n  }\n  return windowWidth;\n};\n\nVJS.parsers.dicom.prototype.dimensionIndexValues =  function(frameIndex) {\n  var dimensionIndexValues = [];\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group sequence\n  var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n  if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n    // NOT A PHILIPS TRICK!\n    var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n      .items[frameIndex].dataSet.elements.x00209111.items[0].dataSet;\n    var element = philipsPrivateSequence.elements.x00209157;\n    // /4 because UL\n    var nbValues = element.length / 4;\n    for (var i = 0; i < nbValues; i++) {\n      dimensionIndexValues.push(philipsPrivateSequence.uint32('x00209157', i));\n    }\n  } else {\n    dimensionIndexValues = null;\n  }\n\n  return dimensionIndexValues;\n};\n\nVJS.parsers.dicom.prototype.inStackPositionNumber =  function(frameIndex) {\n  var inStackPositionNumber = null;\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group sequence\n  var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n  if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n    // NOT A PHILIPS TRICK!\n    var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n      .items[frameIndex].dataSet.elements.x00209111.items[0].dataSet;\n    inStackPositionNumber = philipsPrivateSequence.uint32('x00209057');\n  } else {\n    inStackPositionNumber = null;\n  }\n\n  return inStackPositionNumber;\n};\n\nVJS.parsers.dicom.prototype.stackID =  function(frameIndex) {\n  var stackID = null;\n\n  // try to get it from enhanced MR images\n  // per-frame functionnal group sequence\n  var perFrameFunctionnalGroupSequence = this._dataSet.elements.x52009230;\n\n  if (typeof perFrameFunctionnalGroupSequence !== 'undefined') {\n    // NOT A PHILIPS TRICK!\n    var philipsPrivateSequence = perFrameFunctionnalGroupSequence\n      .items[frameIndex].dataSet.elements.x00209111.items[0].dataSet;\n    stackID = philipsPrivateSequence.intString('x00209056');\n  } else {\n    stackID = null;\n  }\n\n  return stackID;\n};\n\nVJS.parsers.dicom.prototype.decompressPixelData =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var dPixelData = [];\n  // http://www.dicomlibrary.com/dicom/transfer-syntax/\n  var transferSyntaxUID = this.transferSyntaxUID();\n\n  // find compression scheme\n  if (transferSyntaxUID === '1.2.840.10008.1.2.4.90' ||  // JPEG 2000 lossless\n      transferSyntaxUID === '1.2.840.10008.1.2.4.91') {  // JPEG 2000 lossy\n    //window.console.log('JPG2000 in action!');\n    // window.console.log(this._dataSet);\n    //window.console.log(dicomParser);\n    //window.console.log(this._dataSet.elements);\n    var compressedPixelData = dicomParser.readEncapsulatedPixelData(this._dataSet, this._dataSet.elements.x7fe00010, frameIndex);\n    // var pixelDataElement = this._dataSet.elements.x7fe00010;\n    // var pixelData = new Uint8Array(this._dataSet.byteArray.buffer, pixelDataElement.dataOffset, pixelDataElement.length);\n    var jpxImage = new jpx();\n    // https://github.com/OHIF/image-JPEG2000/issues/6\n    // It currently returns either Int16 or Uint16 based on whether the codestream is signed or not.\n    jpxImage.parse(compressedPixelData);\n\n    // var j2kWidth = jpxImage.width;\n    // var j2kHeight = jpxImage.height;\n\n    var componentsCount = jpxImage.componentsCount;\n    if (componentsCount !== 1) {\n      throw 'JPEG2000 decoder returned a componentCount of ' + componentsCount + ', when 1 is expected';\n    }\n    var tileCount = jpxImage.tiles.length;\n    if (tileCount !== 1) {\n      throw 'JPEG2000 decoder returned a tileCount of ' + tileCount + ', when 1 is expected';\n    }\n    var tileComponents = jpxImage.tiles[0];\n    var pixelData = tileComponents.items;\n\n    // window.console.log(j2kWidth, j2kHeight);\n\n    return pixelData;\n  }\n\n  return dPixelData;\n};\n\nVJS.parsers.dicom.prototype.extractPixelData =  function(frameIndex) {\n  // expect frame index to start at 0!\n  var ePixelData = null;\n\n  // if compressed..?\n  var transferSyntaxUID = this.transferSyntaxUID();\n\n  // find compression scheme\n  if (transferSyntaxUID === '1.2.840.10008.1.2.4.90' ||  // JPEG 2000 lossless\n      transferSyntaxUID === '1.2.840.10008.1.2.4.91') {\n    // which format\n    return this.decompressPixelData(frameIndex);\n  }\n\n  // else\n  // ned to guess pixel format to know if uint8, unit16 or int16\n  // Note - we may want to sanity check the rows * columns * bitsAllocated * samplesPerPixel against the buffer size\n  var pixelRepresentation = this.pixelRepresentation(frameIndex);\n  var bitsAllocated = this.bitsAllocated(frameIndex);\n  var pixelDataElement = this._dataSet.elements.x7fe00010;\n  var pixelDataOffset = pixelDataElement.dataOffset;\n  var numberOfChannels  = this.numberOfChannels();\n  var numPixels = this.rows(frameIndex) * this.columns(frameIndex) * numberOfChannels;\n  var frameOffset = 0;\n\n  if (numberOfChannels === 1) {\n    if (pixelRepresentation === 0 && bitsAllocated === 8) {\n\n      // unsigned 8 bit\n      frameOffset = pixelDataOffset + frameIndex * numPixels;\n      ePixelData =  new Uint8Array(this._dataSet.byteArray.buffer, frameOffset, numPixels);\n\n    } else if (pixelRepresentation === 0 && bitsAllocated === 16) {\n\n      // unsigned 16 bit\n      frameOffset = pixelDataOffset + frameIndex * numPixels * 2;\n      ePixelData = new Uint16Array(this._dataSet.byteArray.buffer, frameOffset, numPixels);\n\n    } else if (pixelRepresentation === 1 && bitsAllocated === 16) {\n\n      // signed 16 bit\n      frameOffset = pixelDataOffset + frameIndex * numPixels * 2;\n      ePixelData = new Int16Array(this._dataSet.byteArray.buffer, frameOffset, numPixels);\n\n    }\n  } else {\n    // ASSUME RGB 8 BITS SIGNED!\n    frameOffset = pixelDataOffset + frameIndex * numPixels;\n    var encodedPixelData = new Uint8Array(this._dataSet.byteArray.buffer, frameOffset, numPixels);\n    var photometricInterpretation = this.photometricInterpretation();\n\n    if (photometricInterpretation === 'RGB') {\n      // ALL GOOD, ALREADY ORDERED\n      ePixelData = encodedPixelData;\n\n    } else if (photometricInterpretation === 'YBR_FULL') {\n      ePixelData = new Uint8Array(numPixels);\n      // https://github.com/chafey/cornerstoneWADOImageLoader/blob/master/src/decodeYBRFull.js\n      var nPixels = numPixels / 3;\n      var ybrIndex = 0;\n      var rgbaIndex = 0;\n      for (var i = 0; i < nPixels; i++) {\n        var y = encodedPixelData[ybrIndex++];\n        var cb = encodedPixelData[ybrIndex++];\n        var cr = encodedPixelData[ybrIndex++];\n        ePixelData[rgbaIndex++] = y + 1.40200 * (cr - 128);// red\n        ePixelData[rgbaIndex++] = y - 0.34414 * (cb - 128) - 0.71414 * (cr - 128); // green\n        ePixelData[rgbaIndex++] = y + 1.77200 * (cb - 128); // blue\n        ePixelData[rgbaIndex++] = 255; //alpha\n      }\n    } else {\n      window.console.log('photometric interpolation not supported: ' + photometricInterpretation);\n    }\n\n  }\n\n  return ePixelData;\n};\n\nVJS.parsers.dicom.prototype.minMaxPixelData =  function(pixelData) {\n\n  var minMax = [65535, -32768];\n  var numPixels = pixelData.length;\n  for (var index = 0; index < numPixels; index++) {\n    var spv = pixelData[index];\n\n    //apply rescale/intercept\n    // var rSlope = this.rescaleSlope(0);\n    // var rIntercept = this.rescaleIntercept(0);\n    // var rpv = spv * rSlope + rIntercept;\n\n    // apply window/level\n    // var wWidth = this.windowWidth(0);\n    // var wCenter = this.windowCenter(0);\n    // var wpv = rpv;\n    // if( wpv < wCenter - wWidth/2){\n    //   wpv = wCenter - wWidth/2;\n    // }\n    // else if( wpv > wCenter + wWidth/2){\n    //   wpv = wCenter + wWidth/2;\n    // }\n\n    minMax[0] = Math.min(minMax[0], spv);\n    minMax[1] = Math.max(minMax[1], spv);\n  }\n\n  return minMax;\n};\n\n// VJS.parsers.dicom.prototype.frameOfReferenceUID = function(imageJqueryDom) {\n//   // try to access frame of reference UID through its DICOM tag\n//   var seriesNumber = imageJqueryDom.find('[tag=\"00200052\"] Value').text();\n\n//   // if not available, assume we only have 1 frame\n//   if (seriesNumber === '') {\n//     seriesNumber = 1;\n//   }\n//   return seriesNumber;\n// };\n\n//\n// ENDIAN NESS NOT TAKEN CARE OF\n// http://stackoverflow.com/questions/5320439/how-do-i-swap-endian-ness-byte-order-of-a-variable-in-javascript\n// http://www.barre.nom.fr/medical/samples/\n//\n//\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n  module.exports = VJS.parsers.dicom;\n}\n","'use strict';\n\nvar VJS = VJS || {};\nVJS.shaders = VJS.shaders || {};\n\n/**\n *\n * Custom shader for the slice object. Should be a shader directory. We can add this shader to any object...\n * @member\n *\n */\n\nVJS.shaders.data = {\n\n  /* -------------------------------------------------------------------------\n  //  Slice shader\n  // features:\n  //\n   ------------------------------------------------------------------------- */\n   \n  'parameters': {\n\n    uniforms: {\n      'uTextureSize': {\n        type: 'f',\n        value: 0.0\n      },\n      'uTextureContainer': {\n        type: 'tv',\n        value: null\n      },\n      'uDataDimensions': {\n        type: 'v3',\n        value: new THREE.Vector3()\n      },\n      'uWorldToData': {\n        type: 'm4',\n        value: new THREE.Matrix4()\n      },\n      'uWindowLevel': {\n        type: 'fv1',\n        value: [0.0, 0.0]\n      },\n      'uNumberOfChannels': {\n        type: 'i',\n        value: 1\n      },\n      'uBitsAllocated': {\n        type: 'i',\n        value: 8\n      },\n      'uInvert': {\n        type: 'i',\n        value: 0\n      },\n      'uLut': {\n        type: 'i',\n        value: 0\n      },\n      'uLutI': {\n        type: 'fv1',\n        value: [0.0]\n      },\n      'uLutR': {\n        type: 'fv1',\n        value: [0.0]\n      },\n      'uLutG': {\n        type: 'fv1',\n        value: [0.0]\n      },\n      'uLutB': {\n        type: 'fv1',\n        value: [0.0]\n      }\n    }\n\n  }\n\n};\n\nmodule.exports = VJS.shaders.data;\n","'use strict';\n\nvar VJS = VJS || {};\nVJS.widgets = VJS.widgets || {};\n\n/**\n *\n * It is typically used to get information about an image from the mouse cursor.\n *\n * Demo: {@link https://fnndsc.github.io/vjs#widget_pixelProbe}\n *\n * @constructor\n * @class\n * @memberOf VJS.widgets\n * @public\n *\n */\nVJS.widgets.pixelProbe = function(image, imageMeshes) {\n    // it is an object 3D that we can add to the scene :)\n    THREE.Object3D.call(this);\n\n    this.domElement = null;\n    this.rasContainer = null;\n    this.ijkContainer = null;\n    this.valueContainer = null;\n\n    this.imageMeshes = imageMeshes;\n    this.image = image;\n\n    this.volumeCore = null;\n\n    this.marks = [];\n\n    this.createDomElement();\n\n    this._worldCoordinate = null; //LPS\n    this._dataCoordinate = null; //IJK\n    this._dataValue = null; //\n    this._labelValue = null; //\n};\n\nVJS.widgets.pixelProbe.prototype = Object.create(THREE.Object3D.prototype);\nVJS.widgets.pixelProbe.prototype.constructor = VJS.widgets.pixelProbe;\n\nVJS.widgets.pixelProbe.prototype.createDomElement = function() {\n\n    // RAS\n    this.rasContainer = document.createElement('div');\n    this.rasContainer.setAttribute('id', 'VJSProbeRAS');\n\n    // IJK\n    this.ijkContainer = document.createElement('div');\n    this.ijkContainer.setAttribute('id', 'VJSProbeIJK');\n\n    // Value\n    this.valueContainer = document.createElement('div');\n    this.valueContainer.setAttribute('id', 'VJSProbeValue');\n\n    this.domElement = document.createElement('div');\n    this.domElement.setAttribute('id', 'VJSProbe');\n    this.domElement.appendChild(this.rasContainer);\n    this.domElement.appendChild(this.ijkContainer);\n    this.domElement.appendChild(this.valueContainer);\n};\n\nVJS.widgets.pixelProbe.prototype.computeValues = function() {\n    // convert point to IJK\n    if (this.image) {\n        var worldToData = this.image._stack[0]._lps2IJK;\n\n        var dataCoordinate = new THREE.Vector3().copy(this._worldCoordinate).applyMatrix4(worldToData);\n        var temp = dataCoordinate.clone();\n\n        // same rounding in the shaders\n        dataCoordinate.x = Math.floor(dataCoordinate.x + 0.5);\n        dataCoordinate.y = Math.floor(dataCoordinate.y + 0.5);\n        dataCoordinate.z = Math.floor(dataCoordinate.z + 0.5);\n        this._dataCoordinate = dataCoordinate;\n\n        if (dataCoordinate.x >= 0 &&\n            dataCoordinate.y >= 0 &&\n            dataCoordinate.z >= 0) {\n            // var textureSize = this.image._stack[0]._textureSize;\n            var rows = this.image._stack[0]._rows;\n            var columns = this.image._stack[0]._columns;\n\n            // var index = this._dataCoordinate.x + columns * this._dataCoordinate.y + rows * columns * this._dataCoordinate.z;\n\n            // var textureIndex = Math.floor(index / (textureSize * textureSize));\n            // var inTextureIndex = index % (textureSize * textureSize);\n\n            this._dataValue = this.image._stack[0]._frame[this._dataCoordinate.z]._pixelData[this._dataCoordinate.x + columns * this._dataCoordinate.y];\n        } else {\n            window.console.log('something funny happening in compute value');\n            window.console.log(dataCoordinate);\n            window.console.log(temp);\n        }\n    }\n};\n\nVJS.widgets.pixelProbe.prototype.updateUI = function(mouse) {\n    var rasContent = this._worldCoordinate.x.toFixed(2) + ' : ' + this._worldCoordinate.y.toFixed(2) + ' : ' + this._worldCoordinate.z.toFixed(2);\n    this.rasContainer.innerHTML = 'LPS: ' + rasContent;\n\n    var ijkContent = this._dataCoordinate.x + ' : ' + this._dataCoordinate.y + ' : ' + this._dataCoordinate.z;\n    this.ijkContainer.innerHTML = 'IJK: ' + ijkContent;\n\n    var valueContent = this._dataValue;\n    this.valueContainer.innerHTML = 'Value: ' + valueContent;\n\n    // position of the div...\n    // need a mode to track the mouse\n    document.getElementById('VJSProbe').style.display = 'block';\n    document.getElementById('VJSProbe').style.top = mouse.clientY + 10;\n    document.getElementById('VJSProbe').style.left = mouse.clientX + 10;\n\n};\n\nVJS.widgets.pixelProbe.prototype.update = function(raycaster, mouse, camera, canvas) {\n\n    if (!this.imageMeshes) {\n        return;\n    }\n\n    this.updateMarkDom(raycaster, mouse, camera, canvas);\n\n    // calculate image intersecting the picking ray\n    var intersects = raycaster.intersectObjects(this.imageMeshes);\n\n    for (var intersect in intersects) {\n        var worldCoordinates = new THREE.Vector3().copy(intersects[intersect].point);\n\n        // if we intersect an image with a ShaderMaterial\n        // TODO: review that\n        if (intersects[intersect].object.material.type === 'ShaderMaterial') {\n            this._worldCoordinate = worldCoordinates;\n            // window.console.log(this._worldCoordinate);\n            this.computeValues();\n            this.updateUI(mouse);\n            return;\n        }\n    }\n\n    // hide UI if not intersecting the planne\n    this.hideUI();\n};\n\nVJS.widgets.pixelProbe.prototype.hideUI = function() {\n    document.getElementById('VJSProbe').style.display = 'none';\n};\n\nVJS.widgets.pixelProbe.prototype.mark = function(raycaster, mouse) {\n    // calculate image intersecting against itself (ideally N spheres)\n    // no all good yet, because we can click on Shader Materail and still\n    // intersect another voxel if looking at plane from the side\n    // do we intersect a cube of the probe (in front of the plane not detected yet...)\n    var intersects = raycaster.intersectObjects(this.children);\n    var worldCoordinates = null;\n    // Look for a pixelProbeMark\n    // for (var intersect in intersects) {\n    //   worldCoordinates = new THREE.Vector3().copy(intersects[intersect].point);\n\n    //   // if on a mark, do not do anything\n    //   if (intersects[intersect].object.name === 'pixelProbeMark') {\n    //     window.console.log('intersect pixelProbeMark!');\n\n    //     return null;\n    //   }\n    // }\n\n    // Look for intersection against image\n    window.console.log(this);\n    intersects = raycaster.intersectObjects(this.imageMeshes);\n    for (var intersect2 in intersects) {\n        worldCoordinates = new THREE.Vector3().copy(intersects[intersect2].point);\n\n        // might be better to re-loop\n        // if we intersect an image with a ShaderMaterial\n        // TODO: review that\n        if (intersects[intersect2].object.material.type === 'ShaderMaterial') {\n            window.console.log('intersect shader material!');\n            this._worldCoordinate = worldCoordinates;\n            this.computeValues();\n\n            // make sure this IJK mark is not already shown...\n            for (var i = 0; i < this.marks.length; i++) {\n                if (this.marks[i].ijk.x === this._dataCoordinate.x &&\n                    this.marks[i].ijk.y === this._dataCoordinate.y &&\n                    this.marks[i].ijk.z === this._dataCoordinate.z) {\n                    return;\n                }\n            }\n\n            // create the geometry for it!\n            // var sphereGeometry = new THREE.SphereGeometry(1);\n            // var material = new THREE.MeshBasicMaterial({\n            //     // not selected: amber? #FFC107\n            //     // orange? #FF9800\n            //     // selected: deep orange? #FF5722\n            //     color: 0xFF5722\n            //   });\n            // var sphere = new THREE.Mesh(sphereGeometry, material);\n            // sphere.applyMatrix(new THREE.Matrix4().makeTranslation(\n            //   worldCoordinates.x, worldCoordinates.y, worldCoordinates.z));\n\n            // position against World Voxel Center! Not against the mouse!!\n            var dataToWorld = this.image._stack[0]._ijk2LPS;\n            var worldCenterCoordinate = new THREE.Vector3()\n                .copy(this._dataCoordinate)\n                .applyMatrix4(dataToWorld);\n\n            var voxDataCoord = this._dataCoordinate.clone();\n\n            var voxelGeometry = new THREE.BoxGeometry(1, 1, 1);\n            voxelGeometry.applyMatrix(new THREE.Matrix4().makeTranslation(\n                this._dataCoordinate.x,\n                this._dataCoordinate.y,\n                this._dataCoordinate.z));\n            voxelGeometry.applyMatrix(this.image._stack[0]._ijk2LPS);\n            var voxelMaterial = new THREE.MeshBasicMaterial({\n                wireframe: true,\n                color: 0xFFC107\n            });\n            var voxel = new THREE.Mesh(voxelGeometry, voxelMaterial);\n            // move to world space!\n            // voxel.applyMatrix(new THREE.Matrix4().makeTranslation(\n            //   worldCoordinates.x, worldCoordinates.y, worldCoordinates.z));\n            voxel.name = 'pixelProbeMark';\n            this.add(voxel);\n\n            // store mark\n            var mark = {\n                id: voxel.id,\n                position: worldCenterCoordinate,\n                ijk: voxDataCoord\n            };\n            this.marks.push(mark);\n            window.console.log(this.marks);\n\n            var domElement = this.markDom(mark, mouse);\n\n            return domElement;\n        }\n    }\n};\n\n// do not need mouse in theory...\nVJS.widgets.pixelProbe.prototype.markDom = function(mark, mouse) {\n\n    // that could be a web-component!\n    // RAS\n    var rasContainer = document.createElement('div');\n    rasContainer.setAttribute('class', 'VJSProbeRAS');\n\n    var rasContent = this._worldCoordinate.x.toFixed(2) + ' : ' + this._worldCoordinate.y.toFixed(2) + ' : ' + this._worldCoordinate.z.toFixed(2);\n    rasContainer.innerHTML = 'LPS: ' + rasContent;\n\n    // IJK\n    var ijkContainer = document.createElement('div');\n    ijkContainer.setAttribute('class', 'VJSProbeIJK');\n\n    var ijkContent = this._dataCoordinate.x + ' : ' + this._dataCoordinate.y + ' : ' + this._dataCoordinate.z;\n    ijkContainer.innerHTML = 'IJK: ' + ijkContent;\n\n    // Value\n    var valueContainer = document.createElement('div');\n    valueContainer.setAttribute('class', 'VJSProbeValue');\n\n    var valueContent = this._dataValue;\n    valueContainer.innerHTML = 'Value: ' + valueContent;\n\n    // Package everything\n    var domElement = document.createElement('div');\n    domElement.setAttribute('id', 'mark' + mark.id);\n    domElement.setAttribute('class', 'mark');\n    domElement.appendChild(rasContainer);\n    domElement.appendChild(ijkContainer);\n    domElement.appendChild(valueContainer);\n\n    domElement.style.display = 'block';\n    domElement.style.top = mouse.clientY + 10;\n    domElement.style.left = mouse.clientX + 10;\n\n    return domElement;\n};\n\n// do not need mouse in theory...\nVJS.widgets.pixelProbe.prototype.updateMarkDom = function(raycaster, mouse, camera, canvas) {\n\n    for (var i = 0; i < this.marks.length; i++) {\n        // find element in DOM!\n        // world coordinates to screen\n        var screenCoordinates = this.marks[i].position.clone();\n        screenCoordinates.project(camera);\n\n        screenCoordinates.x = Math.round((screenCoordinates.x + 1) * canvas.offsetWidth / 2);\n        screenCoordinates.y = Math.round((-screenCoordinates.y + 1) * canvas.offsetHeight / 2);\n        screenCoordinates.z = 0;\n\n        // update div position\n        // window.console.log(document.getElementById('mark' + this.marks[i].id));\n        document.getElementById('mark' + this.marks[i].id).style.top = screenCoordinates.y + 10;\n        document.getElementById('mark' + this.marks[i].id).style.left = screenCoordinates.x + 10;\n\n    }\n\n};\n\n/*** Exports ***/\n\nvar moduleType = typeof module;\nif ((moduleType !== 'undefined') && module.exports) {\n    module.exports = VJS.widgets.pixelProbe;\n}"],"sourceRoot":"/source/"}